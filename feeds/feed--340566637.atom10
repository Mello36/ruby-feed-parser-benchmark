<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="http://feeds.feedburner.com/~d/styles/rss2full.xsl" type="text/xsl" media="screen"?><?xml-stylesheet href="http://feeds.feedburner.com/~d/styles/itemcontent.css" type="text/css" media="screen"?><rss xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0" version="2.0">

<channel>
	<title>t+1: Matt Wilson's blog</title>
	
	<link>http://blog.tplus1.com</link>
	<description>Economics, programming, life in Cleveland, parenting, growing vegetables, other stuff.</description>
	<pubDate>Wed, 10 Dec 2008 20:26:31 +0000</pubDate>
	<generator>http://wordpress.org/?v=2.5.1</generator>
	<language>en</language>
			<geo:lat>41.499202</geo:lat><geo:long>-81.554349</geo:long><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" href="http://feeds.feedburner.com/tplus1/wtPt" type="application/rss+xml" /><feedburner:emailServiceId>1172407</feedburner:emailServiceId><feedburner:feedburnerHostname>http://www.feedburner.com</feedburner:feedburnerHostname><item>
		<title>Now THIS is recycling</title>
		<link>http://feeds.feedburner.com/~r/tplus1/wtPt/~3/480160369/</link>
		<comments>http://blog.tplus1.com/index.php/2008/12/09/now-this-is-recycling/#comments</comments>
		<pubDate>Wed, 10 Dec 2008 03:22:25 +0000</pubDate>
		<dc:creator>matt</dc:creator>
		
		<category><![CDATA[off the grid]]></category>

		<guid isPermaLink="false">http://blog.tplus1.com/?p=263</guid>
		<description><![CDATA[I subscribed to Countryside magazine a few months ago. It&#8217;s a magazine all about &#8220;off-the-grid&#8221; living; stuff like alternative energy, organic farming, making soap out of lard and lye, etc.
Anyhow, one letter from a reader blew my mind.  He&#8217;s talking about everything he does when he finds an abandoned washing machine:

. . . When [...]

<script type="text/javascript">
SHARETHIS.addEntry({
	title: "Now THIS is recycling",
	url: "http://blog.tplus1.com/index.php/2008/12/09/now-this-is-recycling/"
});
</script>
	]]></description>
			<content:encoded><![CDATA[<p>I subscribed to <a href="http://www.countrysidemag.com/">Countryside magazine</a> a few months ago. It&#8217;s a magazine all about &#8220;off-the-grid&#8221; living; stuff like alternative energy, organic farming, making soap out of lard and lye, etc.</p>
<p>Anyhow, one letter from a reader blew my mind.  He&#8217;s talking about everything he does when he finds an abandoned washing machine:</p>
<blockquote><p>
. . . When I come across one, I load it up on my truck and bring it home.  . . . I get a storage container and start disassembling the machine.  I start filling the container with the screws, washers, bolts, retaining clips, hose clamps, springs, etc. used in the machine as well as the wiring harness.  Many times this hardware comes in handy when a need arises.</p>
<p>Also, I save the small clear plastic tubing (there are so many uses for this quarter inch or so tubing), the steel drive shaft, and the spent motor.  The drive shaft and spent motor I usually take to the scrap yard once I accumulate enough to take down there.  Also, the gear at the end of the drive shaft is encased in a gear box partially filled with oil (not much, perhaps a pint or so).  I open the gear box and drain this oil into an oil can.  I use this oil on metal parts when they need to be oiled.  When I accumulate too much oil, I take it to Discount Auto for recycling.  </p>
<p>I use the &#8220;skin&#8221; (top and all four sides) of the washer as a good source of sheet metal for auto body repairs and for replacing fatigued metal on things such as my lawn mower, chipper / shredder, and rusted out metal doors (to name a few). . . .</p>
<p>I use one washing machine tub for a small burn barrel (lots of air holes to facilitate a good hot fire), and other tubs are used as planting pots to grow various vegetables and herbs (good drainage and easy to move if relocation is necessary). . . .</p>
<p>I cut up and save the machine&#8217;s rubber tub liner for a source of gasket material when needed. . . .
</p></blockquote>
<p>I snipped out a lot more detail to make this easier to read.  Go get the September/October 2008 issue for the unabridged version.</p>
<p>This guy is my hero.  When civilization collapses, he will build a giant landwalker AT-AT from old Maytags and rule the earth.</p>
<p><a href="http://sharethis.com/item?publisher=4bc7005e-aa8c-421e-a726-24badd341a96&title=Now+THIS+is+recycling&url=http%3A%2F%2Fblog.tplus1.com%2Findex.php%2F2008%2F12%2F09%2Fnow-this-is-recycling%2F">ShareThis</a></p>
<p><a href="http://feeds.feedburner.com/~a/tplus1/wtPt?a=BwVgW4"><img src="http://feeds.feedburner.com/~a/tplus1/wtPt?i=BwVgW4" border="0"></img></a></p>]]></content:encoded>
			<wfw:commentRss>http://blog.tplus1.com/index.php/2008/12/09/now-this-is-recycling/feed/</wfw:commentRss>
		<feedburner:origLink>http://blog.tplus1.com/index.php/2008/12/09/now-this-is-recycling/</feedburner:origLink></item>
		<item>
		<title>Rewrite my ugly code</title>
		<link>http://feeds.feedburner.com/~r/tplus1/wtPt/~3/476968932/</link>
		<comments>http://blog.tplus1.com/index.php/2008/12/06/rewrite-my-ugly-code/#comments</comments>
		<pubDate>Sat, 06 Dec 2008 21:44:24 +0000</pubDate>
		<dc:creator>matt</dc:creator>
		
		<category><![CDATA[Programming]]></category>

		<category><![CDATA[Python]]></category>

		<guid isPermaLink="false">http://blog.tplus1.com/?p=262</guid>
		<description><![CDATA[I have a big gnarly function named get_start_and_stop_dates.  Please rewrite it into something that still passes all the doctests but isn&#8217;t so ugly.
If you save this in a file named matt_sucks.py, you can run all the doctests like this:

$ nosetests &#45;-with-doctest matt_sucks.py 
Doctest: matt_sucks.get_first_and_last_dom &#46;.. ok
Doctest: matt_sucks.get_start_and_stop_dates &#46;.. ok
Doctest: matt_sucks.stubborn_datetimeparser &#46;.. ok
&#160;
&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;&#45;-
Ran 3 tests [...]

<script type="text/javascript">
SHARETHIS.addEntry({
	title: "Rewrite my ugly code",
	url: "http://blog.tplus1.com/index.php/2008/12/06/rewrite-my-ugly-code/"
});
</script>
	]]></description>
			<content:encoded><![CDATA[<p>I have a big gnarly function named get_start_and_stop_dates.  Please rewrite it into something that still passes all the doctests but isn&#8217;t so ugly.</p>
<p>If you save this in a file named matt_sucks.py, you can run all the doctests like this:<br />
<code><br />
$ nosetests &#45;-with-doctest matt_sucks.py <br />
Doctest: matt_sucks.get_first_and_last_dom &#46;.. ok<br />
Doctest: matt_sucks.get_start_and_stop_dates &#46;.. ok<br />
Doctest: matt_sucks.stubborn_datetimeparser &#46;.. ok<br />
&nbsp;<br />
&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;&#45;-<br />
Ran 3 tests in 0.028s<br />
&nbsp;<br />
OK<br />
</code></p>
<p>Here&#8217;s the code:<br />
<code><br />
import simplejson<br />
from datetime import date, datetime, timedelta<br />
&nbsp;<br />
def get_start_and_stop_dates(d, s):<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&quot;&quot;&quot;<br />
&nbsp;&nbsp;&nbsp;&nbsp;Returns a tuple of datetime.date objects.<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;First checks dictionary d, then looks in the cookie s, then returns<br />
&nbsp;&nbsp;&nbsp;&nbsp;the results of get_first_and_last_dom().<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;We return values from the dictionary d, even if the values exist in<br />
&nbsp;&nbsp;&nbsp;&nbsp;simple_cookie s:<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&gt;&gt;&gt; d = {&#039;start_date&#039;:&#039;12-07-2008&#039;, &#039;stop_date&#039;:&#039;12-20-2008&#039;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;&gt;&gt;&gt; import Cookie, simplejson<br />
&nbsp;&nbsp;&nbsp;&nbsp;&gt;&gt;&gt; s = Cookie.SimpleCookie()<br />
&nbsp;&nbsp;&nbsp;&nbsp;&gt;&gt;&gt; s[&#039;start_date&#039;] = simplejson.dumps(&#039;12-08-2008&#039;)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&gt;&gt;&gt; s[&#039;stop_date&#039;] = simplejson.dumps(&#039;12-11-2008&#039;)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&gt;&gt;&gt; a, b = get_start_and_stop_dates(d, s)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&gt;&gt;&gt; from datetime import date<br />
&nbsp;&nbsp;&nbsp;&nbsp;&gt;&gt;&gt; isinstance(a, date) and isinstance(b, date)<br />
&nbsp;&nbsp;&nbsp;&nbsp;True<br />
&nbsp;&nbsp;&nbsp;&nbsp;&gt;&gt;&gt; a.strftime(&#039;%m-%d-%Y&#039;), b.strftime(&#039;%m-%d-%Y&#039;)<br />
&nbsp;&nbsp;&nbsp;&nbsp;(&#039;12-07-2008&#039;, &#039;12-20-2008&#039;)<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;If the dictionary d doesn&#039;t have values, then we get them from the<br />
&nbsp;&nbsp;&nbsp;&nbsp;simple_cookie object s:<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&gt;&gt;&gt; a, b = get_start_and_stop_dates({}, s)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&gt;&gt;&gt; from datetime import date<br />
&nbsp;&nbsp;&nbsp;&nbsp;&gt;&gt;&gt; isinstance(a, date) and isinstance(b, date)<br />
&nbsp;&nbsp;&nbsp;&nbsp;True<br />
&nbsp;&nbsp;&nbsp;&nbsp;&gt;&gt;&gt; a.strftime(&#039;%m-%d-%Y&#039;), b.strftime(&#039;%m-%d-%Y&#039;)<br />
&nbsp;&nbsp;&nbsp;&nbsp;(&#039;12-08-2008&#039;, &#039;12-11-2008&#039;)<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;We handle mix-and-match scenarios, like where one value is in d and<br />
&nbsp;&nbsp;&nbsp;&nbsp;another is in s:<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&gt;&gt;&gt; s2 = Cookie.SimpleCookie()<br />
&nbsp;&nbsp;&nbsp;&nbsp;&gt;&gt;&gt; s2[&#039;stop_date&#039;] = simplejson.dumps(&#039;2-28-1975&#039;)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&gt;&gt;&gt; get_start_and_stop_dates({&#039;start_date&#039;:&#039;2-17-1975&#039;}, s2)<br />
&nbsp;&nbsp;&nbsp;&nbsp;(datetime.date(1975, 2, 17), datetime.date(1975, 2, 28))<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;When just one of the dates is specified, then the other will be<br />
&nbsp;&nbsp;&nbsp;&nbsp;the first/last day of the month containing the other date:<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&gt;&gt;&gt; get_start_and_stop_dates({&#039;start_date&#039;:&#039;2-17-1975&#039;},<br />
&nbsp;&nbsp;&nbsp;&nbsp;&#46;..&nbsp;&nbsp;&nbsp;&nbsp; Cookie.SimpleCookie())<br />
&nbsp;&nbsp;&nbsp;&nbsp;(datetime.date(1975, 2, 17), datetime.date(1975, 2, 28))<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&gt;&gt;&gt; get_start_and_stop_dates({&#039;stop_date&#039;:&#039;2-17-1975&#039;},<br />
&nbsp;&nbsp;&nbsp;&nbsp;&#46;..&nbsp;&nbsp;&nbsp;&nbsp; Cookie.SimpleCookie())<br />
&nbsp;&nbsp;&nbsp;&nbsp;(datetime.date(1975, 2, 1), datetime.date(1975, 2, 17))<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;Finally, we call get_first_and_last_dom when all else fails:<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&gt;&gt;&gt; get_first_and_last_dom() == get_start_and_stop_dates({}, <br />
&nbsp;&nbsp;&nbsp;&nbsp;&#46;..&nbsp;&nbsp;&nbsp;&nbsp; Cookie.SimpleCookie())<br />
&nbsp;&nbsp;&nbsp;&nbsp;True<br />
&nbsp;&nbsp;&nbsp;&nbsp;&quot;&quot;&quot;<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;# I&#039;ve revised this several times, but this is still pretty ugly.<br />
&nbsp;&nbsp;&nbsp;&nbsp;# It probably can be divided into more functions.<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;# These are the last-resort values, holding the first and last days<br />
&nbsp;&nbsp;&nbsp;&nbsp;# of the current month.<br />
&nbsp;&nbsp;&nbsp;&nbsp;first, last = get_first_and_last_dom()<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;# These are the dateformats that the dates will be in.<br />
&nbsp;&nbsp;&nbsp;&nbsp;dateformats = [&#039;%m-%d-%Y&#039;, &#039;%Y-%m-%d&#039;, &#039;%Y-%m-%d %H:%M:%S&#039;]<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;start_date = stop_date = None<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;# Figure out the start_date first.<br />
&nbsp;&nbsp;&nbsp;&nbsp;if &#039;start_date&#039; in d and d[&#039;start_date&#039;]:<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;start_date = stubborn_datetimeparser(d[&#039;start_date&#039;],<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dateformats).date()<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;elif s.has_key(&#039;start_date&#039;) and s[&#039;start_date&#039;].value:<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;start_date = stubborn_datetimeparser(simplejson.loads(s[&#039;start_date&#039;].value),<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dateformats).date()<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;# Now repeat the process for stop_date.<br />
&nbsp;&nbsp;&nbsp;&nbsp;# TODO: pull this redundancy into a single function and call it<br />
&nbsp;&nbsp;&nbsp;&nbsp;# twice.<br />
&nbsp;&nbsp;&nbsp;&nbsp;if &#039;stop_date&#039; in d and d[&#039;stop_date&#039;]:<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stop_date = stubborn_datetimeparser(d[&#039;stop_date&#039;],<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dateformats).date()<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;elif s.has_key(&#039;stop_date&#039;) and s[&#039;stop_date&#039;].value:<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stop_date = stubborn_datetimeparser(simplejson.loads(s[&#039;stop_date&#039;].value),<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dateformats).date()<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;# Now figure out what to return.&nbsp;&nbsp;Remember, if we found one date,<br />
&nbsp;&nbsp;&nbsp;&nbsp;# but not the other, then we return the first/last date of that month,<br />
&nbsp;&nbsp;&nbsp;&nbsp;# not the current month.<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;if not start_date and not stop_date:<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return first, last<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;elif start_date and stop_date:<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return start_date, stop_date<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;elif start_date and not stop_date:<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a, b = get_first_and_last_dom(start_date)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return start_date, b<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;elif not start_date and stop_date:<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a, b = get_first_and_last_dom(stop_date)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return a, stop_date<br />
&nbsp;<br />
def get_first_and_last_dom(dt=&quot;today&quot;):<br />
&nbsp;&nbsp;&nbsp;&nbsp;&quot;&quot;&quot;<br />
&nbsp;&nbsp;&nbsp;&nbsp;Return a tuple of datetime.date objects with the first and last day of the<br />
&nbsp;&nbsp;&nbsp;&nbsp;month holding dt, which defaults to today.<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&gt;&gt;&gt; first, last = get_first_and_last_dom(datetime(2008, 12, 6))<br />
&nbsp;&nbsp;&nbsp;&nbsp;&gt;&gt;&gt; first == datetime(2008, 12, 1).date()<br />
&nbsp;&nbsp;&nbsp;&nbsp;True<br />
&nbsp;&nbsp;&nbsp;&nbsp;&gt;&gt;&gt; last == datetime(2008, 12, 31).date()<br />
&nbsp;&nbsp;&nbsp;&nbsp;True<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&gt;&gt;&gt; first, last = get_first_and_last_dom(datetime(2008, 11, 30))<br />
&nbsp;&nbsp;&nbsp;&nbsp;&gt;&gt;&gt; first == datetime(2008, 11, 1).date()<br />
&nbsp;&nbsp;&nbsp;&nbsp;True<br />
&nbsp;&nbsp;&nbsp;&nbsp;&gt;&gt;&gt; last == datetime(2008, 11, 30).date()<br />
&nbsp;&nbsp;&nbsp;&nbsp;True<br />
&nbsp;&nbsp;&nbsp;&nbsp;&quot;&quot;&quot;<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;if dt == &quot;today&quot;:<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dt = datetime.now()<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;# We have to be a little careful figuring out the last date.<br />
&nbsp;&nbsp;&nbsp;&nbsp;if dt.month &lt; 12:<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;last_day = (datetime(dt.year, dt.month+1, 1) - timedelta(days=1)).date()<br />
&nbsp;&nbsp;&nbsp;&nbsp;else:<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;last_day = (datetime(dt.year+1, 1, 1) - timedelta(days=1)).date()<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;first_day = datetime(dt.year, dt.month, 1).date()<br />
&nbsp;&nbsp;&nbsp;&nbsp;return first_day, last_day<br />
&nbsp;<br />
def stubborn_datetimeparser(s, dateformats):<br />
&nbsp;&nbsp;&nbsp;&nbsp;&quot;&quot;&quot;<br />
&nbsp;&nbsp;&nbsp;&nbsp;Keep trying to parse s into a datetime object until we succeed or<br />
&nbsp;&nbsp;&nbsp;&nbsp;run out of dateformats.<br />
&nbsp;&nbsp;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;When the first format works, we immediately return:<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&gt;&gt;&gt; dateformats = [&#039;%Y-%m-%d&#039;, &#039;%m-%d-%Y&#039;, &#039;%m-%d-%Y %H:%M&#039;]<br />
&nbsp;&nbsp;&nbsp;&nbsp;&gt;&gt;&gt; stubborn_datetimeparser(&#039;12-1-2008&#039;, dateformats)<br />
&nbsp;&nbsp;&nbsp;&nbsp;datetime.datetime(2008, 12, 1, 0, 0)<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;Otherwise, we keep trying until we parse it:<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&gt;&gt;&gt; stubborn_datetimeparser(&#039;12-1-2008&#039;, dateformats)<br />
&nbsp;&nbsp;&nbsp;&nbsp;datetime.datetime(2008, 12, 1, 0, 0)<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&gt;&gt;&gt; stubborn_datetimeparser(&#039;12-1-2008 15:47&#039;, dateformats)<br />
&nbsp;&nbsp;&nbsp;&nbsp;datetime.datetime(2008, 12, 1, 15, 47)<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;or we run out of formats, and raise a ValueError:<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&gt;&gt;&gt; stubborn_datetimeparser(&#039;12/1/2008&#039;, dateformats)<br />
&nbsp;&nbsp;&nbsp;&nbsp;Traceback (most recent call last):<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#46;..<br />
&nbsp;&nbsp;&nbsp;&nbsp;ValueError: I couldn&#039;t parse &#039;12/1/2008&#039; with any of my formats!<br />
&nbsp;&nbsp;&nbsp;&nbsp;&quot;&quot;&quot;<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;for datefmt in dateformats:<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try:<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return datetime.strptime(s, datefmt)<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;except ValueError:<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pass<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;# This else matches the for datefmt in dateformats loop.&nbsp;&nbsp;It means<br />
&nbsp;&nbsp;&nbsp;&nbsp;# that we didn&#039;t break out of the loop early.<br />
&nbsp;&nbsp;&nbsp;&nbsp;else:<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;raise ValueError(&quot;I couldn&#039;t parse &#039;%s&#039; with any of my formats!&quot; % s)<br />
</code></p>
<p>Now get to work!</p>
<p><a href="http://sharethis.com/item?publisher=4bc7005e-aa8c-421e-a726-24badd341a96&title=Rewrite+my+ugly+code&url=http%3A%2F%2Fblog.tplus1.com%2Findex.php%2F2008%2F12%2F06%2Frewrite-my-ugly-code%2F">ShareThis</a></p>
<p><a href="http://feeds.feedburner.com/~a/tplus1/wtPt?a=TbMQEa"><img src="http://feeds.feedburner.com/~a/tplus1/wtPt?i=TbMQEa" border="0"></img></a></p>]]></content:encoded>
			<wfw:commentRss>http://blog.tplus1.com/index.php/2008/12/06/rewrite-my-ugly-code/feed/</wfw:commentRss>
		<feedburner:origLink>http://blog.tplus1.com/index.php/2008/12/06/rewrite-my-ugly-code/</feedburner:origLink></item>
		<item>
		<title>Define your validation schema inline</title>
		<link>http://feeds.feedburner.com/~r/tplus1/wtPt/~3/473750721/</link>
		<comments>http://blog.tplus1.com/index.php/2008/12/03/define-your-validation-schema-inline/#comments</comments>
		<pubDate>Wed, 03 Dec 2008 16:34:17 +0000</pubDate>
		<dc:creator>matt</dc:creator>
		
		<category><![CDATA[Programming]]></category>

		<category><![CDATA[Python]]></category>

		<category><![CDATA[TurboGears]]></category>

		<category><![CDATA[formencode]]></category>

		<guid isPermaLink="false">http://blog.tplus1.com/?p=261</guid>
		<description><![CDATA[The TurboGears docs show how to assign validators for individual parameters in the validate decorator like this:

@validate(validators={&#039;a&#039;:validators.Int(), &#039;b&#039;:validators.DateConverter()})
@error_handler()
def f(self, a, b, tg_errors=None):
&#160;&#160;&#160;&#160;# Now a is already an integer and b is already a datetime.date object, 
&#160;&#160;&#160;&#160;# unless there were some validation errors.

That&#8217;s great, but there are some validations that depend on numerous parameters at the [...]

<script type="text/javascript">
SHARETHIS.addEntry({
	title: "Define your validation schema inline",
	url: "http://blog.tplus1.com/index.php/2008/12/03/define-your-validation-schema-inline/"
});
</script>
	]]></description>
			<content:encoded><![CDATA[<p>The TurboGears docs show how to assign validators for individual parameters in the validate decorator like this:<br />
<code><br />
@validate(validators={&#039;a&#039;:validators.Int(), &#039;b&#039;:validators.DateConverter()})<br />
@error_handler()<br />
def f(self, a, b, tg_errors=None):<br />
&nbsp;&nbsp;&nbsp;&nbsp;# Now a is already an integer and b is already a datetime.date object, <br />
&nbsp;&nbsp;&nbsp;&nbsp;# unless there were some validation errors.<br />
</code><br />
That&#8217;s great, but there are some validations that depend on numerous parameters at the same time.  For example, you might want to make sure that an employee&#8217;s hire date precedes the termination date.</p>
<p>I already knew how to subclass validators.Schema to do this, and then pass that instance into the validate decorator like this:<br />
<code><br />
class MattSchema(validators.Schema):<br />
&nbsp;&nbsp;&nbsp;&nbsp;a = validators.Int()<br />
&nbsp;&nbsp;&nbsp;&nbsp;b = validators.DateConverter()<br />
&nbsp;&nbsp;&nbsp;&nbsp;chained_validators = [blah] # pretend that blah does some compound validation. <br />
&nbsp;<br />
@validate(validators=MattSchema())<br />
def f(self, a, b)<br />
</code><br />
This approach is fine, but today I discovered that it is also possible to define a Schema inline, inside the validate decorator, and specify the chained_validators right there, like this:<br />
<code><br />
@expose(&#039;.templates.shiftreports.overtime&#039;)<br />
@validate(validators=validators.Schema(<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a=validators.Int(),<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dt=validators.DateConverter(),<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;chained_validators=[blah]),<br />
&nbsp;&nbsp;&nbsp;&nbsp;state_factory=matt_state_factory)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />
def f(self, a, b):<br />
</code></p>
<p>What&#8217;s the point?  Well, it seems wasteful to define a class and hide it in another file if that schema is only going to be used for exactly one controller.  Also, this makes it really fast for me to mix and match comound validators with controllers.  I don&#8217;t need to pop open my separate validators file where all my elaborate schemas live. I can define them right here.</p>
<p>I&#8217;m very forgetful too, so I like to keep my code shallow so that I can instantly see what the heck something does.  With all the validators right there, I can easily figure out what the system intends to do.</p>
<p>However, I would define a Schema subclass as soon as I see that I need the same thing twice.</p>
<p>I&#8217;m happy that the FormEncode authors had the foresight to support this inline approach along with the declarative style.</p>
<p><a href="http://sharethis.com/item?publisher=4bc7005e-aa8c-421e-a726-24badd341a96&title=Define+your+validation+schema+inline&url=http%3A%2F%2Fblog.tplus1.com%2Findex.php%2F2008%2F12%2F03%2Fdefine-your-validation-schema-inline%2F">ShareThis</a></p>
<p><a href="http://feeds.feedburner.com/~a/tplus1/wtPt?a=dXSuR8"><img src="http://feeds.feedburner.com/~a/tplus1/wtPt?i=dXSuR8" border="0"></img></a></p>]]></content:encoded>
			<wfw:commentRss>http://blog.tplus1.com/index.php/2008/12/03/define-your-validation-schema-inline/feed/</wfw:commentRss>
		<feedburner:origLink>http://blog.tplus1.com/index.php/2008/12/03/define-your-validation-schema-inline/</feedburner:origLink></item>
		<item>
		<title>My decorators article is in top ten articles for the year on Linux Magazine</title>
		<link>http://feeds.feedburner.com/~r/tplus1/wtPt/~3/471405384/</link>
		<comments>http://blog.tplus1.com/index.php/2008/12/01/my-decorators-article-is-in-top-ten-articles-for-the-year-on-linux-magazine/#comments</comments>
		<pubDate>Mon, 01 Dec 2008 15:30:56 +0000</pubDate>
		<dc:creator>matt</dc:creator>
		
		<category><![CDATA[Programming]]></category>

		<category><![CDATA[Python]]></category>

		<category><![CDATA[self-aggrandizement]]></category>

		<guid isPermaLink="false">http://blog.tplus1.com/?p=260</guid>
		<description><![CDATA[woo hoo!


<script type="text/javascript">
SHARETHIS.addEntry({
	title: "My decorators article is in top ten articles for the year on Linux Magazine",
	url: "http://blog.tplus1.com/index.php/2008/12/01/my-decorators-article-is-in-top-ten-articles-for-the-year-on-linux-magazine/"
});
</script>
	]]></description>
			<content:encoded><![CDATA[<p><a href="http://www.linux-mag.com/id/7190">woo hoo!</a></p>
<p><a href="http://sharethis.com/item?publisher=4bc7005e-aa8c-421e-a726-24badd341a96&title=My+decorators+article+is+in+top+ten+articles+for+the+year+on+Linux+Magazine&url=http%3A%2F%2Fblog.tplus1.com%2Findex.php%2F2008%2F12%2F01%2Fmy-decorators-article-is-in-top-ten-articles-for-the-year-on-linux-magazine%2F">ShareThis</a></p>
<p><a href="http://feeds.feedburner.com/~a/tplus1/wtPt?a=iTAwrf"><img src="http://feeds.feedburner.com/~a/tplus1/wtPt?i=iTAwrf" border="0"></img></a></p>]]></content:encoded>
			<wfw:commentRss>http://blog.tplus1.com/index.php/2008/12/01/my-decorators-article-is-in-top-ten-articles-for-the-year-on-linux-magazine/feed/</wfw:commentRss>
		<feedburner:origLink>http://blog.tplus1.com/index.php/2008/12/01/my-decorators-article-is-in-top-ten-articles-for-the-year-on-linux-magazine/</feedburner:origLink></item>
		<item>
		<title>Using state with FormEncode and TG’s validate decorator</title>
		<link>http://feeds.feedburner.com/~r/tplus1/wtPt/~3/468678676/</link>
		<comments>http://blog.tplus1.com/index.php/2008/11/28/using-state-with-formencode-and-tgs-validate-decorator/#comments</comments>
		<pubDate>Fri, 28 Nov 2008 20:35:20 +0000</pubDate>
		<dc:creator>matt</dc:creator>
		
		<category><![CDATA[Programming]]></category>

		<category><![CDATA[Python]]></category>

		<category><![CDATA[TurboGears]]></category>

		<category><![CDATA[formencode]]></category>

		<guid isPermaLink="false">http://blog.tplus1.com/?p=259</guid>
		<description><![CDATA[I believe I figured out a way to reduce a few redundant lines from my controller methods.  I&#8217;m looking for opinions about whether this is a wise idea.
At the top of nearly every method in my controllers, I look up the current user and the hospital this user belongs to, sort of like this:

&#160;&#160;&#160;&#160;@expose(&#039;.templates.m1&#039;)
&#160;&#160;&#160;&#160;def [...]

<script type="text/javascript">
SHARETHIS.addEntry({
	title: "Using state with FormEncode and TG&#8217;s validate decorator",
	url: "http://blog.tplus1.com/index.php/2008/11/28/using-state-with-formencode-and-tgs-validate-decorator/"
});
</script>
	]]></description>
			<content:encoded><![CDATA[<p>I believe I figured out a way to reduce a few redundant lines from my controller methods.  I&#8217;m looking for opinions about whether this is a wise idea.</p>
<p>At the top of nearly every method in my controllers, I look up the current user and the hospital this user belongs to, sort of like this:<br />
<code><br />
&nbsp;&nbsp;&nbsp;&nbsp;@expose(&#039;.templates.m1&#039;)<br />
&nbsp;&nbsp;&nbsp;&nbsp;def m1(self): <br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;u = identity.current.user<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hospital = u.hospital<br />
</code><br />
Anyhow, I realized I can offload this irritating work to a validator that uses a state factory.  Now my method looks like this:<br />
<code><br />
&nbsp;&nbsp;&nbsp;&nbsp;@expose(&#039;.templates.m1&#039;)<br />
&nbsp;&nbsp;&nbsp;&nbsp;@validate(validators=LookupSchema(), state_factory=my_state_factory)<br />
&nbsp;&nbsp;&nbsp;&nbsp;def m1(self, u=None, hospital=None):<br />
</code><br />
So now all my methods get called with those values already set up.  I have to make u and hospital keyword parameters, because otherwise TG will try to pull their values out of the URL.</p>
<p>Here&#8217;s how it works.  First I make my_state_factory that builds an object that has those values:<br />
<code><br />
&nbsp;&nbsp;&nbsp;&nbsp;def my_state_factory():<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;class StateBlob(object):<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pass<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sb = StateBlob()<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sb.u = identity.current.user<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sb.hospital = u.hospital<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return sb<br />
</code><br />
Now the LookupSchema extracts those values out of the state blob object and adds them to the dictionary of values:<br />
<code><br />
&nbsp;&nbsp;&nbsp;&nbsp;from formencode.schema import Schema, SimpleFormValidator<br />
&nbsp;&nbsp;&nbsp;&nbsp;@SimpleFormValidator <br />
&nbsp;&nbsp;&nbsp;&nbsp;def f(value_dict, state, validator):<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value_dict[&#039;u&#039;] = state.u<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value_dict[&#039;hospital&#039;] = state.hospital<br />
&nbsp;<br />
class LookupSchema(Schema):<br />
&nbsp;&nbsp;&nbsp;&nbsp;allow_extra_fields = True # otherwise, it fusses about self ?!?!?<br />
&nbsp;&nbsp;&nbsp;&nbsp;chained_validators = [f]<br />
</code><br />
So the benefit of all this is that some repetitive code is now just defined in a single place.  Also, I&#8217;m getting more comfortable with the internals of FormEncode and the TG validate decorator.</p>
<p>Pretty soon, my controllers will be some really skinny methods.  All the calculations of new variables based on the original parameters will happen outside the controller.  The controller will just handle picking the right template.</p>
<p><a href="http://sharethis.com/item?publisher=4bc7005e-aa8c-421e-a726-24badd341a96&title=Using+state+with+FormEncode+and+TG%26%238217%3Bs+validate+decorator&url=http%3A%2F%2Fblog.tplus1.com%2Findex.php%2F2008%2F11%2F28%2Fusing-state-with-formencode-and-tgs-validate-decorator%2F">ShareThis</a></p>
<p><a href="http://feeds.feedburner.com/~a/tplus1/wtPt?a=RpdHBc"><img src="http://feeds.feedburner.com/~a/tplus1/wtPt?i=RpdHBc" border="0"></img></a></p>]]></content:encoded>
			<wfw:commentRss>http://blog.tplus1.com/index.php/2008/11/28/using-state-with-formencode-and-tgs-validate-decorator/feed/</wfw:commentRss>
		<feedburner:origLink>http://blog.tplus1.com/index.php/2008/11/28/using-state-with-formencode-and-tgs-validate-decorator/</feedburner:origLink></item>
		<item>
		<title>Use FormEncode to verify one date precedes another</title>
		<link>http://feeds.feedburner.com/~r/tplus1/wtPt/~3/465185794/</link>
		<comments>http://blog.tplus1.com/index.php/2008/11/25/use-formencode-to-verify-one-date-precedes-another/#comments</comments>
		<pubDate>Tue, 25 Nov 2008 16:20:38 +0000</pubDate>
		<dc:creator>matt</dc:creator>
		
		<category><![CDATA[Programming]]></category>

		<category><![CDATA[Python]]></category>

		<category><![CDATA[formencode]]></category>

		<category><![CDATA[web]]></category>

		<guid isPermaLink="false">http://blog.tplus1.com/?p=258</guid>
		<description><![CDATA[I have a form on my site that lets people choose a start date and a stop date.  Then I show statistics for that date range.  I wrote a FormEncode schema to verify that the start date is before the stop date.
The documentation on schema validators is fairly sparse, so I&#8217;m publishing this [...]

<script type="text/javascript">
SHARETHIS.addEntry({
	title: "Use FormEncode to verify one date precedes another",
	url: "http://blog.tplus1.com/index.php/2008/11/25/use-formencode-to-verify-one-date-precedes-another/"
});
</script>
	]]></description>
			<content:encoded><![CDATA[<p>I have a form on my site that lets people choose a start date and a stop date.  Then I show statistics for that date range.  I wrote a <a href="http://formencode.org">FormEncode</a> schema to verify that the start date is before the stop date.</p>
<p>The documentation on schema validators is fairly sparse, so I&#8217;m publishing this because it might help somebody else out.</p>
<h2>Code</h2>
<p><code><br />
# This is in a file named formencodefun.py<br />
from formencode import Schema<br />
from formencode.validators import DateConverter, FancyValidator, Invalid<br />
&nbsp;<br />
class DateCompare(FancyValidator):<br />
&nbsp;&nbsp;&nbsp;&nbsp;messages = dict(invalid=&quot;Start date must be before stop date&quot;)<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;def validate_python(self, field_dict, state):<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;start_date = field_dict[&#039;start_date&#039;]<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stop_date = field_dict[&#039;stop_date&#039;]<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if start_date &gt; stop_date:<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;msg = self.message(&#039;invalid&#039;, state)<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;raise Invalid(msg, field_dict, state,<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;error_dict=dict(stop_date=msg))<br />
&nbsp;<br />
class MySchema(Schema):<br />
&nbsp;&nbsp;&nbsp;&nbsp;start_date = DateConverter()<br />
&nbsp;&nbsp;&nbsp;&nbsp;stop_date = DateConverter()<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;chained_validators = [DateCompare()]<br />
</code></p>
<h2>Usage</h2>
<p><code><br />
&gt;&gt;&gt; from formencodefun import MySchema<br />
&gt;&gt;&gt; s = MySchema()<br />
&gt;&gt;&gt; d1 = {&#039;start_date&#039;:&#039;11-02-2008&#039;, &#039;stop_date&#039;:&#039;11-15-2008&#039;}<br />
&gt;&gt;&gt; d2 = {&#039;start_date&#039;:&#039;11-15-2008&#039;, &#039;stop_date&#039;:&#039;11-02-2008&#039;}<br />
&gt;&gt;&gt; s.to_python(d1)<br />
{&#039;stop_date&#039;: datetime.date(2008, 11, 15), &#039;start_date&#039;: datetime.date(2008, 11, 2)}<br />
&gt;&gt;&gt; s.to_python(d2)<br />
&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;-<br />
Traceback (most recent call last):<br />
&nbsp;&nbsp;File &quot;&lt;ipython console&gt;&quot;, line 1, in &lt;module&gt;<br />
&nbsp;&nbsp;File &quot;/home/matt/virtualenvs/scratch/lib/python2.5/site-packages/FormEncode-1.1-py2.5.egg/formencode/api.py&quot;, line 400, in to_python<br />
&nbsp;&nbsp;&nbsp;&nbsp;value = tp(value, state)<br />
&nbsp;&nbsp;File &quot;/home/matt/virtualenvs/scratch/lib/python2.5/site-packages/FormEncode-1.1-py2.5.egg/formencode/schema.py&quot;, line 200, in _to_python<br />
&nbsp;&nbsp;&nbsp;&nbsp;new = validator.to_python(new, state)<br />
&nbsp;&nbsp;File &quot;/home/matt/virtualenvs/scratch/lib/python2.5/site-packages/FormEncode-1.1-py2.5.egg/formencode/api.py&quot;, line 403, in to_python<br />
&nbsp;&nbsp;&nbsp;&nbsp;vp(value, state)<br />
&nbsp;&nbsp;File &quot;formencodefun.py&quot;, line 18, in validate_python<br />
&nbsp;&nbsp;&nbsp;&nbsp;error_dict=dict(stop_date=msg))<br />
Invalid: Start date must be before stop date<br />
</code></p>
<h2>How it works</h2>
<p>Notice when I run s.to_python(d1), I get a dictionary back with the the values for start_date and stop_date replaced with datetime.date objects.</p>
<p>Then when I run my schema on d2, where the start_date is after the stop_date, my schema raises an Invalid exception.  In a web framework like TurboGears, there is some exception handler that will catch that exception and take that error dictionary and redraw the form and print my error message.</p>
<p>Notice that the DateConverters first take my strings and turn them into datetime.date objects <b>before</b> the test in DateCompare.  FormEncode runs the chained validators after it runs the individual validators.</p>
<p>In this case, I just want to make sure that the start date precedes the stop date.  I have written other validators that add extra keys into the field dict or change the values, but I want to keep this example simple.</p>
<p>If the first DateConverters fail, then the chained validators never run:<br />
<code><br />
&gt;&gt;&gt; s.to_python({&#039;start_date&#039;:&#039;UNPARSEABLE&#039;, &#039;stop_date&#039;:&#039;11-20-2008&#039;})<br />
&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;-&#45;&#45;-<br />
Traceback (most recent call last):<br />
&nbsp;&nbsp;File &quot;&lt;ipython console&gt;&quot;, line 1, in &lt;module&gt;<br />
&nbsp;&nbsp;File &quot;/home/matt/virtualenvs/scratch/lib/python2.5/site-packages/FormEncode-1.1-py2.5.egg/formencode/api.py&quot;, line 400, in to_python<br />
&nbsp;&nbsp;&nbsp;&nbsp;value = tp(value, state)<br />
&nbsp;&nbsp;File &quot;/home/matt/virtualenvs/scratch/lib/python2.5/site-packages/FormEncode-1.1-py2.5.egg/formencode/schema.py&quot;, line 197, in _to_python<br />
&nbsp;&nbsp;&nbsp;&nbsp;error_dict=errors)<br />
Invalid: start_date: Please enter the date in the form mm/dd/yyyy<br />
</code></p>
<p>When my DateCompare validator is run, I can be confident that the objects with the keys start_date and stop_date in the field_dict have already been converted to datetime.date objects.</p>
<p>In summary, FormEncode is awesome, but I have spent a lot of time beating my head against the wall trying to learn how to use it.</p>
<p><a href="http://sharethis.com/item?publisher=4bc7005e-aa8c-421e-a726-24badd341a96&title=Use+FormEncode+to+verify+one+date+precedes+another&url=http%3A%2F%2Fblog.tplus1.com%2Findex.php%2F2008%2F11%2F25%2Fuse-formencode-to-verify-one-date-precedes-another%2F">ShareThis</a></p>
<p><a href="http://feeds.feedburner.com/~a/tplus1/wtPt?a=Y83fnK"><img src="http://feeds.feedburner.com/~a/tplus1/wtPt?i=Y83fnK" border="0"></img></a></p>]]></content:encoded>
			<wfw:commentRss>http://blog.tplus1.com/index.php/2008/11/25/use-formencode-to-verify-one-date-precedes-another/feed/</wfw:commentRss>
		<feedburner:origLink>http://blog.tplus1.com/index.php/2008/11/25/use-formencode-to-verify-one-date-precedes-another/</feedburner:origLink></item>
		<item>
		<title>My metaclass article published</title>
		<link>http://feeds.feedburner.com/~r/tplus1/wtPt/~3/464017197/</link>
		<comments>http://blog.tplus1.com/index.php/2008/11/24/my-metaclass-article-published/#comments</comments>
		<pubDate>Mon, 24 Nov 2008 16:08:59 +0000</pubDate>
		<dc:creator>matt</dc:creator>
		
		<category><![CDATA[Programming]]></category>

		<category><![CDATA[Python]]></category>

		<category><![CDATA[self-aggrandizement]]></category>

		<guid isPermaLink="false">http://blog.tplus1.com/?p=257</guid>
		<description><![CDATA[The November issue of Python Magazine has my article on metaclasses.  I regain the rights to my text after 3 months, so I&#8217;ll be posting sections of that article here as blog posts over the next year.
In the meantime, I&#8217;d love to hear critical feedback so that I can improve the material.
Or if you [...]

<script type="text/javascript">
SHARETHIS.addEntry({
	title: "My metaclass article published",
	url: "http://blog.tplus1.com/index.php/2008/11/24/my-metaclass-article-published/"
});
</script>
	]]></description>
			<content:encoded><![CDATA[<p>The November issue of <a href="http://pymag.phparch.com/">Python Magazine</a> has my article on metaclasses.  I regain the rights to my text after 3 months, so I&#8217;ll be posting sections of that article here as blog posts over the next year.</p>
<p>In the meantime, I&#8217;d love to hear critical feedback so that I can improve the material.</p>
<p>Or if you want to write a message telling me how awesome I am, that&#8217;s cool too, but I would prefer you give me money.  In fact, that applies to people that want to call me an idiot.  You also should just give me money.</p>
<p><a href="http://sharethis.com/item?publisher=4bc7005e-aa8c-421e-a726-24badd341a96&title=My+metaclass+article+published&url=http%3A%2F%2Fblog.tplus1.com%2Findex.php%2F2008%2F11%2F24%2Fmy-metaclass-article-published%2F">ShareThis</a></p>
<p><a href="http://feeds.feedburner.com/~a/tplus1/wtPt?a=AOwCNN"><img src="http://feeds.feedburner.com/~a/tplus1/wtPt?i=AOwCNN" border="0"></img></a></p>]]></content:encoded>
			<wfw:commentRss>http://blog.tplus1.com/index.php/2008/11/24/my-metaclass-article-published/feed/</wfw:commentRss>
		<feedburner:origLink>http://blog.tplus1.com/index.php/2008/11/24/my-metaclass-article-published/</feedburner:origLink></item>
		<item>
		<title>Mobile app idea</title>
		<link>http://feeds.feedburner.com/~r/tplus1/wtPt/~3/462153261/</link>
		<comments>http://blog.tplus1.com/index.php/2008/11/22/mobile-app-idea/#comments</comments>
		<pubDate>Sat, 22 Nov 2008 20:10:27 +0000</pubDate>
		<dc:creator>matt</dc:creator>
		
		<category><![CDATA[Networks]]></category>

		<category><![CDATA[Programming]]></category>

		<category><![CDATA[web]]></category>

		<guid isPermaLink="false">http://blog.tplus1.com/?p=256</guid>
		<description><![CDATA[Here&#8217;s the problem: when you meet somebody, you can exchange business cards, and maybe that business card has your facebook or linkedin url.
Then later, that person can send you an invite or a friend request based on how you gave them your URL.
It would be nicer to more quickly close this gap, so that at [...]

<script type="text/javascript">
SHARETHIS.addEntry({
	title: "Mobile app idea",
	url: "http://blog.tplus1.com/index.php/2008/11/22/mobile-app-idea/"
});
</script>
	]]></description>
			<content:encoded><![CDATA[<p>Here&#8217;s the problem: when you meet somebody, you can exchange business cards, and maybe that business card has your facebook or linkedin url.</p>
<p>Then later, that person can send you an invite or a friend request based on how you gave them your URL.</p>
<p>It would be nicer to more quickly close this gap, so that at the moment you meet somebody, you can instantly &#8220;friend&#8221; each other, sort of like this:</p>
<ol>
<li>I&#8217;m talking to somebody that asks me for my card.  I pull out my mobile phone and so do they.  I tell them my phone number, and they text a message to some other third party service with the message payload being my phone number.</li>
<li>Then the other person tells me their phone number and I send a text message to that same third party service with the other guy&#8217;s phone number.</li>
<li>The third-party system links the accounts associated with the two phone numbers as &#8220;friends&#8221;.</li>
<li>Later when I check my account on the third-party service, I see all the contact info for the person I met.</li>
</ol>
<p>This ain&#8217;t rocket science.  Just a faster way to share contact information.  Does this already exist?</p>
<p>Instead of using SMS, the system could also use HTTP posts, but not every phone has internet access.  In addition to just using my phone number, maybe me and the other person could both agree to send in a short password, which must match before the system links the two accounts.</p>
<p><a href="http://sharethis.com/item?publisher=4bc7005e-aa8c-421e-a726-24badd341a96&title=Mobile+app+idea&url=http%3A%2F%2Fblog.tplus1.com%2Findex.php%2F2008%2F11%2F22%2Fmobile-app-idea%2F">ShareThis</a></p>
<p><a href="http://feeds.feedburner.com/~a/tplus1/wtPt?a=DePUMI"><img src="http://feeds.feedburner.com/~a/tplus1/wtPt?i=DePUMI" border="0"></img></a></p>]]></content:encoded>
			<wfw:commentRss>http://blog.tplus1.com/index.php/2008/11/22/mobile-app-idea/feed/</wfw:commentRss>
		<feedburner:origLink>http://blog.tplus1.com/index.php/2008/11/22/mobile-app-idea/</feedburner:origLink></item>
		<item>
		<title>New gmail themes are just enough to hook me again</title>
		<link>http://feeds.feedburner.com/~r/tplus1/wtPt/~3/459036752/</link>
		<comments>http://blog.tplus1.com/index.php/2008/11/19/new-gmail-themes-are-just-enough-to-hook-me-again/#comments</comments>
		<pubDate>Thu, 20 Nov 2008 01:35:19 +0000</pubDate>
		<dc:creator>matt</dc:creator>
		
		<category><![CDATA[Google]]></category>

		<category><![CDATA[web]]></category>

		<guid isPermaLink="false">http://blog.tplus1.com/?p=254</guid>
		<description><![CDATA[I&#8217;ve been thinking a lot lately about disconnecting from google.  Then they release gmail themes today.

I guess I&#8217;ll give them a few more months of my soul.
But seriously, if I knew how to search with mutt like I can search with gmail, gmail would get the boot.


<script type="text/javascript">
SHARETHIS.addEntry({
	title: "New gmail themes are just enough to hook me again",
	url: "http://blog.tplus1.com/index.php/2008/11/19/new-gmail-themes-are-just-enough-to-hook-me-again/"
});
</script>
	]]></description>
			<content:encoded><![CDATA[<p>I&#8217;ve been thinking a lot lately about disconnecting from google.  Then they release gmail themes today.</p>
<p><a href='http://blog.tplus1.com/index.php/2008/11/19/new-gmail-themes-are-just-enough-to-hook-me-again/gmail-terminal/' rel="attachment wp-att-255"><img src="http://blog.tplus1.com/wp-content/uploads/2008/11/gmail-terminal.png" alt="gmail with terminal theme" title="gmail-terminal" width="499" height="375" class="alignnone size-full wp-image-255" /></a></p>
<p>I guess I&#8217;ll give them a few more months of my soul.</p>
<p>But seriously, if I knew how to search with mutt like I can search with gmail, gmail would get the boot.</p>
<p><a href="http://sharethis.com/item?publisher=4bc7005e-aa8c-421e-a726-24badd341a96&title=New+gmail+themes+are+just+enough+to+hook+me+again&url=http%3A%2F%2Fblog.tplus1.com%2Findex.php%2F2008%2F11%2F19%2Fnew-gmail-themes-are-just-enough-to-hook-me-again%2F">ShareThis</a></p>
<p><a href="http://feeds.feedburner.com/~a/tplus1/wtPt?a=4qrEhn"><img src="http://feeds.feedburner.com/~a/tplus1/wtPt?i=4qrEhn" border="0"></img></a></p>]]></content:encoded>
			<wfw:commentRss>http://blog.tplus1.com/index.php/2008/11/19/new-gmail-themes-are-just-enough-to-hook-me-again/feed/</wfw:commentRss>
		<feedburner:origLink>http://blog.tplus1.com/index.php/2008/11/19/new-gmail-themes-are-just-enough-to-hook-me-again/</feedburner:origLink></item>
		<item>
		<title>Got back from PyWorks</title>
		<link>http://feeds.feedburner.com/~r/tplus1/wtPt/~3/455314909/</link>
		<comments>http://blog.tplus1.com/index.php/2008/11/16/got-back-from-pyworks/#comments</comments>
		<pubDate>Sun, 16 Nov 2008 22:20:53 +0000</pubDate>
		<dc:creator>matt</dc:creator>
		
		<category><![CDATA[Programming]]></category>

		<category><![CDATA[Python]]></category>

		<guid isPermaLink="false">http://blog.tplus1.com/?p=253</guid>
		<description><![CDATA[PyWorks was a lot of fun.
Mark Ramm did a talk about WSGI where in one slide he showed how to build up something akin to the full Pylons stack by just applying lots of WSGI middlewares.  That really inspired me.  Sure, frameworks are great, but I think I&#8217;m going to try to going [...]

<script type="text/javascript">
SHARETHIS.addEntry({
	title: "Got back from PyWorks",
	url: "http://blog.tplus1.com/index.php/2008/11/16/got-back-from-pyworks/"
});
</script>
	]]></description>
			<content:encoded><![CDATA[<p><a href="http://pyworks.mtacon.com">PyWorks</a> was a lot of fun.</p>
<p><a href="http://compoundthinking.com">Mark Ramm</a> did a talk about WSGI where in one slide he showed how to build up something akin to the full Pylons stack by just applying lots of WSGI middlewares.  That really inspired me.  Sure, frameworks are great, but I think I&#8217;m going to try to going to the opposite extreme for a while &#8212; building up from components, rather than using somebody else&#8217;s aggregation of components.</p>
<p>Based on a few hallway conversations, It turns out I&#8217;m not the only one using version control as a way to deploy code in production.  My production box runs a git clone of my production branch.</p>
<p><a href="http://jonebird.com/">jonEbird</a> did a talk on using LDAP with Python.  It was the first time I had realized that LDAP can do more than user authentication.</p>
<p>I liked <a href="http://maintainablesoftware.com/">Mike Naberezny&#8217;s</a> talk on routes also.  Good introduction.  It reaffirmed my idea that it&#8217;s not going to be all that difficult to string a bunch of stuff together for my next web app.</p>
<p><a href="http://www.percious.com/blog/">Chris Perkins</a> showed some neat TDD / agile programming techniques possible and made SQLAlchemy seem much friendlier than when I looked at it last year.</p>
<p><a href="http://sharethis.com/item?publisher=4bc7005e-aa8c-421e-a726-24badd341a96&title=Got+back+from+PyWorks&url=http%3A%2F%2Fblog.tplus1.com%2Findex.php%2F2008%2F11%2F16%2Fgot-back-from-pyworks%2F">ShareThis</a></p>
<p><a href="http://feeds.feedburner.com/~a/tplus1/wtPt?a=3zuN33"><img src="http://feeds.feedburner.com/~a/tplus1/wtPt?i=3zuN33" border="0"></img></a></p>]]></content:encoded>
			<wfw:commentRss>http://blog.tplus1.com/index.php/2008/11/16/got-back-from-pyworks/feed/</wfw:commentRss>
		<feedburner:origLink>http://blog.tplus1.com/index.php/2008/11/16/got-back-from-pyworks/</feedburner:origLink></item>
	</channel>
</rss><!-- Dynamic Page Served (once) in 0.470 seconds --><!-- Cached page served by WP-Cache -->
