<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	>

<channel>
	<title>Меня зовут — Анатолий Ларин</title>
	<atom:link href="http://larin.in/feed" rel="self" type="application/rss+xml" />
	<link>http://larin.in</link>
	<description>Блог о разработке и разработчике</description>
	<pubDate>Fri, 12 Sep 2008 06:38:30 +0000</pubDate>
	<generator>http://wordpress.org/?v=2.6.1</generator>
	<language>en</language>
			<item>
		<title>Памятка по ffmpeg</title>
		<link>http://larin.in/archives/55</link>
		<comments>http://larin.in/archives/55#comments</comments>
		<pubDate>Fri, 12 Sep 2008 06:38:30 +0000</pubDate>
		<dc:creator>Larin</dc:creator>
		
		<category><![CDATA[Linux]]></category>

		<category><![CDATA[ffmpeg]]></category>

		<guid isPermaLink="false">http://larin.in/?p=55</guid>
		<description><![CDATA[Интро
Этот пост, так сказать, запись в &#8220;склерозник&#8221;, но думаю будет полезна и читателям блога.
Конвертация AVI в FLV
ffmpeg -i video.avi -ar 22050 -ab 32 -f flv -s 320&#215;240 video.flv
Создание &#8220;превьюшки&#8221;
ffmpeg -i movie.flv -vcodec mjpeg -vframes 1 -an -f rawvideo -s 320&#215;240 movie.jpg
З. Ы.
Кстати, готов принимать поздравления - сегодня моему блогу ровно год )))
]]></description>
			<content:encoded><![CDATA[<h2>Интро</h2>
<p>Этот пост, так сказать, запись в &#8220;склерозник&#8221;, но думаю будет полезна и читателям блога.</p>
<h2>Конвертация AVI в FLV</h2>
<p>ffmpeg -i video.avi -ar 22050 -ab 32 -f flv -s 320&#215;240 video.flv</p>
<h2>Создание &#8220;превьюшки&#8221;</h2>
<p>ffmpeg -i movie.flv -vcodec mjpeg -vframes 1 -an -f rawvideo -s 320&#215;240 movie.jpg</p>
<h2>З. Ы.</h2>
<p>Кстати, готов принимать поздравления - сегодня моему блогу ровно год )))</p>
]]></content:encoded>
			<wfw:commentRss>http://larin.in/archives/55/feed</wfw:commentRss>
		</item>
		<item>
		<title>AJAX-светофорчики</title>
		<link>http://larin.in/archives/53</link>
		<comments>http://larin.in/archives/53#comments</comments>
		<pubDate>Tue, 12 Aug 2008 18:21:09 +0000</pubDate>
		<dc:creator>Larin</dc:creator>
		
		<category><![CDATA[Проектирование]]></category>

		<category><![CDATA[ajax]]></category>

		<category><![CDATA[css]]></category>

		<category><![CDATA[html]]></category>

		<category><![CDATA[javascript]]></category>

		<category><![CDATA[jquery]]></category>

		<category><![CDATA[интерфейс]]></category>

		<guid isPermaLink="false">http://larin.in/archives/53</guid>
		<description><![CDATA[Интро
Вот появилась свободная минутка&#8230; В далеком 2007-ом году у меня была статья о &#8220;flash-сообщениях&#8221; - сообщения которые мы показываем пользователю после перезагрузки страницы. Очень удобная и нужная штука :)
Но эти сообщения не подходят для AJAX-обработчиков. Что же делать? Ведь AJAX-функций на наших сайтах становится все больше.
И вот сегодня, по служебной необходимости, мне понадобилось уведомлять пользователей [...]]]></description>
			<content:encoded><![CDATA[<h2>Интро</h2>
<p>Вот появилась свободная минутка&#8230; В далеком 2007-ом году у меня была <a href="http://larin.in/archives/35" title="“Светофорчики” или flash-сообщения" target="_blank">статья о &#8220;flash-сообщениях&#8221;</a> - сообщения которые мы показываем пользователю после перезагрузки страницы. Очень удобная и нужная штука :)</p>
<p>Но эти сообщения не подходят для AJAX-обработчиков. Что же делать? Ведь AJAX-функций на наших сайтах становится все больше.</p>
<p>И вот сегодня, по служебной необходимости, мне понадобилось уведомлять пользователей о результатах AJAX-функций.</p>
<p><span id="more-53"></span></p>
<h2>Пара строчек на JS + jQuery и готово!</h2>
<p>В отличии от предыдущей статьи, никаких диаграмм мы чертить не будем, здесь все гораздо проще. Нам просто нужно создать в теле документа контейнер, разместить его, например, в правом верхнем углу браузера и выводить в него блоки сообщений. Все просто. Начнем с конца - с оформления.</p>
<h2>CSS</h2>
<pre><code>
#ajax_alert {
	width:400px;
	position:fixed;
	top:0; right:0;
	z-index:7777;
}
* html #ajax_alert { /* IE fix */
	position:absolute;
	top:expression(eval(document.documentElement.scrollTop) + 'px');
}

#ajax_alert .item {
	display:none;
	padding:10px;
	color:#fff;
	font-size:1em;
	border:1px solid #fff;
}

#ajax_alert .item h2 {
	margin:0 0 0.5em 0;
	font-size:1.4em;
}

#ajax_alert .message {
	background:#80c875;
}

#ajax_alert .error {
	background:#ec977b;
}

#ajax_alert .notice {
	background:#0099FF;
}</code></pre>
<p>Вот такой простенький получился CSS. Елемент с id <strong>ajax_alert</strong> и есть наш контейнер. В него мы будем добавлять блоки сообщений с общим классом <strong>item</strong> и дополнительными классами: <strong>message, error, notice</strong>, в зависимости от типа сообщения. Различаться они будут только цветом блока. Само сообщения у нас будет состоять их 2 частей: заголовок и текст.</p>
<p>Теперь все, что нужно у нас есть, приступим к написанию JS&#8217;а.</p>
<h2>JavaScript, jQuery и все, все, все&#8230;</h2>
<p>Сразу приведу эти 2 строчки кода:</p>
<pre><code class="javascript">
var Alert = {
	show: function(title, text, class_name) {
		if (!$('#ajax_alert').attr('id')) {
			$('&lt;div id="ajax_alert"&gt;&lt;/div&gt;').appendTo(document.body);
		}
		$('&lt;div class="item ' + class_name + '"&gt;&lt;h2&gt;' + title + '&lt;/h2&gt;' + text + '&lt;/div&gt;')
			.prependTo($('#ajax_alert'))
			.fadeIn('slow')
			.animate({opacity: 1.0}, 3000)
			.fadeOut('slow', function() {$(this).remove();});
	}
}
</code></pre>
<p>Вот и все! Задача выполнена. Можно встраивать в проект и идти пить чай.</p>
<h2>HTML (пример использования)</h2>
<pre><code>
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=windows-1251" /&gt;
&lt;title&gt;Alert Ajax&lt;/title&gt;
&lt;link rel="stylesheet" type="text/css" media="all" href="main.css" /&gt;
&lt;script src="/js/jquery.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="/js/alert.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script type="text/javascript"&gt;
function request() {
	//Тут мы делаем обращение к серверу
	//возвращаем результат и в зависимости от него
	//выводим сообщение
	if (result) {
		Alert.show('Заголовок сообщения', 'Поздравляем! Что-то выполнилось', 'message');
	} else {
		Alert.show('Заголовок сообщения', 'При выполнении чего-то произошла ошибка', 'error')
	}
}
&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;a href="#" onclick="request(); return;"&gt;Кликни!&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h2>Рабочий пример</h2>
<p><a href="http://larin.in/ajaxalert/" target="_blank">Смотрим</a></p>
]]></content:encoded>
			<wfw:commentRss>http://larin.in/archives/53/feed</wfw:commentRss>
		</item>
		<item>
		<title>Яндекс снова радует =)</title>
		<link>http://larin.in/archives/51</link>
		<comments>http://larin.in/archives/51#comments</comments>
		<pubDate>Thu, 07 Aug 2008 19:20:52 +0000</pubDate>
		<dc:creator>Larin</dc:creator>
		
		<category><![CDATA[Разное]]></category>

		<category><![CDATA[Юмор]]></category>

		<category><![CDATA[баг]]></category>

		<category><![CDATA[интерфейс]]></category>

		<category><![CDATA[Яндекс]]></category>

		<guid isPermaLink="false">http://larin.in/archives/51</guid>
		<description><![CDATA[К сожалению, сейчас очень много работы и не хватает времени дописать и выложить некоторые запланированные статьи. Например, в очереди &#8220;в печать&#8221; статья о DataMapper&#8217;ах.
Итак, времени нет, но это я не мог пропустить. Сегодня вечером, примерно с половины одинадцатого, Яндекс вдруг перестал выдавать результыта поиска. Но и тут поисковик не растерялся. Все внимание на лого:

]]></description>
			<content:encoded><![CDATA[<p>К сожалению, сейчас очень много работы и не хватает времени дописать и выложить некоторые запланированные статьи. Например, в очереди &#8220;в печать&#8221; статья о DataMapper&#8217;ах.</p>
<p>Итак, времени нет, но это я не мог пропустить. Сегодня вечером, примерно с половины одинадцатого, Яндекс вдруг перестал выдавать результыта поиска. Но и тут поисковик не растерялся. Все внимание на лого:</p>
<p align="center"><img src="http://larin.in/wp-content/uploads/2008/08/2008-08-07_232156.gif" ilo-full-src="http://larin.in/wp-content/uploads/2008/08/2008-08-07_232156.gif" alt="Найдется все. Со временем )))" /></p>
]]></content:encoded>
			<wfw:commentRss>http://larin.in/archives/51/feed</wfw:commentRss>
		</item>
		<item>
		<title>Кука - кино про любовь</title>
		<link>http://larin.in/archives/50</link>
		<comments>http://larin.in/archives/50#comments</comments>
		<pubDate>Sat, 26 Apr 2008 20:16:10 +0000</pubDate>
		<dc:creator>Larin</dc:creator>
		
		<category><![CDATA[Личное]]></category>

		<category><![CDATA[Разное]]></category>

		<category><![CDATA[жизнь]]></category>

		<category><![CDATA[кино]]></category>

		<category><![CDATA[любовь]]></category>

		<category><![CDATA[печаль]]></category>

		<guid isPermaLink="false">http://larin.in/archives/50</guid>
		<description><![CDATA[Сейчас посмотрели великолепный фильм &#8220;Кука&#8220;. Наконец, наши режиссеры, а главное владельцы &#8220;массовых каналов&#8221;, таких как ОРТ, вспомнили, что в мире есть что-то кроме насилия, денег, наркотиков и катастроф.

Я думаю, этот фильм не оставит равнодушным никого. Этот фильм можно расценивать как лекарство, способное сделать людей лучше, пусть и не на долгий срок&#8230;

Последним подобным фильмом, для меня [...]]]></description>
			<content:encoded><![CDATA[<p>Сейчас посмотрели великолепный фильм &#8220;<a href="http://ilovecinema.ru/films/kuka/" title="Я хочу узнать о фильме" target="_blank">Кука</a>&#8220;. Наконец, наши режиссеры, а главное владельцы &#8220;массовых каналов&#8221;, таких как ОРТ, вспомнили, что в мире есть что-то кроме насилия, денег, наркотиков и катастроф.<br />
<span id="more-50"></span><br />
Я думаю, этот фильм не оставит равнодушным никого. Этот фильм можно расценивать как лекарство, способное сделать людей лучше, пусть и не на долгий срок&#8230;</p>
<p style="text-align: center"><img src="http://larin.in/wp-content/uploads/2008/04/174256_max.jpg" ilo-full-src="http://larin.in/wp-content/uploads/2008/04/174256_max.jpg" alt="Кука" /></p>
<p>Последним подобным фильмом, для меня был &#8220;<a href="http://ilovecinema.ru/films/papa/" title="Фильм - шедевр" target="_blank">Папа</a>&#8221; Владимира Машкова. Правда, последний гораздо глубже и тяжелее&#8230;</p>
<p>Если подобные фильмы будут попадать на экраны к массовому зрителю, то люди рискуют стать умными и добрыми&#8230; и даже смогут гордо говорить, что они - Люди.</p>
]]></content:encoded>
			<wfw:commentRss>http://larin.in/archives/50/feed</wfw:commentRss>
		</item>
		<item>
		<title>Sphinx - настоящее быстрого поиска</title>
		<link>http://larin.in/archives/47</link>
		<comments>http://larin.in/archives/47#comments</comments>
		<pubDate>Wed, 09 Apr 2008 18:59:06 +0000</pubDate>
		<dc:creator>Larin</dc:creator>
		
		<category><![CDATA[Linux]]></category>

		<category><![CDATA[Php]]></category>

		<category><![CDATA[sphinx]]></category>

		<category><![CDATA[индексация]]></category>

		<category><![CDATA[морфология]]></category>

		<category><![CDATA[поиск]]></category>

		<category><![CDATA[поисковик]]></category>

		<category><![CDATA[программирование]]></category>

		<guid isPermaLink="false">http://larin.in/archives/47</guid>
		<description><![CDATA[Интро
В наше время трудно представить хороший сайт без функции поиска. При чем не просто поиска, а с поддержкой морфологии. В большинстве случаев хватит поддержки русского и английского языка.
И вот при разработке очередного проекта стала проблема поиска. Таблицы в базе не маленькие (от 100 000 записей), да плюс искать еще нужно сразу по нескольким, так что [...]]]></description>
			<content:encoded><![CDATA[<h2>Интро</h2>
<p>В наше время трудно представить хороший сайт без функции поиска. При чем не просто поиска, а с поддержкой морфологии. В большинстве случаев хватит поддержки русского и английского языка.</p>
<p>И вот при разработке очередного проекта стала проблема поиска. Таблицы в базе не маленькие (от 100 000 записей), да плюс искать еще нужно сразу по нескольким, так что вариант с обычным  <em>LIKE &#8216;%запрос%&#8217; </em>отпал сам собой.</p>
<p>Ранее я пользовался поисковым движком <a href="http://mnogosearch.org/" title="mnogosearch.org" target="_blank">mnoGoSearch</a>, но вспомнив корявость его API (<em>иногда скаладывалось впечатление, что его писали индусы с 5-ю классами приходской школы</em>) отбросил и этот вариант.</p>
<p>В итоге, осталось 2 варианта:</p>
<ol>
<li>написать поиск по основе построения своих индексов и хранить эти индексы, например, в BerkleyDB;</li>
<li>не изобретать велосипед и воспользоваться одним из самых быстрых поисковых движков - <a href="http://sphinxsearch.com" title="Spninx - самый быстрый поиск :)" target="_blank">Sphinx</a>.</li>
</ol>
<p>Я выбрал второй вариант :)<br />
<span id="more-47"></span></p>
<p>К слову, Sphinx - это проект нашего соотечественника Андрея Аксенова. Стоит заметить, что у Андрея хватает сил и времени не только постоянно улучшать проект, но и активно учавствовать в поддержке пользователей, опреативно отвечая на вопросы на <a href="http://sphinxsearch.com/forum/forum.html?id=1" title="Common forum" target="_blank">англоязычном</a> и <a href="http://sphinxsearch.com/forum/forum.html?id=2" title="Russian forum" target="_blank">русскоязычном форуме</a>. За что ему <strong>огромное спасибо</strong>!</p>
<h2>Установка</h2>
<p>И так, приступим к практике.  Установка стандартна и не вызывает никаких проблем.</p>
<p>Скачиваем архив с исходниками (<a href="http://sphinxsearch.com/downloads/sphinx-0.9.8-rc2.tar.gz" title="Download sphinx src" target="_blank">последняя версия</a> на момент написания статьи), распаковываем и устанавливаем:</p>
<p># ./configure<br />
# make<br />
# make install (под root)</p>
<p>Под FreeBSD выполнив эти 3 команды я получил продукт готовый к работе. А вот в Debian пришлось еще минуту повозиться (правда, в первый раз это заняло полчаса :) и выполнить:</p>
<p># sudo aptitude install libmysql++-dev libmysqlclient15-dev checkinstall</p>
<p>после этого все прекрасно заработало.</p>
<h2>Подготовка</h2>
<p>Теперь все готово для создания индекса (<em>я предполагаю, что у вас есть некий проект с готовой БД</em>) . Наша база имеет следующую структуру:</p>
<p align="center"> <img src="http://larin.in/wp-content/uploads/2008/04/2008-04-09_115301.gif" ilo-full-src="http://larin.in/wp-content/uploads/2008/04/2008-04-09_115301.gif" alt="Структура БД" /></p>
<p>Будем искать по <em>названию</em> продукта, его <em>описанию</em> и <em>тегам</em>. Таким образом нам нужно создать индекс по этим полям. Для этого создадим 2 каталога <strong>/home/larin/data/</strong> - тут будем хранить файлы индекса и <strong>/home/larin/log/</strong> - тут логи и конфигурационный файл <strong>/home/larin/sphinx.conf</strong></p>
<p><strong>sphinx.conf</strong></p>
<pre><code>

source product
{
        type = mysql
        sql_host = localhost
        sql_user = test
        sql_pass = ******
        sql_db = product
        sql_port = 3306

        sql_query_pre = SET NAMES cp1251
        sql_query_pre = SET CHARACTER SET cp1251

        sql_query = SELECT p.product_id, p.producе_title, p.product_description, t.tag_name FROM `product` p LEFT JOIN `product_tag` pt ON pt.product_id = p.product_id LEFT JOIN `tag` t ON pt.tag_id = t.tag_id

        sql_query_info = SELECT * FROM `product` WHERE `product_id` = $id
        sql_ranged_throttle = 0
}

index product
{
        source = product
        path = /home/larin/data/product
        docinfo = extern
        mlock = 0
        morphology = stem_enru
        min_word_len = 2
        charset_type = sbcs
        charset_table = 0..9, A..Z-&gt;a..z, _, a..z, U+A8-&gt;U+B8, U+B8, U+C0..U+DF-&gt;U+E0..U+FF, U+E0..U+FF
        min_infix_len = 2
        enable_star = 1
}

indexer
{
        mem_limit = 32M
}

searchd
{
        address = 127.0.0.1
        port = 3312
        log = /home/larin/log/searchd.log
        query_log = /home/larin/log/query.log
        read_timeout = 5
        max_children = 30
        pid_file = /home/larin/log/searchd.pid
        max_matches = 1000

}
</code></pre>
<p>Вот и вся конфигурация, Sphinx готов начать индексировать ваши данные с гигантской скоростью :) Для более полной информации по конфигурированию зайдите на официальный сайт в раздел <a href="http://www.sphinxsearch.com/doc.html" title="Документация - читать обязательно!" target="_blank">документации</a>. Она на английском языке, но трудностей вызвать не должна, написана просто и доступно.</p>
<h2>Морфология</h2>
<p>Spninx поддерживает индексацию (а следовательно и поиск) с учетом морфологии русского и английского языка. Поддержка морфологии реализована при помощи стемминга.</p>
<p><span class="whole"><strong>Стемминг</strong> – это процесс ведущий к выделению основы слова из сложных словоформ.</span></p>
<p>Вот строки в конфиге отвечающие за конфигурацию:</p>
<pre><code>
#подключение русского и английского стемминга
morphology = stem_enru
#задание таблицы символов, данная настройка для Windows-1251
charset_type = sbcs
charset_table = 0..9, A..Z-&gt;a..z, _, a..z, U+A8-&gt;U+B8, U+B8, U+C0..U+DF-&gt;U+E0..U+FF, U+E0..U+FF

#<em>важно отметить, что в Sphinx прификсы считаются частью инфикса, т.е. указав индексацию по инфиксам мы автоматически индексируем и по префиксам</em>
min_infix_len = 2

#так должно быть :) Почему? Читайте документацию ;)
enable_star = 1
</code></pre>
<h2> Индексация</h2>
<p>Запускаем создание индекса:<br />
# indexer &#8211;config /home/larin/sphinx.conf &#8211;all</p>
<p>Все, индекс создан! Давайте искать!</p>
<h2>Поиск</h2>
<p>Для отладки и проверки работоспособности индекса подойдет утилита <em>search</em>. Пример использования:<br />
# search &#8211;config /home/larin/sphinx.conf искомая фраза</p>
<p>А вот для реальной работы, нужно запустить демон сфинкса - searchd:<br />
# searchd &#8211;config /home/larin/sphinx.conf</p>
<p>Все, демон успешно стартовал (кстати, не плохо было бы добавить его в автозагрузку :) , и теперь мы с ним можем работать из наших PHP-скриптов, через <a href="http://www.sphinxsearch.com/doc.html#api-reference" title="API" target="_blank">официальное API</a>. Необходимая библиотека <strong>sphinxapi.php </strong>находится внутри скачанного архива к каталоге <strong>api</strong>.</p>
<h2>Пример скрипта</h2>
<pre><code>&lt;?php
require ( "sphinxapi.php" );
//....

$string = @$_GET['string'];
$sphinx = new SphinxClient();
$sphinx-&gt;SetServer('localhost', 3312);

//Совпадение любого из слов
$sphinx-&gt;SetMatchMode(SPH_MATCH_ANY);

//Результаты отсортированы по релевантности
$sphinx-&gt;SetSortMode(SPH_SORT_RELEVANCE);

//Задаем полям веса, для подсчета релевантности
$w = array ('product_title' =&gt; 20, 'product_description' =&gt; 10, 'tag_name' =&gt; 5);
$sphinx-&gt;SetFieldWeights($w);

$result = $sphinx-&gt;Query($string, '*');
if ($result &amp;&amp; is_array($result['matches']))
{
 //Получаем массив ID найденых товаров
 $ids = array_keys($result['matches']);

//А теперь выводим эти товары отсортированные по релевантности
 $id_list = implode(',', $ids);
 $sql = sprintf('SELECT * FROM `product` WHERE `product_id` IN (%s) ORDER BY FIELD(`product_id`, %s)', $id_list, $id_list);

//Все далее выполняем этот запрос и наслаждаемся результатами
}
//....

?&gt;</code></pre>
<h2>Итого</h2>
<p>Вот и все. И мы в очередной раз (как и в случае с <a href="http://larin.in/archives/26" title="Введение в UML" target="_blank">UML</a> и <a href="http://larin.in/archives/23" title="Кеширование при помощи Memcache" target="_blank">кэшированием</a>) убедились, что все<a href="http://www.sphinxsearch.com" title=":)" target="_blank"> гениальное</a> просто :)</p>
]]></content:encoded>
			<wfw:commentRss>http://larin.in/archives/47/feed</wfw:commentRss>
		</item>
		<item>
		<title>Кошка-стриптизер!</title>
		<link>http://larin.in/archives/43</link>
		<comments>http://larin.in/archives/43#comments</comments>
		<pubDate>Mon, 31 Mar 2008 15:16:59 +0000</pubDate>
		<dc:creator>Larin</dc:creator>
		
		<category><![CDATA[Личное]]></category>

		<category><![CDATA[Юмор]]></category>

		<category><![CDATA[кошка]]></category>

		<category><![CDATA[танец]]></category>

		<guid isPermaLink="false">http://larin.in/archives/43</guid>
		<description><![CDATA[
Великолепный мувик от одного моего друга. Такого я еще не видел )))
В общем писать здесь нечего - надо смотреть и смотреть со звуком!!!
Наслаждайтесь )))
]]></description>
			<content:encoded><![CDATA[<p><object height="350" width="425"><param name="movie" value="http://www.youtube.com/v/EZT94KrLo9Y"></param><embed src="http://www.youtube.com/v/EZT94KrLo9Y" type="application/x-shockwave-flash" height="350" width="425"></embed></object></p>
<p>Великолепный мувик от одного моего друга. Такого я еще не видел )))<br />
В общем писать здесь нечего - надо смотреть и смотреть со звуком!!!<br />
Наслаждайтесь )))</p>
]]></content:encoded>
			<wfw:commentRss>http://larin.in/archives/43/feed</wfw:commentRss>
		</item>
		<item>
		<title>35 принципов объектно-ориентированного дизайна</title>
		<link>http://larin.in/archives/42</link>
		<comments>http://larin.in/archives/42#comments</comments>
		<pubDate>Thu, 13 Mar 2008 22:31:07 +0000</pubDate>
		<dc:creator>Larin</dc:creator>
		
		<category><![CDATA[Проектирование]]></category>

		<category><![CDATA[дизайн кода]]></category>

		<category><![CDATA[ООП]]></category>

		<guid isPermaLink="false">http://larin.in/archives/42</guid>
		<description><![CDATA[Я не люблю копировать чужие мысли, но эта статья будет копией =) Копией замечательного перевода отрывка из книги Брюса Эккеля «Thinking in Java.». Автор перевода Анатолий Тутов.
И так приступим:

Изящество всегда вознаграждается. Может показаться, что слишком долго искать действительно красивое решение проблемы, но когда вы сможете легко адапатировать его к новой ситуации, избежав долгих часов, дней, [...]]]></description>
			<content:encoded><![CDATA[<p>Я не люблю копировать чужие мысли, но эта статья будет копией =) Копией замечательного перевода отрывка из книги <a href="http://www.bruceeckel.com/">Брюса Эккеля</a> <strong>«Thinking in Java.»</strong>. Автор перевода <a href="http://www.asis.ru/users/Tutov">Анатолий Тутов</a>.</p>
<p>И так приступим:</p>
<ol>
<li><strong>Изящество всегда вознаграждается.</strong> Может показаться, что слишком долго искать действительно красивое решение проблемы, но когда вы сможете легко адапатировать его к новой ситуации, избежав долгих часов, дней, а то и месяцев борьбы с собственным кодом, вы будете вознаграждены(даже если со стороны это будет незаметно). Это позволит вам создать программу, которую легко не только скомпилировать и отладить, но и понимать и изменять, что, собственно, и составляет коммерческую ценность. Понимание этого пункта требует некоторого опыта, поскольку, пока вы делаете фрагмент кода элегантным, кажется, что вы мало продуктивны. Не поддавайтесь спешке и суете, они только замедлят вашу работу.</li>
<li><strong>Сначала заставь работать, потом ускоряй.</strong><br />
Это верно, даже если вы уверены, что фрагмент кода действительно важен и будет основным узким местом в вашей системе. Не торопитесь. Сперва заставьте систему работать с настолько простым решением задачи, насколько это возможно. Уже потом, если решение оказалось не достаточно быстрым, профилируйте его. Почти всегда вы обнаружите, что ваше мнимое узкое место не проблема. Потратьте время на более важные вещи.</li>
<p><span id="more-42"></span></p>
<li><strong>Помните принцип «Разделяй и властвуй».</strong><br />
Если проблема, которой вы занимаетесь, слишком сложна, попробуйте вообразить, как должна работать программа, если некий черный ящик скроет все сложности. Этот черный ящик — объект. Напишите сначала код, который использует объект, а потом рассмотрите проблемый объект еще раз и инкапсулируйте его сложности в другие объекты.</li>
<li><strong>Отделите создателя класса, от его пользователя(программиста-клиента).</strong><br />
Пользователь класса — это своего рода «покупатель», и ему не интересно, что происходит внутри класса. Создатель класса должен быть экспертом в своем деле и создавать код так, чтобы даже использование его начинающим программистом, было работоспособным и эффективным. Библиотеку использовать легко, только если способ ее использования прозрачен.<!--cut--></li>
<li><strong>Когда создаете класс, постарайтесь использовать такие имена, чтобы комментарии не понадобились.</strong><br />
Ваша цель сделать программный интерфейс модуля концептуально простым. Для этого используйте, по возможности, перегрузку методов.</li>
<li><strong>Анализ и дизайн должны определить, как минимум, классы вашей системы, их открытые интерфейсы и их отношения с другими классами, в особенности — базовыми.</strong><br />
Если ваш способ разработки производит более того, спросите себя, все ли произведенное имеет значение на протяжении жизненного цикла программы. Если нет, поддержка лишнего влетит вам в копеечку. Участники групп разработки стараются не поддерживать ничего, что не способствует их продуктивности. Фактически, многие методологии разработки этого не учитывают.</li>
<li><strong>Автоматизируйте все.</strong><br />
Пишите тестовый код первым(до написания самого класса) и храните его вместе с классом. Автоматизируйте прогон тестов вместе со сборкой. Возможно, вы выберете для этого Ant — стандарт дефакто для сборки Java программ. Таким образом, все изменения будут автоматически проверены прогоном тестового кода и вы немедленно обнаружите ошибки. Благодаря сети безопасности вашей тестовой оболочки, вы будете более уверенно вносить изменения, когда обнаружится такая необходимость. Помните, что величайшие улучшения в языках произошли именно из встроенных тестов, предоставляемых контролем типов, системой исключений и пр., но только до сих пор. Остальной путь вы должны проделать сами, создавая надежную систему исполняющую тесты, которые проверят основные специфические свойства вашего класса или программы.</li>
<li><strong>Пишите тестовый код первым(прежде чем написать класс) для того, чтобы проверить, что разработка класса завершена.</strong><br />
Если вы не способны написать тестовый код, вы не знаете, на что похож ваш класс. Вдобавок, написание тестового кода часто позволяет выявить все дополнительные свойства и ограничения, которые вы могли бы заложить в класс. Эти свойства и ограничения не всегда появляются на стадии анализа и разработки. Кроме того, тесты представляют собой пример кода, показывающий, как следует использовать ваш класс.</li>
<li><strong>Все проблемы разработки ПО могут быть упрощены добавлением дополнительного уровня концептуального обобщения.</strong><br />
Это фундаментальное правило разработки ПО является основой абстракции, наиважнейшей особенности объектно-ориентированного программирования.</li>
<li><strong>Обобщение должно иметь значение.</strong><br />
Это значение может быть столь простым как «совмещение часто используемого кода в одном методе». Если вы добавляете уровни обобщения (абстракции, инкапсуляции и пр.), которые не имеют значения, это столь же плохо, как не иметь их вообще.</li>
<li><strong>Делайте классы настолько атомарными, насколько это возможно.</strong><br />
Давайте каждому классу единственное, четкое предназначение. Если ваши классы или вся система становятся слишком сложными, разбейте сложные классы на более простые. Самый простой индикатор — размер, если класс слишком большой, есть вероятность, что он делает слишком много и должен быть декомпозирован. Ключом к переработке класса может быть:</p>
<ul>
<li> Сложный switch(оператор выбора): попробуйте использовать полиморфизм.</li>
<li> Большое количество методов, охватывающих очень разные типы операций: следует использовать несколько классов.</li>
<li> Большое количество переменных-членов класса, которые определяют очень разные параметры: следует использовать несколько классов.</li>
</ul>
</li>
<li><strong>Следите за длинными списками параметров.</strong><br />
Вызов метода становится труднее читать, записывать и поддерживать при росте списка параметров. Вместо этого, попробуйте разместить метод в соответствующем классе и/или передавать параметры в виде объектов.</li>
<li><strong>Не повторяйтесь.</strong><br />
Если фрагмент кода повторяется во многих методах производных классов, поместите этот код в один метод базового класса и вызывайте этот метод из методов производных классов.</li>
<li><strong>Следите за операторами switch или цепочками ветвлений if-else.</strong> Это типичный индикатор проверки типа — вы пытаетесь выбрать, какой код исполнять в зависимости от того, каков тип данных (в точности тип может быть и неизвестен поначалу). Обычно подобный код можно заменить наследованием и полиморфизмом. Полиморфный метод производит проверку типа вместо вас и обладает лучшей расширяемостью.</li>
<li><strong>С точки зрения дизайна, осмотрите и отделите вещи, которые меняются, от вещей, которые остаются неизменными.</strong><br />
То есть отыщите элементы системы, которые вы можете захотеть изменить без редизайна, затем инкапсулируйте такие элементы в классах. Сведения о шаблонах проектирования, вы можете почерпнуть в книге «Thinking in Patterns with Java», доступной для скачивания на <a href="http://www.bruceeckel.com/">сайте автора</a></li>
<li><strong>Не расширяйте базовую функциональность с помощью подклассов.</strong><br />
Если элемент интерфейса важен для класса, он должен находиться в базовом классе, а не добавляться при наследовании. Если вы добавляете методы в производных классах, возможно, стоит переосмыслить весь дизайн.</li>
<li><strong>Меньшее — это большее.</strong><br />
Начните с минимального интерфейса класса, настолько маленького и простого, насколько вообще позволяет решение текущей задачи. Не пытайтесь предвидеть все способы, которыми ваш класс может быть использован. Напротив, используя класс, вы обнаружите, как еще стоит расширить интерфейс. Однако, если класс уже используется, невозможно расширить интерфейс без изменения клиентского кода. Если нужно добавить новые методы — клиентский код не изменится. Но если новые методы заменят функциональность старых, лучше оставить старый интерфейс (вы можете объединить функциональность в последующей реализации, если захотите). Если нужно расширить интерфейс существующего метода добавлением новых аргументов, создайте перегруженный метод с новыми аргументами. Такой способ никак не помешает существующим вызовам того метода.</li>
<li><strong>Прочтите ваши классы вслух, чтобы убедиться, что они логичны.</strong><br />
Отношение между производным и базовым классом произносите как «есть», а между классом и объектами-членами как «имеет, содержит».</li>
<li><strong>Когда выбираете между наследованием и композицией, спросите себя требуется ли приведение к базовому типу.</strong><br />
Если нет, выбирайте композицию(объекты-члены). Это устранит необходимость в существовании множества базовых типов. Если выберете наследование, пользователи будут думать, что предполагается приведение к базовому типу.</li>
<li><strong>Используйте члены класса для изменения значения и перекрытие методов для изменения поведения.</strong><br />
То есть, если вы нашли класс, который использует переменные состояния вместе с методами, которые изменяют поведение на основе значения этих переменных, возможно, следует переработать его, отразив различия в поведении в подклассах и перекрытых методах.</li>
<li><strong>Следите за перегрузкой.</strong><br />
Метод не должен исполнять код условно в зависимости от типа значения аргумента. В этом случае следует создать два или более перегруженных метода взамен.</li>
<li><strong>Используйте иерархии исключений, предпочитетльно, производных от специфичных классов исключений в стандартной иерархии Java.</strong><br />
Тогда ваши специфичные исключения можно будет поймать, как исключения базового типа. Если вы добавляете новые производные исключения, существующий клиентский код будет по прежнему ловить исключения через базовый тип.</li>
<li><strong>Иногда помогает простая агрегация.</strong><br />
Система комфорта пассажиров на авиалиниях состоит из разрозненных элементов: сидения, кондиционера, видео и т.п., и таких комплектов в самолете много. Вы создали частные(private) члены класса и построили полностью новый интерфейс? Не в этом случае. Компоненты так же являются частью открытого интерфейса, так что необходимо создавать открытые(public) члены класса. Такие объекты имеют собственные частные реализации, которыые по прежнему безопасны. Простую агрегацию не следует применять часто, но иногда без нее не обойтись.</li>
<li><strong>Смотрите с точки зрения программиста-клиента и человека, поддерживающего код.</strong><br />
Делайте свои классы столь понятными, насколько это возможно. Предугадывайте изменения, которые могут быть внесены и разрабатывайте класс так, чтобы вносить изменения было легко.</li>
<li><strong>Остерегайтесь «синдрома гигантских объектов».</strong><br />
Это частый недуг процедурных программистов, которым вновинку ООП и которые создают процедурную программу, и запирают ее в один-два гигантских объекта. За исключением каркаса приложения, объекты представляют концепцию заложенную в ваше приложение, а не его элементы.</li>
<li><strong>Если надо сделать что-нибудь безобразное, покрайней мере локализуйте безобразие внутри класса. </strong></li>
<li><strong>Если надо сделать что-нибудь непереносимое, создайте абстракцию для этой задачи и локализуйте ее в классе.</strong><br />
Этот дополнительный уровень абстракции предотвратит распространение непереносимости по программе. Эта идиома заложена в шаблон проектирования «Мост»</li>
<li><strong>Объекты не должны просто хранить данные.</strong><br />
Они должны иметь также четко определенное поведение. Кстати, «объекты данных» — это правильное решение, но только когда используется для упаковки и транспортировки группы элементов в случае, если их обобщенный контейнер неадекватен задаче.</li>
<li><strong>Сперва попробуйте композицию, прежде чем создать новые классы из существующих.</strong><br />
Наследование следует использовать только, если это необходимо. Если вы используете наследование там, где могла бы работать композиция, ваш дизайн становится неоправданно сложным.</li>
<li><strong>Используйте наследование и перекрытие методов для выражения разницы в поведении и поля для выражения различий состояний.</strong><br />
Предельный пример того, чего не следует делать — это наследование различных классов для определения цветов вместо использования поля «цвет».</li>
<li><strong>Избегайте несогласованности.</strong><br />
Два семантически разных объекта могут иметь идентичные действия, или задачи и естественно будет искушение попытаться сделать одно подклассом другого, просто чтобы воспользоваться наследованием. Это называется несогласованностью, но нет никакого оправдания созданию связки суперкласс-подкласс там, где она не существует. Лучшим решением будет создать общий базовый класс, который предоставит интерфейс для обоих производных классов. Это займет чуть больше места, но наследование будет полезным и возможно позволит обнаружить нечто важное в дизайне.</li>
<li><strong>Избегайте ограничений при наследовании.</strong><br />
Наиболее ясные решения добавляют новые возможности к унаследованным. Подозрительно решение, убирающее прежние возможности при наследовании без добавления новых. Но правило может быть и нарушено, и если вы работаете со старой библиотекой классов, может оказаться более эффективным ограничить существующий класс в подклассе, чем реструктурировать иерархию так, чтобы новый класс разместился как следует.</li>
<li><strong>Используйте шаблоны проектирования для уничтожения «голой функциональности».</strong><br />
То есть, если только один объект вашего класса должен быть создан, вставляйте код в приложение с комментарием «сделать только раз». Оберните его в шаблон «Одиночку». Если у вас много беспорядочного кода, который создает ваши объекты, в главной программе, поищите созидательный шаблон, вроде «фабричного метода», в который вы сможете инкапсулировать создание объектов. Устранение «голой функциональности» не только сделает код гораздо более понятным и поддерживаемым, кроме того оно защитит его от «благих намерений» тех, ктоо будет заниматься его поддержкой после вас.</li>
<li><strong>Остерегайтесь «аналитического паралича».</strong><br />
Помните, что нужно постоянно двигаться вперед в разработке, до тех пор, пока не станете знать о проекте все, и зачастую лучший и самый быстрый способ узнать что-нибудь о неучтенных факторах — это перейти на следующий этап, вместо того, чтобы пытаться сформулировать все мысленно. Вы не можете знать решения, пока не найдете его. В Java есть встроенные файрволлы, позвольте им работать на вас. Ваши ошибки в классе или множестве классов не разрушат целостности всей системы.</li>
<li><strong>Когда вам кажется, что у вас все проанализировано, разработано или реализовано, проведите сквозной контроль.</strong><br />
Позовите кого-нибудь извне вашей группы — это не должен быть консультант, а например, кто-нибудь из другой группы в вашей компании. Осмотр вашей работы свежей парой глаз может обнаружить проблемы на стадии, когда их легче устранить, и пользы от этого будет больше, чем затрат времени и средств.</li>
</ol>
<p>И еще раз спасибо Анатолию Тутову за перевод.</p>
<p><a href="http://www.asis.ru/posts/23" target="_blank">Оригинал текста</a></p>
]]></content:encoded>
			<wfw:commentRss>http://larin.in/archives/42/feed</wfw:commentRss>
		</item>
		<item>
		<title>5 фактов обо мне</title>
		<link>http://larin.in/archives/41</link>
		<comments>http://larin.in/archives/41#comments</comments>
		<pubDate>Tue, 05 Feb 2008 21:01:05 +0000</pubDate>
		<dc:creator>Larin</dc:creator>
		
		<category><![CDATA[Личное]]></category>

		<category><![CDATA[жизнь]]></category>

		<category><![CDATA[обо мне]]></category>

		<guid isPermaLink="false">http://larin.in/archives/41</guid>
		<description><![CDATA[Интро
Когда-то в далеком 2007 году, некто Сергей aka SHAman прислал мне письмо с приглашеним поучаствовать в акции-перелинковке «5 фактов обо мне». Я уже был готов выложить все свои страшные секреты, но тут началось&#8230;
Открытие моего первого проекта «Моя библиотека», заказчики пошли косяками, интересное предложение постоянной работы и т. д. В общем прошло около 2-х месяцев и [...]]]></description>
			<content:encoded><![CDATA[<h2>Интро</h2>
<p>Когда-то в далеком 2007 году, некто <a href="http://dayte2.com/?u=shaman&amp;act=state&amp;num=100" target="_blank">Сергей</a> <strong>aka</strong> <a href="http://dayte2.com/" target="_blank">SHAman</a> прислал мне письмо с приглашеним поучаствовать в акции-перелинковке <strong>«5 фактов обо мне»</strong>. Я уже был готов выложить все свои страшные секреты, но тут началось&#8230;</p>
<p>Открытие моего первого проекта «<a href="http://my-lib.ru" title="Социальная сеть любителей книг / Рекомендательная система">Моя библиотека</a>», заказчики пошли косяками, интересное предложение постоянной работы и т. д. В общем прошло около 2-х месяцев и у меня наконец появилось время.<br />
<span id="more-41"></span></p>
<h2>Обо мне</h2>
<ol>
<li>Я потомственный <strong>математик.</strong> Мало кто знает, что я математик уже в третьем поколении. Не могу сказать, что такое положение вещей добавило мне кусочек мозга :), но математику люблю. Особенно дискретную математику и теорию вероятности.</li>
<li>Не смотря на пункт первый, так же мало кто знает, что на втором курсе университета я <strong>сдавал теорию рядов аж 4 раза</strong>!!! Меня чуть не выгнали из универа! А все потому, что декан хотел получить взятку. Такова жизнь.</li>
<li>С детства я <strong>увлекаюсь радиоэлектроникой</strong>. Все детство и юность конструировал и паял «жучки» и другие различные мега-девайсы, назначение которых было понятно только мне. :) Сейчас параллельно с работой собираю электрошокер. Возможно, как будет время выложу подробную инструкцию в данном блоге.</li>
<li><strong>Обожаю рыбалку</strong>.  Правда, люблю только спиннинг, поплавочные удочки наводят на меня сон.</li>
<li>Последнее - небольшой секрет, но скажу всем - <strong>я однолюб</strong>.   Очень люблю свою вторую половинку - красавицу, комсомолку и просто замечательную <strong>девушку Ирину</strong>.</li>
</ol>
<h2>С моих слов записано верно</h2>
<p>Вот и все, что могу сказать о себе&#8230; вообще о себе рассказывать не люблю - плохо получается. =)</p>
<h2>Следующий!</h2>
<p>Не знаю, актуальна ли передача эстафеты, но я все же попробую:</p>
<ul>
<li><a href="http://devnotes.ru" target="_blank">Patrick</a></li>
<li><a href="http://webnewage.org" target="_blank">Александр</a></li>
<li><a href="http://www.uniwebs.ru">adw0rd</a></li>
<li>любой желающий</li>
<li>второй, любой желающий =)</li>
</ul>
]]></content:encoded>
			<wfw:commentRss>http://larin.in/archives/41/feed</wfw:commentRss>
		</item>
		<item>
		<title>И жить оставалось неделю&#8230;</title>
		<link>http://larin.in/archives/39</link>
		<comments>http://larin.in/archives/39#comments</comments>
		<pubDate>Fri, 01 Feb 2008 08:58:32 +0000</pubDate>
		<dc:creator>Larin</dc:creator>
		
		<category><![CDATA[Юмор]]></category>

		<category><![CDATA[баги]]></category>

		<guid isPermaLink="false">http://larin.in/archives/39</guid>
		<description><![CDATA[По версии уважаемого метеорологического портала, республике Карелия жить осталось совсем не долго:

Теперь пробежаться по морозцу за пивком будет приравниваться к полету на луну. =)))
]]></description>
			<content:encoded><![CDATA[<p>По версии уважаемого метеорологического портала, республике Карелия жить осталось совсем не долго:</p>
<p><img src="http://larin.in/wp-content/uploads/2008/02/2008-02-01_120826.gif" ilo-full-src="http://larin.in/wp-content/uploads/2008/02/2008-02-01_120826.gif" alt="Армагедон, а точнее Ледниковый период )))" /></p>
<p>Теперь пробежаться по морозцу за пивком будет приравниваться к полету на луну. =)))</p>
]]></content:encoded>
			<wfw:commentRss>http://larin.in/archives/39/feed</wfw:commentRss>
		</item>
		<item>
		<title>&#8220;Светофорчики&#8221; или flash-сообщения</title>
		<link>http://larin.in/archives/35</link>
		<comments>http://larin.in/archives/35#comments</comments>
		<pubDate>Sun, 09 Dec 2007 20:52:30 +0000</pubDate>
		<dc:creator>Larin</dc:creator>
		
		<category><![CDATA[Php]]></category>

		<category><![CDATA[Проектирование]]></category>

		<category><![CDATA[CakePHP]]></category>

		<category><![CDATA[uml]]></category>

		<category><![CDATA[интерфейс]]></category>

		<category><![CDATA[ООП]]></category>

		<category><![CDATA[сообщения]]></category>

		<guid isPermaLink="false">http://larin.in/archives/35</guid>
		<description><![CDATA[Интро
Сидел на днях перечитывал RSS-ки за пару недель, пытался вновь войти в программистский римт&#8230; уж сильно меня увлекло мое давнее увлечение - конструирование шокеров. :) Но об этом, я скорее всего, напишу позже. Так вот, сидел-перечитывал и наткнулся на статьи  Владимира Лучанинова &#8220;Вернуться назад и сообщить о результате&#8221; и &#8220;Разные flash для ошибок, сообщений [...]]]></description>
			<content:encoded><![CDATA[<h2>Интро</h2>
<p>Сидел на днях перечитывал RSS-ки за пару недель, пытался вновь войти в программистский римт&#8230; уж сильно меня увлекло мое давнее увлечение - конструирование шокеров. :) Но об этом, я скорее всего, напишу позже. Так вот, сидел-перечитывал и наткнулся на статьи  Владимира Лучанинова &#8220;<a href="http://php.southpark.com.ua/2007/redirect-back/" target="_blank">Вернуться назад и сообщить о результате</a>&#8221; и &#8220;<a href="http://php.southpark.com.ua/2007/raznye-flash-dlya-oshibok-soobshhenij-podtverzhdenij/" target="_blank">Разные flash для ошибок, сообщений и подтверждений</a>&#8220;.</p>
<p>У него статьи посвящены flash-собщениям (я их люблю называть <em><strong>&#8220;светофорчиками&#8221;</strong></em>) в CakePHP. Читая я вспомнил, что у меня в проектах тоже есть такие сообщения, и они никак не зависят от системы, т.е. их без труда можно будет добавить на любой сайт.</p>
<p><span id="more-35"></span></p>
<h2>Немного проектирования</h2>
<p>Теперь когда все читатели блога в той или иной степени разобрались с UML (<a href="http://larin.in/archives/26" target="_blank">статья 1</a> &amp; <a href="http://larin.in/archives/32" target="_blank">статья 2</a>), я решил по мере сил, сопровождать диаграммами код из моих статей. И прошу вас, читатели, быть внимательными и искать неточности в диаграммах - ошибки бывают у всех. :) Будем учиться вместе.</p>
<p>Для реализации сообщений &#8220;светофорчиков&#8221; нам необходмы 2 класса:</p>
<ol>
<li>класс описывающий само сообщение;</li>
<li>класс овечающий за отображение сообщений.</li>
</ol>
<p>И так, диаграмма классов нашего примера:</p>
<p><img src="http://larin.in/wp-content/uploads/2007/12/012_class_diagram.gif" ilo-full-src="http://larin.in/wp-content/uploads/2007/12/012_class_diagram.gif" alt="Диаграмма классов" /></p>
<p>Все предельно просто и много кодить нам не придется. Зато посетителям сайта будут показываться красивые сообщения. =)</p>
<p>Теперь смоделируем алгоритм работы:</p>
<p><img src="http://larin.in/wp-content/uploads/2007/12/012_use_case.gif" ilo-full-src="http://larin.in/wp-content/uploads/2007/12/012_use_case.gif" alt="Диаграмма последовательности" /></p>
<p>На этой диаграмме, для большей налядности, я сделал небольшую неточность - инициализировать объект <strong>MessageBox</strong> будет скорее всего не пользователь, как показано на диаграмме, а некий объек, например, контроллер. Но т.к. я решил описать реализацию сообщений без привязки к определенной системе, было решено &#8220;нагрузить&#8221; этой задачей пользователя, но лишь виртуально. :)</p>
<p>Думаю, здесь все понятно и диаграммы не вызывают никаких вопросов. Если же вопросы есть - перчитайте мои статьи по UML.</p>
<h2>И совсем немного кода</h2>
<p>И вот настал момент, когда слово станет делом. :) Т.е. момент кодирования наших задумок.</p>
<p>Код класса <strong>Message</strong> выглядит следующим образом:</p>
<pre><code>
&lt;?php
class Message
{
	private $content;

	public function __construct(string $content)
	{
		$this->content = $content;
	}

	public function send()
	{
		$_SESSION['session_messages'][] = $this-&gt;content;
	}

	public function view()
	{
		return $this-&gt;content;
	}
}
?&gt;
</code></pre>
<p>Далее опишем класс <strong>MessageBox</strong>:</p>
<pre><code>
&lt;?php
class MessageBox
{
	public $messages = array();

	public function __construct()
	{
		if (isset($_SESSION['session_messages']) &#038;&#038; is_array($_SESSION['session_messages'])) {
			$messages = $_SESSION['session_messages'];
			$co = sizeof($messages);
			for ($i = 0; $i &lt; $co; $i++) {
				$this->messages[] =  new Message($messages[$i]);
			}
		}

		//Очищаем массив сообщений он нам больше не нужен
		if (isset($_SESSION['session_messages'])) $_SESSION['session_messages'] = array();
	}

	public function getMessage()
	{
		$data = '';
		for ($i = 0, $k = sizeof($this->messages); $i &lt; $k; $i++) {
			$data .= $this->messages[$i]-&gt;view() . '&lt;br/&gt;';
		}
		return $data;
	}
}
?&gt;
</code></pre>
<p>Вот и весь код. А теперь как его использовать. Например, после добавлние поста, надо уведомить пользователя о результате опрации:</p>
<pre><code>
&lt;?php
$post = new Post();
$post->title = 'Test';
$post->text = '&lt;p&gt;text&lt;/p&gt;';

if ($post->save) {
	$msg = new Message('Ваш пост успешно добавлен.');
} else {
	$msg = new Message('Ошибка при добавлении!');
}
$msg-&gt;send();

//И редиректим куда необходимо...
header('Location: http://куда_надо');
exit(); //Никогда не забывайте ставить exit() после редиректа
?&gt;
</code></pre>
<p>И далее, в зависимости от того как у вас устроена система вызываем класс <strong>MessageBox</strong> во фронт-контроллере. Например, отрывок кода <strong>index.php</strong>: </p>
<pre><code>
&lt;?php
/**
* Здесь какой-то код
**/

//Т.к. сообщения мы показываем сразу после переадресации
//а она идет при помощи метода GET
if ('POST' != $_SERVER['REQUEST_METHOD']) {
	$mBox = new MessageBox();
	//Передаем сообщения в шаблонизатор
	$view-&gt;set('notice', $mBox-&gt;getMessage());
}

/**
* Здесь какой-то код
**/
?&gt;
</code></pre>
<p>Все сообщения-светофорчики, они же flash-сообщения готовы!</p>
<p>Я описал самый простой вид сообщений. Совершенно логично было бы дополнить класс<strong> Message</strong> еще одним свойством, например, <strong>type</strong>. Который бы указывал на тип сообщения: уведомление, ошибка, подтверждение. И в зависимости от типа выбиралось бы CSS оформление сообщения.</p>
<p>Но это я оставляю вам, что б вы тоже не скучали. Может быть, кому то придут интересные мысли по доработке или полной модернизации этих классов, пишите в комментариях - обсудим.</p>
]]></content:encoded>
			<wfw:commentRss>http://larin.in/archives/35/feed</wfw:commentRss>
		</item>
	</channel>
</rss>
