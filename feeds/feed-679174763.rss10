<?xml version="1.0" encoding="ISO-8859-1"?>

<rdf:RDF
 xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
 xmlns="http://purl.org/rss/1.0/"
 xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
 xmlns:taxo="http://purl.org/rss/1.0/modules/taxonomy/"
 xmlns:dc="http://purl.org/dc/elements/1.1/"
 xmlns:syn="http://purl.org/rss/1.0/modules/syndication/"
 xmlns:admin="http://webns.net/mvcb/"
>

<channel rdf:about="http://use.perl.org/~Alias/journal/">
<title>Alias's Journal</title>
<link>http://use.perl.org/~Alias/journal/</link>
<description>Alias's use Perl Journal</description>
<dc:language>en-us</dc:language>
<dc:rights>use Perl; is Copyright 1998-2006, Chris Nandor. Stories, comments, journals, and other submissions posted on use Perl; are Copyright their respective owners.</dc:rights>
<dc:date>2008-12-12T17:50:14+00:00</dc:date>
<dc:publisher>pudge</dc:publisher>
<dc:creator>pudge@perl.org</dc:creator>
<dc:subject>Technology</dc:subject>
<syn:updatePeriod>hourly</syn:updatePeriod>
<syn:updateFrequency>1</syn:updateFrequency>
<syn:updateBase>1970-01-01T00:00+00:00</syn:updateBase>
<items>
 <rdf:Seq>
  <rdf:li rdf:resource="http://use.perl.org/~Alias/journal/38060?from=rss" />
  <rdf:li rdf:resource="http://use.perl.org/~Alias/journal/38050?from=rss" />
  <rdf:li rdf:resource="http://use.perl.org/~Alias/journal/38036?from=rss" />
  <rdf:li rdf:resource="http://use.perl.org/~Alias/journal/38021?from=rss" />
  <rdf:li rdf:resource="http://use.perl.org/~Alias/journal/37979?from=rss" />
  <rdf:li rdf:resource="http://use.perl.org/~Alias/journal/37955?from=rss" />
  <rdf:li rdf:resource="http://use.perl.org/~Alias/journal/37910?from=rss" />
  <rdf:li rdf:resource="http://use.perl.org/~Alias/journal/37855?from=rss" />
  <rdf:li rdf:resource="http://use.perl.org/~Alias/journal/37851?from=rss" />
  <rdf:li rdf:resource="http://use.perl.org/~Alias/journal/37758?from=rss" />
  <rdf:li rdf:resource="http://use.perl.org/~Alias/journal/37708?from=rss" />
  <rdf:li rdf:resource="http://use.perl.org/~Alias/journal/37692?from=rss" />
  <rdf:li rdf:resource="http://use.perl.org/~Alias/journal/37673?from=rss" />
  <rdf:li rdf:resource="http://use.perl.org/~Alias/journal/37670?from=rss" />
  <rdf:li rdf:resource="http://use.perl.org/~Alias/journal/37656?from=rss" />
  <rdf:li rdf:resource="http://use.perl.org/~Alias/journal/37645?from=rss" />
  <rdf:li rdf:resource="http://use.perl.org/~Alias/journal/37644?from=rss" />
  <rdf:li rdf:resource="http://use.perl.org/~Alias/journal/37614?from=rss" />
  <rdf:li rdf:resource="http://use.perl.org/~Alias/journal/37565?from=rss" />
  <rdf:li rdf:resource="http://use.perl.org/~Alias/journal/37534?from=rss" />
  <rdf:li rdf:resource="http://use.perl.org/~Alias/journal/37523?from=rss" />
  <rdf:li rdf:resource="http://use.perl.org/~Alias/journal/37490?from=rss" />
  <rdf:li rdf:resource="http://use.perl.org/~Alias/journal/37477?from=rss" />
  <rdf:li rdf:resource="http://use.perl.org/~Alias/journal/37467?from=rss" />
  <rdf:li rdf:resource="http://use.perl.org/~Alias/journal/37418?from=rss" />
  <rdf:li rdf:resource="http://use.perl.org/~Alias/journal/37386?from=rss" />
  <rdf:li rdf:resource="http://use.perl.org/~Alias/journal/37326?from=rss" />
  <rdf:li rdf:resource="http://use.perl.org/~Alias/journal/37175?from=rss" />
  <rdf:li rdf:resource="http://use.perl.org/~Alias/journal/37155?from=rss" />
  <rdf:li rdf:resource="http://use.perl.org/~Alias/journal/37105?from=rss" />
 </rdf:Seq>
</items>
<image rdf:resource="http://use.perl.org/images/topics/useperl.gif" />
</channel>

<image rdf:about="http://use.perl.org/images/topics/useperl.gif">
<title>Alias's Journal</title>
<url>http://use.perl.org/images/topics/useperl.gif</url>
<link>http://use.perl.org/~Alias/journal/</link>
</image>

<item rdf:about="http://use.perl.org/~Alias/journal/38060?from=rss">
<title>If you are keeping an eye on Padre...</title>
<link>http://use.perl.org/~Alias/journal/38060?from=rss</link>
<description>&lt;p&gt;For the curious onlookers, the next release of Padre (0.21) should be an excellent candidate for your inspection.&lt;/p&gt;&lt;p&gt;Since my last recommended release (0.14) we've taken large strides forwards. Padre is now FAR superior to Windows notepad, and we're starting to get close to having the family of Windows-based "programmers editors" (Ultraedit, Notepad++, etc) come into our sights now.&lt;/p&gt;&lt;p&gt;For starters, the development team has somewhere between doubled and tripled in the last 5 weeks.&lt;/p&gt;&lt;p&gt;As far as new features, we've added the following.&lt;/p&gt;&lt;p&gt;- A shiny new Plugin API which supports enable/disable, upgrading, compatibility detection, document type registration, and high-quality menus with context refresh support.&lt;/p&gt;&lt;p&gt;- "My Plugin" support, making it trivial to start hacking on your own plugins.&lt;/p&gt;&lt;p&gt;- Better support for PAR Padre and PAR Plugins&lt;/p&gt;&lt;p&gt;- A far more robust document model.&lt;/p&gt;&lt;p&gt;- Document type-aware menu options, so "Comment these lines" does the right thing on different document types (at least theoretically).&lt;/p&gt;&lt;p&gt;- Code folding support.&lt;/p&gt;&lt;p&gt;- Auto-indent support in 3 different flavours.&lt;/p&gt;&lt;p&gt;- Show/Hide for tabs, newlines and other white space.&lt;/p&gt;&lt;p&gt;- Word wrapping support.&lt;/p&gt;&lt;p&gt;- Tab to Space conversion support.&lt;/p&gt;&lt;p&gt;- Internationalisation support, with translations to French, Hebrew, Hungarian, Italian, Korean and Russian. The default language is now English (The Queen's). Support for English (American) has not yet been contributed.&lt;/p&gt;&lt;p&gt;- GUI upgrade to the prettier AUI panes.&lt;/p&gt;&lt;p&gt;- perl -c syntax checking&lt;/p&gt;&lt;p&gt;- Option to highlight the current line in high-visibility day-glow yellow.&lt;/p&gt;&lt;p&gt;- Drag and drop files onto Padre to open them.&lt;/p&gt;&lt;p&gt;- Full Screen support (not maximize, actual fullscreen)&lt;/p&gt;&lt;p&gt;- Background-detection of open files changing on disk.&lt;/p&gt;&lt;p&gt;- Printing support.&lt;/p&gt;&lt;p&gt;- Snippit insertion support.&lt;/p&gt;&lt;p&gt;- Threaded backgrounding analysis support.&lt;/p&gt;&lt;p&gt;For only 5 weeks difference, this is a monumental amount of functionality to add.&lt;/p&gt;&lt;p&gt;As you can imagine, this pace means some of the new functionality is a little fragile, but features do seem to be stabilising within a month or two after they first appear.&lt;/p&gt;&lt;p&gt;For example, startup, shutdown, save all, close all and so on actions are now much much crisper. They've been tweaked out extensively with GUI do-not-render hints and other hints to show windows late, and destroy windows early.&lt;/p&gt;&lt;p&gt;As a result, Padre now FEELS a LOT faster and crisper than 5 or 6 releases ago.&lt;/p&gt;&lt;p&gt;Still to do, alas, Project support, but that's next on the hit list.&lt;/p&gt;&lt;p&gt;But 0.21 should be a great "next look", I highly recommend it.&lt;/p&gt;&lt;p&gt;P.S. That was not The Other Sekrit.&lt;nobr&gt; &lt;wbr&gt;&lt;/nobr&gt;:)&lt;/p&gt;</description>
<dc:creator>Alias</dc:creator>
<dc:date>2008-12-10T09:59:57+00:00</dc:date>
<dc:subject>journal</dc:subject>
</item>

<item rdf:about="http://use.perl.org/~Alias/journal/38050?from=rss">
<title>Why I still can't write my grant report...</title>
<link>http://use.perl.org/~Alias/journal/38050?from=rss</link>
<description>&lt;p&gt;You see, there's another Sekrit&lt;nobr&gt; &lt;wbr&gt;&lt;/nobr&gt;:)&lt;/p&gt;</description>
<dc:creator>Alias</dc:creator>
<dc:date>2008-12-08T23:43:42+00:00</dc:date>
<dc:subject>journal</dc:subject>
</item>

<item rdf:about="http://use.perl.org/~Alias/journal/38036?from=rss">
<title>Microsoft partners with Strawberry Perl to improve the CPAN</title>
<link>http://use.perl.org/~Alias/journal/38036?from=rss</link>
<description>&lt;p&gt;&lt;i&gt;It would appear I have finally I achieved my long-time goal of slashdotting pudge's private Slashdot beta testing site&lt;nobr&gt; &lt;wbr&gt;&lt;/nobr&gt;:)&lt;/i&gt;&lt;/p&gt;&lt;p&gt;For the last 2 years, starting with the Vertical Metre of Beer competition, I've been working to make Win32 a truly first class citizen of the Perl platform world.&lt;/p&gt;&lt;p&gt;The goal, as I keep repeating on the Strawbery Perl website, is Complete Platform Equality. Not different, or "better", just equal and identical. When writing Perl code, your platform should ideally be irrelevant.&lt;/p&gt;&lt;p&gt;I feel that Strawberry Perl has managed to achieve this for the Perl core.&lt;/p&gt;&lt;p&gt;In the year since it was released, the community has used it to help fix many of the largest and most important CPAN modules as well. Modules that have improved their release process and are now reliably problem-free on Windows include Bundle::CPAN, the DateTime family, Template Toolkit, POE, Wx, and a number of XML modules.&lt;/p&gt;&lt;p&gt;Unfortunately, we are now reaching the end of the large important modules that have big teams and are relatively well resourced. For smaller modules, and many individual CPAN authors, problems accessing legal licenses or the hardware to run it on, is now becomming a critical limiting factor. Some authors have simply never used Windows before, and don't want the hassle of learning how to set it up.&lt;/p&gt;&lt;p&gt;So it's time to remove that problem.&lt;/p&gt;&lt;p&gt;At YAPC::NA this year, at the beginning of my world tour, I was introduced to an attendee from the Microsoft Open Source Software Lab. He was interested in finding out if there was anything Microsoft could do to help with Strawberry.&lt;/p&gt;&lt;p&gt;Later in my tour, after diverting my first week in Portland over to Seattle,  with Ingy and I took a trip out to Redmond to visit the Microsoft OSSL. After some discussions there, lunch, and a look at what they are doing for people like the Samba team, one interesting very possibility started to emerge.&lt;/p&gt;&lt;p&gt;A week or two later at OSCON, I managed to catch up with Sam Ramji (the head of the OSSL) briefly in the hallway track after his keynote, and bounced the idea off him directly. He was extremely positive about it, so after I returned to Australia I polished the idea into a formal proposal and sent it off for consideration.&lt;/p&gt;&lt;p&gt;The proposal was accepted about 3 weeks later, and last night at OSDC we announced a new partnership between Microsoft and Strawberry Perl.&lt;/p&gt;&lt;p&gt;So, finally, I can now stop with the waffling around and just unveil The Sekrit.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Commencing this month, Microsoft will be providing every CPAN author with free access to a centrally-hosted virtual machine environment containing every major version of Windows.&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The result is now practically the entire Perl community has a zero-cost and zero-setup way to doing light development, problem replication, debugging, and ad-hoc hesting on every version of Windows.&lt;/p&gt;&lt;p&gt;This arrangement is particularly amazing because it is, to my knowledge, several orders of magnitude larger than anything of this nature ever attempted before with the Open Source community.&lt;/p&gt;&lt;p&gt;Neither the Microsoft guys nor I know quite what is going to happen once we turn this baby on. With 7,000 potential users and endless possible use cases, I expect at the very least something of an adventure.&lt;nobr&gt; &lt;wbr&gt;&lt;/nobr&gt;:)&lt;/p&gt;&lt;p&gt;So as a result, we are treating the initial implementation as completely experimental. Within Microsoft, the partnership is being lead directly by the locals in Microsoft Australia.&lt;/p&gt;&lt;p&gt;They have already procured and installed the hardware, and the OSSL guys in Redmond have prepared the Windows system images.&lt;/p&gt;&lt;p&gt;The actual hosting service itself needs to be provided by a non-Microsoft Sydney-based hosting company, due to some legal wrinkles relating to the Australian Trade Practices Act.&lt;/p&gt;&lt;p&gt;Once some final paperwork issues are resolved (which should happen over the next few business days) the admin passwords will be handed over to me, and then we have to work out the specific mechanics for how to manage everyone@cpan.org, and how we'll be dealing with instancing and rollback of the environments.&lt;/p&gt;&lt;p&gt;The launch set of Windows system images is currently exoected to be the following:&lt;br&gt;&lt;code&gt;&lt;br&gt;Windows XP Professional&lt;br&gt;Windows Server 2003 32-bit&lt;br&gt;Windows Server 2003 64-bit&lt;br&gt;Windows Vista Ultimate&lt;br&gt;Windows Server 2008 32-bit&lt;br&gt;Windows Server 2008 64-bit&lt;br&gt;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;All environments will be updated to the current service packs, and are (I believe) the default English (American) versions.&lt;/p&gt;&lt;p&gt;It's worth nothing that this initial set is based on the MINIMUM useful variations I identified as necesary. Once the environment is running, it's likely that more environments will be added.&lt;/p&gt;&lt;p&gt;I've already suggested we add internationalisation as the next major priority, so hopefully we can also shortly see localised instanced that represent typical install configurations from Germany, Japan and China.&lt;/p&gt;&lt;p&gt;As for types of activities you can use the environment for, initially I want to contain it to relatively light activities to prevent over-loading the servers.&lt;/p&gt;&lt;p&gt;Ad-hoc testing, debugging and experimentation is fine. Resource-intensive CPAN Testers installs and other heavy smoke testing activities will initially not be allowed, until I have some idea of just what the resource implications of this whole exercise will be.&lt;/p&gt;&lt;p&gt;I'd very much like to avoid melting the servers for at LEAST the first week&lt;nobr&gt; &lt;wbr&gt;&lt;/nobr&gt;:)&lt;/p&gt;&lt;p&gt;More information (and press releases) will follow, the entire program under which this partnership will be run is so new it's only just been given a name, so some of the organisational details will ironed out as we go.&lt;/p&gt;&lt;p&gt;But for now, to all the CPAN authors, all I have to add is...&lt;/p&gt;&lt;p&gt;Merry Christmas&lt;/p&gt;&lt;p&gt;Adam K&lt;/p&gt;&lt;p&gt;P.S. Or your appropriate equivalent religious or non-religious event, if any, occuring during the month of December, etc etc&lt;/p&gt;</description>
<dc:creator>Alias</dc:creator>
<dc:date>2008-12-06T06:32:40+00:00</dc:date>
<dc:subject>journal</dc:subject>
</item>

<item rdf:about="http://use.perl.org/~Alias/journal/38021?from=rss">
<title>Asciio brings the house down at OSDC.AU!</title>
<link>http://use.perl.org/~Alias/journal/38021?from=rss</link>
<description>&lt;p&gt;My brief 5 minute demo of Asciio was reported to be by far the best lightning talk on day one of OSDC.AU.&lt;/p&gt;&lt;p&gt;As with everywhere else it has been shown, Asciio continues to be an utter revelation to people seeing it for the first time.&lt;/p&gt;&lt;p&gt;It is, however, NOT The Sekrit.&lt;/p&gt;</description>
<dc:creator>Alias</dc:creator>
<dc:date>2008-12-04T18:22:00+00:00</dc:date>
<dc:subject>journal</dc:subject>
</item>

<item rdf:about="http://use.perl.org/~Alias/journal/37979?from=rss">
<title>I can't submit my grant report yet because of The Sekrit!</title>
<link>http://use.perl.org/~Alias/journal/37979?from=rss</link>
<description>&lt;p&gt;Although I've now finished all of the bits of my Perl on a Stick grant, I've yet to submit a final grant report.&lt;/p&gt;&lt;p&gt;But there's a very very good reason why.&lt;/p&gt;&lt;p&gt;You see, I have a Sekrit.  A huge, wonderful Sekrit that will provide an extra bonus result for my grant. A Sekrit bigger and more awesome than the Perl on a Stick work itself.&lt;/p&gt;&lt;p&gt;In fact, it's probably going to be as important or more important as Strawberry Perl was for improving the lives of Windows Perl programmers, and it could never have happened if not for the funding of my trip in a way that allowed me sufficient freedom to change plans easily and go chasing new ideas.&lt;/p&gt;&lt;p&gt;I've mentioned The Sekrit to a few people in IRC, but I've not dared risking mentioning it anywhere permanent, just in case I ruined it.&lt;/p&gt;&lt;p&gt;The Sekrit is due to be announced at the Open Source Developers Conference in Sydney next week.&lt;/p&gt;&lt;p&gt;Stay tuned!&lt;/p&gt;</description>
<dc:creator>Alias</dc:creator>
<dc:date>2008-11-30T08:48:44+00:00</dc:date>
<dc:subject>journal</dc:subject>
</item>

<item rdf:about="http://use.perl.org/~Alias/journal/37955?from=rss">
<title>Extending the Padre Plugin API</title>
<link>http://use.perl.org/~Alias/journal/37955?from=rss</link>
<description>&lt;p&gt;One of the best parts of having such a quickly growing and enthusiastic group of developers on a project is that it the excitement really does feed off itself.&lt;/p&gt;&lt;p&gt;The last release or two I've mostly been planning the new Padre::Plugin API.&lt;/p&gt;&lt;p&gt;After finally gotten to something I liked and sketched up the POD and method stubs for the base plugin class (without actually implementing anything of note) I checked it in and went to bed.&lt;/p&gt;&lt;p&gt;I arrived back in IRC the next day to find that Gabor had already ported practically the entire plugin manager code over to the new API, and Steffen had already added PAR support to the new plugin manager as well.&lt;/p&gt;&lt;p&gt;Another day or two and pretty much all the plugins (granted, most of which were produced by the super-productive Fayland) have been ported over to the new API as well.&lt;/p&gt;&lt;p&gt;As with anything moving at this speed, it's all still a little rough, but with the implementation already in place, it's quite simple to just go in and shuffle a few minor things around so they work in the way I the Plugin API was meant to work.&lt;/p&gt;&lt;p&gt;So with the core plugin API now in place (to support upgrading, enable/disable and so on) we can start to turn to additional integration points between the plugin and the core.&lt;/p&gt;&lt;p&gt;The first two new integration points will be for document types (to identify a plugin as providing a document class for a particular mime-type) and then to provide an option to populate the "File -&amp;gt; New..." menu so that plugins can be written that do generation of new files and projects.&lt;/p&gt;&lt;p&gt;This is a big deal for me for two reasons. Firstly, because we can finally move non-Perl document support out of the core (which should help simply maintenance and clarify interfaces enormously) and secondly because I can start adding code to me personal plugin for generating the SPECIFIC skeletons that I use for my own code.&lt;/p&gt;</description>
<dc:creator>Alias</dc:creator>
<dc:date>2008-11-27T02:38:16+00:00</dc:date>
<dc:subject>journal</dc:subject>
</item>

<item rdf:about="http://use.perl.org/~Alias/journal/37910?from=rss">
<title>Broken Gravatars - Why you should test with filters...</title>
<link>http://use.perl.org/~Alias/journal/37910?from=rss</link>
<description>&lt;p&gt;One of the more interesting aspects of the web being so universal is that it gets pulled in a lot of different directions, so sites can stop looking like what you think they look like.&lt;/p&gt;&lt;p&gt;One example is the YAPC::NA/OSDC website, where none of the sponsor logos on the website were working for me, but yet it looked fine for other people in the committee.&lt;/p&gt;&lt;p&gt;The problem turned out to be Ad-Block Plus. But more specifically, because the guy doing the website had naturally enough put the images into an&lt;nobr&gt; &lt;wbr&gt;&lt;/nobr&gt;/images/sponsors/.&lt;/p&gt;&lt;p&gt;And of course, since tons of ads are in things with the word "sponsors" in it, all the conference sponsors logos were blocked.&lt;/p&gt;&lt;p&gt;We currently have a similar problem on http://search.cpan.org/ with broken gravatars. Because gravatars are most popular in social network type websites, they fall into the "social networking" category of the corporate fun filter here at work, along with MySpace, FaceBook and all that junk.&lt;/p&gt;&lt;p&gt;Result, ugly broken image square on the search.cpan.org module pages&lt;nobr&gt; &lt;wbr&gt;&lt;/nobr&gt;:(&lt;/p&gt;&lt;p&gt;So note for future, if you ever use gravatars or other similar systems with social networking background for more serious purposes, always make sure to put a squid proxy or some other form of obfuscation on a serious domain in front of the raw service, so that fun filters won't generate false-positives on them.&lt;/p&gt;</description>
<dc:creator>Alias</dc:creator>
<dc:date>2008-11-20T01:19:38+00:00</dc:date>
<dc:subject>journal</dc:subject>
</item>

<item rdf:about="http://use.perl.org/~Alias/journal/37855?from=rss">
<title>My 2nd generation release automation hits 1000 releases</title>
<link>http://use.perl.org/~Alias/journal/37855?from=rss</link>
<description>&lt;p&gt;After moving from CVS to SVN a number of years ago, I heavily modified my original first generation release script to take advantage of some of the basic features of SVN, like everything being accessible by HTTP by default.&lt;/p&gt;&lt;p&gt;For example, you can see the current incarnation of my release automation directly in the repository here:&lt;br&gt;&lt;code&gt;&lt;br&gt;http://svn.ali.as/cpan/tools/release.pl&lt;br&gt;&lt;/code&gt;&lt;br&gt;Because my release automation is so intensely tuned to the way I work, I've never felt that (as a whole process) it was worth foisting on the CPAN. I find it quite interesting that of all the people with 100+ CPAN modules, no two of them use the same release system, and all of them (except maybe SMUELLER) rolled their own.&lt;/p&gt;&lt;p&gt;So I release bits and pieces, the reusable components used to implement single tasks, and that's been enough for me.&lt;/p&gt;&lt;p&gt;After 1000 releases, however, my current system is definitely feeling the strain. Although it makes releasing extremely quickly, the lack of awareness of the overall repository is becoming a problem.&lt;/p&gt;&lt;p&gt;With so many packages, and several dozen external committers, it has become impossible to know which modules in the trunk match the most recent release, which have updates, and whether or not those updates are significant.&lt;/p&gt;&lt;p&gt;It's also impossible to do any form of bulk updates, bulk incremental release, or bulk releases (something that has always bothered me when I maintain Module::Install).&lt;/p&gt;&lt;p&gt;So to mark the 1000th release by my second generation release automation, I've commenced development on a new third generation "release" automation system that could perhaps be more accurately described as a "repository automation system".&lt;/p&gt;&lt;p&gt;Having recommitted to using svn for my repository (for reasons that may become more obvious later) and with the code likely to be tied very closely to the way I work, it will most likely be of no direct use to anyone else. And the "release" packages won't be going up to the CPAN.&lt;/p&gt;&lt;p&gt;But if you interested in the whole release automation area, you may wish to watch and see what comes out of it.&lt;/p&gt;&lt;p&gt;You can see the beginnings of this work at the following path:&lt;br&gt;&lt;code&gt;&lt;br&gt;http://svn.ali.as/cpan/trunk/ADAMK-Repository/&lt;br&gt;&lt;/code&gt;&lt;br&gt;The initial first few "releases" will be focused on building up a cohesive object model of my own repository. The intent is to understand what modules are maintained in the repository, what releases have been done and WHEN (in repository revision terms) and what SVN path/revision pairs map to which conceptual places.&lt;/p&gt;&lt;p&gt;With this in place, a second layer of logic can focus on issues of release state vs repository state, on change (and who made those changes), and on knowing if modules are passing tests, and whether or not arbitrary external patches will break those tests.&lt;/p&gt;&lt;p&gt;And finally, now I finally have a good Perl editor in sight (albeit 6 months or a year from being ideal for me), I have a chance to tie the repository automation directly to my editor with a personal plugin that lets me just look at any file within a package, and run a "release" command from a menu and have everything needed to SAFELY release modules.&lt;/p&gt;&lt;p&gt;And man, THAT would be awesome.&lt;/p&gt;</description>
<dc:creator>Alias</dc:creator>
<dc:date>2008-11-11T15:57:41+00:00</dc:date>
<dc:subject>journal</dc:subject>
</item>

<item rdf:about="http://use.perl.org/~Alias/journal/37851?from=rss">
<title>Subtle improvements in Windows Vista</title>
<link>http://use.perl.org/~Alias/journal/37851?from=rss</link>
<description>&lt;p&gt;I've moved my home 4-core parallel-coding/gaming machine over to Vista, following the typical "wait for the first service pack" approach that most people take when considering new Microsoft operating systems.&lt;/p&gt;&lt;p&gt;I have to say that it pretty much WORKSFORME and apart from a few different dialog boxes and what not I'm settling in mostly fine. And of course, being a developer, I've jealousy turned off all the eye candy to save the resources for myself&lt;nobr&gt; &lt;wbr&gt;&lt;/nobr&gt;:)&lt;/p&gt;&lt;p&gt;One of the more subtle changes in Vista that I hadn't paid attention to before but have noticed since I started doing some Padre coding on it is that Vista has changed the directory layout for home directories.&lt;/p&gt;&lt;p&gt;Instead of the previous (horrible) style...&lt;br&gt;&lt;code&gt;&lt;br&gt;C:\Documents and Settings\Adam\My Documents&lt;br&gt;&lt;/code&gt;&lt;br&gt;We now have a much cleaner...&lt;br&gt;&lt;code&gt;&lt;br&gt;C:\Users\Adam\Documents&lt;br&gt;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;The obvious improvement here is for the server hackers and command line users, who have much less to type.&lt;/p&gt;&lt;p&gt;But one additional and more interesting benefit is that this change removes all of the whitespace from these paths. What attracts me most about this seemingly simple change is that in a single stroke it lets us avoid a ton of deeply buried bugs in certain very old Perl modules that require lists passed as whitespace-separated strings.&lt;/p&gt;&lt;p&gt;Avoiding these bugs is one of the reasons that Strawberry Perl is locked down to C:\strawberry, because if we allowed installation to arbitrary paths it would be too easy for people to enter whitespace-containing paths that might break things in unexpected ways. (The other reason is the lack of power in InnoSetup, which I'm in the process of fixing by moving to WiX)&lt;/p&gt;&lt;p&gt;It also simplifies things somewhat for people with whitespace escaping troubles.&lt;/p&gt;&lt;p&gt;Now granted, it doesn't FIX the problems as such. Escaping bug fixes now need to be done. But now the bug is not EXPOSED on quite so many operating systems it helps to limit the scope of the bug and reduce the impact from it between now and such time as it is resolved more thoroughly in all the various places fixes are needed.&lt;/p&gt;&lt;p&gt;The ultimate effect of this "whitespace tweak" is that Vista (and I assume Server 2003/2008 as well) are much better platforms for building Unix-originated Open Source applications on than XP was.&lt;/p&gt;&lt;p&gt;As much as I had grown to like "My Documents" (and File::HomeDir will continue to use the terminology in -&amp;gt;my_documents) I think this change represents a win for engineering over marketing, potentially at a slight cost to usability for computer novices.&lt;/p&gt;&lt;p&gt;But I guess that as a ratio of the population, computer novices are in a slow inevitable decline (at least in the developed world where the bulk of Microsoft's revenue comes from) so this does make some sense...&lt;/p&gt;</description>
<dc:creator>Alias</dc:creator>
<dc:date>2008-11-11T03:06:25+00:00</dc:date>
<dc:subject>journal</dc:subject>
</item>

<item rdf:about="http://use.perl.org/~Alias/journal/37758?from=rss">
<title>Experimenting with Padre 0.14</title>
<link>http://use.perl.org/~Alias/journal/37758?from=rss</link>
<description>&lt;p&gt;If you've never tried &lt;a href="http://search.cpan.org/perldoc?Padre"&gt;Padre&lt;/a&gt;, or are one of the people that only looked at the very earliest 0.01 or similar releases, with 0.14 out it's time you took a(nother) look at Padre.&lt;/p&gt;&lt;p&gt;More experience with Wx has lead to a far more streamlined, if still sparse, user interface. Personally, I don't mind that the lack of clutter (except for the GLARING lack of a "close file" button).&lt;/p&gt;&lt;p&gt;We now have the beginning stages of a Document model and context aware menus, although the appearance and hiding of the "Perl" menu doesn't work quite as elegant as I had hoped.&lt;/p&gt;&lt;p&gt;So now, unlike the earliest editors, Padre is now a FAR superior Perl editor compared to Windows Notepad.&lt;nobr&gt; &lt;wbr&gt;&lt;/nobr&gt;:)&lt;/p&gt;&lt;p&gt;The Plugin API is crude but works, in about an hour I managed to build myself a plugin that integrates &lt;a href="http://search.cpan.org/perldoc?pip"&gt;pip&lt;/a&gt; pip support, allowing you to type in any tarball file name or URI and have it installed by the CPAN client with output spooling to the output panel.&lt;/p&gt;&lt;p&gt;Unfortunately, since I can't install Wx on my debian build server, I can't upload the plugin to CPAN yet. But I'm working on that problem.&lt;/p&gt;&lt;p&gt;The beginnings of deeply Perl-aware functions like the "Find Unmatched Brace" tool work pretty well, demonstrating proper &lt;a href="http://search.cpan.org/perldoc?PPI"&gt;PPI&lt;/a&gt; integration.&lt;/p&gt;&lt;p&gt;The PPI integration layer should now be usable for Plugin authors, meaning that anything you've already written that is driven by PPI should be portable to work inside of Padre.&lt;/p&gt;&lt;p&gt;For me, the next phase of development should hopefully see the addition of Project support. By that, of course, I don't mean crude root directory selection and manual adding and removing files to the project.&lt;/p&gt;&lt;p&gt;I mean that if you open up a test file, Padre will Just Know that it's part of a larger distribution. And because it's a Perl module, perhaps some "Run Test" and "Run All Tests" or maybe even "Build Release" or "CPAN Release" menu entries or buttons will appear when that file is open.&lt;/p&gt;&lt;p&gt;Experience has shown us that the tools we create to support CPAN development are the ones that companies ultimately ending up adopting. So there's no reason not to build in special functionality for CPAN module development, maintenance and release right from the earliest days of the editor.&lt;/p&gt;&lt;p&gt;It should hopefully also let me achieve one of my real want-to-haves, which is an "Open Padre" button that lets you open the editor's own code as a Project.&lt;/p&gt;</description>
<dc:creator>Alias</dc:creator>
<dc:date>2008-10-28T12:48:20+00:00</dc:date>
<dc:subject>journal</dc:subject>
</item>

<item rdf:about="http://use.perl.org/~Alias/journal/37708?from=rss">
<title>Strawberry Perl October 2008 Released!</title>
<link>http://use.perl.org/~Alias/journal/37708?from=rss</link>
<description>&lt;p&gt;&lt;a href="http://strawberry-perl.googlecode.com/files/strawberry-perl-5.10.0.3.exe"&gt;http://strawberry-perl.googlecode.com/files/strawberry-perl-5.10.0.3.exe&lt;/a&gt;&lt;/p&gt;&lt;p&gt;(more installers available on the &lt;a href="http://strawberryperl.com/releases.html"&gt;releases page&lt;/a&gt;)&lt;/p&gt;&lt;p&gt;I'm proud to announce &lt;a href="http://strawberryperl.com/"&gt;Strawberry Perl&lt;/a&gt; October 2008, the next quarterly iteration in the InnoSetup-based Strawberry Perl series.&lt;/p&gt;&lt;p&gt;The biggest feature in this release is (finally) full support for META.yml configure_requires: out of the box, when using the default CPAN.pm client.&lt;/p&gt;&lt;p&gt;In a weird coincidence yesterday I was visiting a friend to recover a whiteboard they were storing for me, and found the discovered the original whiteboard sketches from the brainstorming session after YAPC::AU 2006 where semantic web and RDF hacker Andrae Muys and I dreamed up the initial concept.&lt;/p&gt;&lt;p&gt;So having this all finally in the wild makes me very very happy.&lt;/p&gt;&lt;p&gt;The second major change for users in this release is actually the &lt;b&gt;removal&lt;/b&gt; of some legacy settings in relation to library and include paths that are no longer needed.&lt;/p&gt;&lt;p&gt;Without these old settings confusing their Makefile.PL logic, both Wx.pm and Tk.pm now build successfully. (Although apparently an unrelated issue is still breaking Tk on vista, but this should be resolved shortly)&lt;/p&gt;&lt;p&gt;As a result, a large number of desktop applications that use these two libraries can now be installed easily with a simple CPAN command like (for example) "cpan install Padre". The first time this command is going to take some time to compile the widget set, but it does work reliably. This removes one of the major blockers for Chocolate Perl.&lt;/p&gt;&lt;p&gt;This release also adds two new platforms to the Strawberry family.&lt;/p&gt;&lt;p&gt;One recurring comment I get is that in corporate environments (like mine in fact) the C: drive is completely locked down to the Standard Operating Environment, and only the D: drive is free for general use.&lt;/p&gt;&lt;p&gt;So this release adds a second installer for both Perl 5.10.0 and Perl 5.8.8 that installs Perl to D:\strawberry rather than C:\strawberry. The is a temporary solution to the problem of not being able to specify the install path. This separate release will be end-of-life'd once the main installer gains the ability to install to arbitrary paths.&lt;/p&gt;&lt;p&gt;The second new install is the first "official" beta of Strawberry Perl Portable, a Strawberry Perl build that integrates the "Perl on a Stick" functionality developed during my recent world tour.&lt;/p&gt;&lt;p&gt;This release represents the end of my grant work, but merely the beginning for Portable Perl. There are still bound to be bugs in the build, particularly in the area of the C parts of the toolchain.&lt;/p&gt;&lt;p&gt;To try it out, download the &lt;a href="http://strawberryperl.com/download/strawberry-perl-5.10.0.3-portable-beta-1.zip"&gt;Strawberry Perl Portable 5.10.0.3 ZIP package&lt;/a&gt;, and extract it into any path (which does &lt;b&gt;NOT&lt;/b&gt; have any spaces) on a flash drive, digital camera, mp3 player or any other device that mounts as a lettered drive under Windows.&lt;/p&gt;&lt;p&gt;And now to the bad news, because all this Strawberry does comes with a downside.&lt;/p&gt;&lt;p&gt;Although it has served us well, it now appears we are approaching the limit of what can be done with Inno Setup and&lt;nobr&gt; &lt;wbr&gt;&lt;/nobr&gt;.exe installers. October 2008 is very much a &lt;i&gt;"lipstick on a pig"&lt;/i&gt; release. There's only so much you we can do to make it better past this point.&lt;/p&gt;&lt;p&gt;The majority of remaining bug reports and feature requests can only be solved by abandoning Inno Setup and the&lt;nobr&gt; &lt;wbr&gt;&lt;/nobr&gt;.exe format and migrating to WiX (Windows Installer XML) and the&lt;nobr&gt; &lt;wbr&gt;&lt;/nobr&gt;.msi format.&lt;/p&gt;&lt;p&gt;Fortunately, the latest release of WiX contains a very functional MSI disassembler, which allows you to rip apart other people's MSI installers to see how they were built.&lt;/p&gt;&lt;p&gt;With these new example files available, it appears that a new build system that targets&lt;nobr&gt; &lt;wbr&gt;&lt;/nobr&gt;.msi is achievable with a reasonable amount of effort in a reasonable amount of time.&lt;/p&gt;&lt;p&gt;So this new 4th generation build system (tentatively called Perl::Dist::WiX) will be the main focus of my efforts from now on.&lt;/p&gt;&lt;p&gt;I hope to complete this migration in one or two release cycles. Strawberry will continue to release quarterly, but I expect these releases to be mostly more of the same from here on.&lt;/p&gt;&lt;p&gt;In the mean time, enjoy the new release. I'm finding it much much easier to work with during my own development efforts, and I hope you do to.&lt;/p&gt;</description>
<dc:creator>Alias</dc:creator>
<dc:date>2008-10-21T04:54:58+00:00</dc:date>
<dc:subject>journal</dc:subject>
</item>

<item rdf:about="http://use.perl.org/~Alias/journal/37692?from=rss">
<title>Strawberry Perl October Beta 1 (well ok, release candidate)</title>
<link>http://use.perl.org/~Alias/journal/37692?from=rss</link>
<description>&lt;p&gt;&lt;a href="http://strawberryperl.com/download/strawberry-perl-5.8.8.3-beta1.exe"&gt;http://strawberryperl.com/download/strawberry-perl-5.8.8.3-beta1.exe&lt;/a&gt;&lt;br&gt;&lt;a href="http://strawberryperl.com/download/strawberry-perl-5.8.8.3-beta1.zip"&gt;http://strawberryperl.com/download/strawberry-perl-5.8.8.3-beta1.zip&lt;/a&gt;&lt;br&gt;&lt;a href="http://strawberryperl.com/download/strawberry-perl-5.8.8.3-ddrive-beta1.exe"&gt;http://strawberryperl.com/download/strawberry-perl-5.8.8.3-ddrive-beta1.exe&lt;/a&gt;&lt;br&gt;&lt;a href="http://strawberryperl.com/download/strawberry-perl-5.10.0.3-beta1.exe"&gt;http://strawberryperl.com/download/strawberry-perl-5.10.0.3-beta1.exe&lt;/a&gt;&lt;br&gt;&lt;a href="http://strawberryperl.com/download/strawberry-perl-5.10.0.3-beta1.zip"&gt;http://strawberryperl.com/download/strawberry-perl-5.10.0.3-beta1.zip&lt;/a&gt;&lt;br&gt;&lt;a href="http://strawberryperl.com/download/strawberry-perl-5.10.0.3-ddrive-beta1.exe"&gt;http://strawberryperl.com/download/strawberry-perl-5.10.0.3-ddrive-beta1.exe&lt;/a&gt;&lt;br&gt;&lt;a href="http://strawberryperl.com/download/strawberry-perl-5.10.0.3-portable-beta1.zip"&gt;http://strawberryperl.com/download/strawberry-perl-5.10.0.3-portable-beta1.zip&lt;/a&gt;&lt;/p&gt;&lt;p&gt;For anyone able to help briefly test Strawberry October before I release in about 24-48 hours, here is the latest crop of betas.&lt;/p&gt;&lt;p&gt;They contain very little change to the C toolchain, libraries, or Perl, so should be quite safe to try out.&lt;/p&gt;&lt;p&gt;New in this release is.&lt;/p&gt;&lt;p&gt;1. The entire toolchain is upgraded to the latest and greatest, including Module::Build 0.30 and a CPAN.pm that is configure_requires compatible out of the box, so future upgrades to Module::Build and friends defined in configure_requires META.yml files should Just Work.&lt;/p&gt;&lt;p&gt;2. The first "official" beta release of Strawberry Perl Portable (this will remain a beta when the others lose that tag)&lt;/p&gt;&lt;p&gt;3. Although I can't support arbitrary install paths, I have built a special "D: Drive" edition of Strawberry that at least lets us solve the most common situation in locked down corporate computers where C: is restricted but D: exists for the user to do with as they like.&lt;/p&gt;&lt;p&gt;4. Man page generation and HTML generation should now be completely disabled, removing a ton of wasted space that both goes out of date easily and is more easily accessible via search.cpan or 'perldoc'.&lt;/p&gt;&lt;p&gt;5. A cleaner toolchain with much less forced modules, the removal of the INC and LIBS environment variables, and the removal of the Makefile.PL params, so WxWidgets and other modules now build correctly.&lt;/p&gt;&lt;p&gt;Unless someone finds a show-stopper in the next day, I'll kick off the final release run.&lt;/p&gt;</description>
<dc:creator>Alias</dc:creator>
<dc:date>2008-10-18T16:21:57+00:00</dc:date>
<dc:subject>journal</dc:subject>
</item>

<item rdf:about="http://use.perl.org/~Alias/journal/37673?from=rss">
<title>I want to FAIL like you do!</title>
<link>http://use.perl.org/~Alias/journal/37673?from=rss</link>
<description>&lt;p&gt;Some days I am so envious of the CPAN Testers guys, able to build, deploy and maintain collections of esoteric servers with all sorts of interesting failures...&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.cpantesters.org/show/IPC-Run.html#IPC-Run-0.81_01"&gt;http://www.cpantesters.org/show/IPC-Run.html#IPC-Run-0.81_01&lt;/a&gt;&lt;/p&gt;&lt;p&gt;I wish I sucked less and was able to replicate their failures&lt;nobr&gt; &lt;wbr&gt;&lt;/nobr&gt;:(&lt;/p&gt;&lt;p&gt;It would be SO awesome if everything was on virtual machines, and I could just "download a copy" of the testing system.&lt;/p&gt;</description>
<dc:creator>Alias</dc:creator>
<dc:date>2008-10-16T05:22:30+00:00</dc:date>
<dc:subject>journal</dc:subject>
</item>

<item rdf:about="http://use.perl.org/~Alias/journal/37670?from=rss">
<title>I shall be taking over IPC::Run henceforth</title>
<link>http://use.perl.org/~Alias/journal/37670?from=rss</link>
<description>&lt;p&gt;Because IPC::Run is needed by IPC::Cmd (which is eventually needed by things I care about) on Win32, I've decided (with coraline's permission) to take over maintenance of IPC::Run.&lt;/p&gt;&lt;p&gt;Although I know very little about file descriptors and platform specific issues around them, I do know quite a bit about maintaining CPAN packages, and 20-30 other smart people will now have commit too.&lt;/p&gt;&lt;p&gt;I've uploaded an initial dev release, which does the following.&lt;/p&gt;&lt;p&gt;1. Ignores the kill_kill failure on Win32 so that it is actually installable.&lt;/p&gt;&lt;p&gt;2. Ported the entire test suite from Test.pm to Test::More&lt;/p&gt;&lt;p&gt;3. Cleaned up some of the POD&lt;/p&gt;&lt;p&gt;4. Added proper $VERSIONs for all the classes, and made sure everything runs under use strict.&lt;/p&gt;&lt;p&gt;Because of the massive test suite changes, I fully expect it to blow up somewhere, so I imagine there will be a few more dev iterations before I get to a production release.&lt;/p&gt;</description>
<dc:creator>Alias</dc:creator>
<dc:date>2008-10-15T10:27:29+00:00</dc:date>
<dc:subject>journal</dc:subject>
</item>

<item rdf:about="http://use.perl.org/~Alias/journal/37656?from=rss">
<title>What is the longest Perl test suite you've ever seen?</title>
<link>http://use.perl.org/~Alias/journal/37656?from=rss</link>
<description>&lt;p&gt;&lt;code&gt;&lt;br&gt;ok( Perl::Dist::Strawberry-&amp;gt;default_machine-&amp;gt;run );&lt;br&gt;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;With this release of Strawberry, I've managed to find a reasonably safe way to write tests that generate distributions without wiping out your current installation.&lt;/p&gt;&lt;p&gt;One of these tests the default Perl::Dist::Machine for Strawberry.&lt;/p&gt;&lt;p&gt;A "distribution machine" takes the options for building a distribution and generates several variants of the same thing. In this case, the machine is handling the creation of the three 5.8.8, 5.10.0 and Portable variations of Strawberry.&lt;/p&gt;&lt;p&gt;For completeness, this process now has a test script of it's own.&lt;/p&gt;&lt;p&gt;The test takes around 4-5 hours to complete (each distribution takes about an hour and a half to build) (on top of the 4-5 hours for the three tests that do the single builds on their own).&lt;/p&gt;&lt;p&gt;It's so long that it's now pretty much pointless to run under $ENV{AUTOMATED_TESTING} because it's going to hammer the CPAN Testers hosts (it also generates around half a gig or so of temporary data).&lt;/p&gt;&lt;p&gt;Currently these distribution building tests only run under RELEASE_TESTING.&lt;/p&gt;&lt;p&gt;So my question to you...&lt;/p&gt;&lt;p&gt;Am I right in thinking this is the longest test on the CPAN?&lt;/p&gt;&lt;p&gt;And secondly, what's the longest (Perl) test suite you've ever seen?&lt;/p&gt;&lt;p&gt;For me, it's my current test suite at work, which is starting to head past an hour now.&lt;/p&gt;</description>
<dc:creator>Alias</dc:creator>
<dc:date>2008-10-14T00:41:35+00:00</dc:date>
<dc:subject>journal</dc:subject>
</item>

<item rdf:about="http://use.perl.org/~Alias/journal/37645?from=rss">
<title>Archive::Zip now compatible with Windows Explorer!</title>
<link>http://use.perl.org/~Alias/journal/37645?from=rss</link>
<description>&lt;p&gt;&lt;a href="http://svn.ali.as/cpan/releases/Archive-Zip-1.26.tar.gz"&gt;http://svn.ali.as/cpan/releases/Archive-Zip-1.26.tar.gz&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Happy Days!&lt;/p&gt;&lt;p&gt;I have (I think) FINALLY managed to squash the infamous &lt;i&gt;"Every directory looks like a file in Windows Explorer"&lt;/i&gt; in Archive::Zip 1.26 (just uploaded).&lt;/p&gt;&lt;p&gt;It appears the problem is that Windows Explorer expects a particular msdos-mode directory bit to be set, even if the file permissions are described in unix mode.&lt;/p&gt;&lt;p&gt;Fortunately, the bit in question is utterly irrelevant to unix-mode permissions, and so copying the approach of Info-Zip (the "zip" you probably use on UNIX hosts) Archive::Zip now sets BOTH the unix-mode directory bit AND the MS-DOS directory bit when creating directories.&lt;/p&gt;&lt;p&gt;For anyone who wants to reprocess existing ZIP files and repair them, you need to load the ZIP file in Archive::Zip, and do the following for each directory member.&lt;br&gt;&lt;code&gt;&lt;br&gt;$member-&amp;gt;{externalFileAttributes} |= 16;&lt;br&gt;&lt;/code&gt;&lt;br&gt;and then save the zip back over itself.&lt;/p&gt;&lt;p&gt;This has been a massively embarrassing bug, as it results in anything created by Archive::Zip looking "broken" when anyone opens it using the default bundled windows explorer ZIP handling.&lt;/p&gt;&lt;p&gt;But no longer.&lt;/p&gt;&lt;p&gt;The new Strawberry release will ship both with this fix bundled in it, and with the Strawberry&lt;nobr&gt; &lt;wbr&gt;&lt;/nobr&gt;.zip distributions having this fix applied to them.&lt;/p&gt;</description>
<dc:creator>Alias</dc:creator>
<dc:date>2008-10-12T14:10:20+00:00</dc:date>
<dc:subject>journal</dc:subject>
</item>

<item rdf:about="http://use.perl.org/~Alias/journal/37644?from=rss">
<title>Strawberry Perl October will be temporarily delayed</title>
<link>http://use.perl.org/~Alias/journal/37644?from=rss</link>
<description>&lt;p&gt;The new Perl::Dist releases now contain a far improved standard of testing than the previous versions, which should more-effectively catch changes to CPAN modules that cascade into the Strawberry Perl build process.&lt;/p&gt;&lt;p&gt;Unfortunately, testing this and catching changes from the last 3 months has taken somewhat longer than expected. While the full set (5.8.8, 5.10.0 and Portable) of build modes now pass for Vanilla (the stripped down experimental core release) testing of full Strawberry builds is not proceeding quickly enough to meet the release date of the 13th.&lt;/p&gt;&lt;p&gt;So I'm pushing back the release date until the 20th.&lt;/p&gt;&lt;p&gt;This also has the secondary benefit of providing a little more time for new versions of CPAN.pm and CPANPLUS to release, so that the full set of configure_requires-aware toolchain modules can be included for the first time (FINALLY solving the Module::Build situation and several other toolchain problems).&lt;/p&gt;</description>
<dc:creator>Alias</dc:creator>
<dc:date>2008-10-12T05:02:34+00:00</dc:date>
<dc:subject>journal</dc:subject>
</item>

<item rdf:about="http://use.perl.org/~Alias/journal/37614?from=rss">
<title>This is the sort of crap that "patch" test reports cause...</title>
<link>http://use.perl.org/~Alias/journal/37614?from=rss</link>
<description>&lt;p&gt;One of the modules that we rely on at work is PDF::API2, and I'm deeply grateful for the fact it exists. But we're also highly sensitive to it, so if it ever goes rotten we have some hard thinking to do. But lets ignore that part for now.&lt;/p&gt;&lt;p&gt;If you were considering writing a PDF application, and happened to be searching around for something to use, and you stumbled across the PDF::API2 module on CPAN &lt;a href="http://search.cpan.org/~areibens/PDF-API2-0.71.001/"&gt;you would see this&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Now, looking at that page, I can see that it's failed a third of all CPAN Testers reports, and it hasn't had a release of note in a while. To me, that looks like a fairly rotten not very well maintained module that I should avoid.&lt;/p&gt;&lt;p&gt;So lets look at it's CPAN Testers report page.&lt;/p&gt;&lt;p&gt;And if you want to see what it looks like with my settings, which only shows production releases of the module that have occurred on production versions of Perl (that is, in the real world) then &lt;a href="http://www.cpantesters.org/show/PDF-API2.html#PDF-API2-0.71.001?grade=1&amp;amp;perlmat=2&amp;amp;patches=2&amp;amp;oncpan=2&amp;amp;distmat=2"&gt;you see something like this&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;And what you'd see, if you only care about the real world, is that in the real world PDF::API2 has no less than 100% PASS rate (ignoring the 2 UNKNOWNs).&lt;/p&gt;&lt;p&gt;Not a single damned FAIL.&lt;/p&gt;&lt;p&gt;And yet looking at the graph on the CPAN testers page, you could be forgiven for thinking that the module is decending into rot.&lt;/p&gt;&lt;p&gt;The real situation is that the module works perfectly, unless you try to build it one of two dozen patched versions of Perl that nobody other than the P5P team will ever see, and which are probably already fixed.&lt;/p&gt;&lt;p&gt;It's all well and good that we run tests of patched versions and developer versions, and that we collect results from patched versions and developer versions.&lt;/p&gt;&lt;p&gt;But the poison is spreading and as a result we're staining the reputation of reputable modules in public forums.&lt;/p&gt;&lt;p&gt;EVERY feed of information coming out of the CPAN Testers database needs to be limited to production releases of modules on production versions of Perl BY DEFAULT, unless someone has a specific need to request otherwise.&lt;/p&gt;&lt;p&gt;This bullshit needs to end.&lt;/p&gt;</description>
<dc:creator>Alias</dc:creator>
<dc:date>2008-10-07T13:43:15+00:00</dc:date>
<dc:subject>journal</dc:subject>
</item>

<item rdf:about="http://use.perl.org/~Alias/journal/37565?from=rss">
<title>Strawberry Perl October Request for Features</title>
<link>http://use.perl.org/~Alias/journal/37565?from=rss</link>
<description>&lt;p&gt;Strawberry Perl is released quarterly and aimed to be available for download on the second Monday of the month (which also means Sunday afternoon in the Hawaii and the Americas)&lt;/p&gt;&lt;p&gt;This quarter, the target release date is October the 13th.&lt;/p&gt;&lt;p&gt;If anyone has any requests for new features to be integrated, please say so now.&lt;/p&gt;&lt;p&gt;Anyone responsible for a module that Strawberry bundles who wants to get new additions into the new release, now is the time to get your new production releases out so I can pick them up.&lt;/p&gt;&lt;p&gt;In the last two days, we've already seen major new releases of Module::Build and ExtUtils::MakeMaker, inching the toolchain closer to complete configure_requires support.&lt;/p&gt;&lt;p&gt;So far this release cycle, I've already flagged the addition of a zero-conf setup for CPANPLUS, so that it works out the box, and rejected any suggestions that I start adding patches to the official Perl release (even to support something as neat as Data::Alias or Module::Signature).&lt;/p&gt;&lt;p&gt;(Having spent a year battling RedHat Perl and it's patched craptasticness, there's no way that I'm patching Perl).&lt;/p&gt;&lt;p&gt;This release will also (hopefully) see the first full beta release of Portable Perl.&lt;/p&gt;</description>
<dc:creator>Alias</dc:creator>
<dc:date>2008-09-29T09:36:02+00:00</dc:date>
<dc:subject>journal</dc:subject>
</item>

<item rdf:about="http://use.perl.org/~Alias/journal/37534?from=rss">
<title>Padre to support "cloudfiguration"</title>
<link>http://use.perl.org/~Alias/journal/37534?from=rss</link>
<description>&lt;p&gt;One of Ultraedit's biggest strengths is the length to which you can configure it to act in the way you want.&lt;/p&gt;&lt;p&gt;But after 5-10 years of upgrades, I've found that it has become one of my biggest annoyances.&lt;/p&gt;&lt;p&gt;The problem is that if you use multiple computers, there's no way that you can use the same highly-personalised configuration across multiple systems (let alone multiple operating systems).&lt;/p&gt;&lt;p&gt;Since I've been gifted with the opportunity of getting in at the ground floor on Padre, this is something I plan to have a serious shot at fixing.&lt;/p&gt;&lt;p&gt;With a few more tweaks to ORLite to support working with SQLite pragmas properly and to allow for automated schema migration, SVN Padre will now store a whole range of configuration and state information inside an internal SQLite database.&lt;/p&gt;&lt;p&gt;The key point here is that the configuration will be split in half, so that there is an intrinsic understanding of what is user-specific configuration, and what is host-specific configuration.&lt;/p&gt;&lt;p&gt;The user-specific parts go into your config file, the host-specific parts go into the SQLite data store.&lt;/p&gt;&lt;p&gt;The goal is to allow the issues related to the host to stay with the host, and for the user-specific parts to sync with the interweb.&lt;/p&gt;&lt;p&gt;It's configuration for the cloud, or "Cloudfiguration" if you will (Trademarked!)&lt;/p&gt;&lt;p&gt;So now whether you are on a Windows machine at work, or a Linux machine at home, or a Mac laptop on the road, the same user preferences will follow you around from install to install. Changes made on one Padre install (for example, if you want your comments pink instead of grey) appear auto-magically in the other Padre installs next time you start them.&lt;/p&gt;&lt;p&gt;I'm about half way towards the full separation needed to make this work. The only host-specific stuff left in the configuration file at the moment are the list of bookmarks and projects and a couple of "last blah you had open" values.&lt;/p&gt;</description>
<dc:creator>Alias</dc:creator>
<dc:date>2008-09-25T01:45:57+00:00</dc:date>
<dc:subject>journal</dc:subject>
</item>

<item rdf:about="http://use.perl.org/~Alias/journal/37523?from=rss">
<title>The Quest for "Perfect" Tools</title>
<link>http://use.perl.org/~Alias/journal/37523?from=rss</link>
<description>&lt;p&gt;Both Gabor and Herbert have been discussing what they see as desirable in an editor.&lt;/p&gt;&lt;p&gt;I think most of the specifics of what this tool should do or that tool should do are largely irrelevant, because as a user interface we're facing what is fundamentally an "Open Problem".&lt;/p&gt;&lt;p&gt;What we can do, however, is identify the underlying effects that we need to achieve in the creation of tools for wide audiences, and then refer back to effects when looking at individual features.&lt;/p&gt;&lt;p&gt;I tend to see the creation of these wide-availability user-oriented tools as simultaneously enforce three main principles.&lt;/p&gt;&lt;p&gt;1. To allow the user to impose their will on the machine.&lt;/p&gt;&lt;p&gt;2. To educate the human on both the tool and the machine.&lt;/p&gt;&lt;p&gt;3. To optimise the above for both the human and the machine.&lt;/p&gt;&lt;p&gt;Being an open problem, any progress towards achieving these principles is going to be loaded with competing tensions and involve endless work.&lt;/p&gt;&lt;p&gt;But there is a certain symmetry between the challenge of optimising the machine elements and optimising the human elements.&lt;/p&gt;&lt;p&gt;Given any task on either the machine or human, we should first try to aim for an O(0) result, then an O(1) result, then O(log N), then O(N), and so on.&lt;/p&gt;&lt;p&gt;If our tool can achieve such perfect encapsulation of a concept that the user can impose their will on the machine without the need to be educated about the concept at all, then we should do so. If we can go further and know perfectly if and when the human needs to apply that concept, we should just do it for them. O(0) results for both education and imposition.&lt;/p&gt;&lt;p&gt;If the encapsulation is not perfect and will break down occasionally, then we should move on to implementing additional O(1) options for education such as well worded error messages that point directly to the appropriate education material and ways to tweak the imposition of the concept that allow for O(1) "Always/Never do it this way", or a further fallback to O(log N) "Always/Never for this website" or to O(N) "Always ask me".&lt;/p&gt;&lt;p&gt;And of course, achieving this result lazily is preferable to doing so up front (so you in aggregate you only require a partial subset to suffer the fallbacks).&lt;/p&gt;&lt;p&gt;You can optimise the machine along similar lines.&lt;/p&gt;&lt;p&gt;The ideal O(0) situation is to make it so the machine never has to address a problem, because you can prove in advance that the problem has always either already been addressed, or will always be addressed later.&lt;/p&gt;&lt;p&gt;Failing that, you try to address the problem O(1) with something like a constant (lazily if possible), or O(log N) with caching or various other methodologies, and so on, and so forth.&lt;/p&gt;&lt;p&gt;Most of the tools we use push up against one aspect of optimisation or the other, sometimes with sacrifices.&lt;/p&gt;&lt;p&gt;For example, Perl::Critic helps both helps educate developers and reduce the time cost of bugs and weird uses of Perl, but at the expense of having to maintain nocritic entries permanently, which themselves have education and time costs.&lt;/p&gt;&lt;p&gt;And the goal of the Perl Critic team is that the education and time cost of using Perl::Critic is significantly less than the education and time costs of NOT using Perl::Critic.&lt;/p&gt;&lt;p&gt;When it comes to editors, what annoys me the most is a failure to appreciate the differentiation between languages and deal with them correctly.&lt;/p&gt;&lt;p&gt;By aiming for "support" every damned language in the universe, general editors like my favoured Ultraedit create LOSSES of efficiently.&lt;/p&gt;&lt;p&gt;Even something as simple as a configuration option for "Always strip trailing spaces on save" can have huge problems, because (for example) you can't safely strip all trailing whitespace from Perl, because trailing whitespace in POD can be significant.&lt;/p&gt;&lt;p&gt;And since most of these editors either don't deal with the language distinctions properly, and then worse don't make the configuration option language-dependant, you end up with a feature that is worse than useless, because it will silently damage your code (some of the time).&lt;/p&gt;&lt;p&gt;This leads to the principle that wherever possible you should implement your software language tools in the same language as the one the tools works on. The code has better understand of it's own language, and the humans writing the tools are already educated on the specifics of the language.&lt;/p&gt;&lt;p&gt;Contrasting against this in the case of editors is the sheer expense of writing all the support infrastructure for an editor.&lt;/p&gt;&lt;p&gt;Resolving the tension between the benefits and the costs leads, I suspect to two optimal solutions.&lt;/p&gt;&lt;p&gt;1. Hugely bloated tools you already know, but struggle to deal with language issues well. (Emacs, Eclipse)&lt;/p&gt;&lt;p&gt;2. Language-specific tools that work well, but require an investment in training (perlcritic)&lt;/p&gt;&lt;p&gt;I would imagine that generalist programmers will be naturally attracted to the former, while language specialists will be naturally attracted to the latter.&lt;/p&gt;&lt;p&gt;As a member of the latter type, the challenge for Padre is that it needs to be SO good as a tool for working on Perl code that it is worth switching to it from your general purpose editor.&lt;/p&gt;&lt;p&gt;So this then, is what I plan to use as my guide for hacking on Padre.&lt;/p&gt;&lt;p&gt;I want to be in the position where vim users, and Emacs users, and Eclipse users, and Ultraedit users, are all switching over to Padre "just for a while" to do some specific task.&lt;/p&gt;&lt;p&gt;I want Padre to be SO good at working with Perl, and SO good at helping you impose your will on your code, that you'll hate your general purpose editor for not being good enough and making you change.&lt;/p&gt;&lt;p&gt;I want to achieve this WITHOUT pandering to the general purpose editors and implementing support for their magic project file formats, and their magic embedded comment formats, and all the other crap that only exists because they don't understand Perl well enough to Just Work.&lt;/p&gt;&lt;p&gt;And I totally expect the language generalists are going to hate it.&lt;/p&gt;&lt;p&gt;I write Perl. Screw compatibility.&lt;/p&gt;</description>
<dc:creator>Alias</dc:creator>
<dc:date>2008-09-24T05:16:18+00:00</dc:date>
<dc:subject>journal</dc:subject>
</item>

<item rdf:about="http://use.perl.org/~Alias/journal/37490?from=rss">
<title>ORLite 0.13 and ORLite::Mirror 0.07. Now they do less!</title>
<link>http://use.perl.org/~Alias/journal/37490?from=rss</link>
<description>&lt;p&gt;I really want to use ORLite as the interface to the SQLite datastore for Padre, since it's so awesomely appropriate for that sort of thing.&lt;/p&gt;&lt;p&gt;But the problem is that Padre currently uses manual DBI code, and moving directly to fully abstracted object models is hard.&lt;/p&gt;&lt;p&gt;What I'd really like to start with is to move to the SQLite-specific DBI wrapper base class that ORLite provides (which rocks, especially for transactions) but without generating all the automagic ORM tables.&lt;/p&gt;&lt;p&gt;So now you can do the following and you get just the base layer.&lt;br&gt;&lt;code&gt;&lt;br&gt;package Padre::DB;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;use ORLite {&lt;br&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; file   =&amp;gt; '/some/file.sqlite',&lt;br&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; tables =&amp;gt; 0,&lt;br&gt;};&lt;br&gt;&lt;/code&gt;&lt;br&gt;Thus, you now have an easier path for porting regular DBI code towards the object model, but don't have to go all the way immediately.&lt;/p&gt;&lt;p&gt;Pushing the concept out to the remote case, you can also do the same thing in ORLite::Mirror as well.&lt;br&gt;&lt;code&gt;&lt;br&gt;use ORLite::Mirror {&lt;br&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; url     =&amp;gt; 'http://cpants.perl.org/static/cpants_all.db.gz',&lt;br&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; package =&amp;gt; 'CPANTS',&lt;br&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; tables  =&amp;gt; 0,&lt;br&gt;};&lt;br&gt;&lt;/code&gt;&lt;br&gt;This lets you create a super simple DBI-like database class for a remote database and run ad-hoc queries, but without having to go the whole hog of generating and using an object model.&lt;/p&gt;&lt;p&gt;And because ORLite has almost no dependencies, using such a limited subset of features isn't bloating dependencies. You just aren't using the 300 or so lines of ORLite code that generates the model.&lt;/p&gt;</description>
<dc:creator>Alias</dc:creator>
<dc:date>2008-09-19T05:07:58+00:00</dc:date>
<dc:subject>journal</dc:subject>
</item>

<item rdf:about="http://use.perl.org/~Alias/journal/37477?from=rss">
<title>Vista support boosting Strawberry downloads</title>
<link>http://use.perl.org/~Alias/journal/37477?from=rss</link>
<description>&lt;p&gt;While I knew that Vista support for going to be a big issue for Strawberry, I was never really sure quite how big.&lt;/p&gt;&lt;p&gt;Preliminary numbers from the fairly crude Google Code download counters suggests an increase of around 10%. That's probably not a direct measure of Perl Vista users, but rather approximates a measure of how many people I was previously scaring off with the "Not everything works on Vista" warnings.&lt;/p&gt;&lt;p&gt;Average downloads for 5.10.0.1 over 13 weeks: 1800/week&lt;/p&gt;&lt;p&gt;Average downloads for 5.10.0.2 after 5 weeks: 2000/week&lt;/p&gt;&lt;p&gt;Of course, statistical errors probably account for more than 10% error margin.&lt;/p&gt;&lt;p&gt;But hey, we just ticked over 2k/week downloads, so time to celebrate a bit&lt;nobr&gt; &lt;wbr&gt;&lt;/nobr&gt;:)&lt;/p&gt;</description>
<dc:creator>Alias</dc:creator>
<dc:date>2008-09-18T06:33:16+00:00</dc:date>
<dc:subject>journal</dc:subject>
</item>

<item rdf:about="http://use.perl.org/~Alias/journal/37467?from=rss">
<title>PPI integration added to Padre</title>
<link>http://use.perl.org/~Alias/journal/37467?from=rss</link>
<description>&lt;p&gt;Over the last couple of days, I've been doing quite a bit of hacking on Padre.&lt;/p&gt;&lt;p&gt;Apart from fixing random things that annoy me and rearranging menus, I've been concentrating most of my time on the new Padre::Document classes and using the document model to start on PPI integration.&lt;/p&gt;&lt;p&gt;The result is a bit (ok, very) rough at the moment, but I'm starting to land the first interesting features.&lt;/p&gt;&lt;p&gt;So in the next release, Padre should have a "Perl" menu that contains not only the existing Run menu entries, but new and actually-useful things like "Find that annoying unmatched brace that I can't see" and (if I have time) "Find that annoying unterminated quote that I can't see".&lt;/p&gt;&lt;p&gt;As usual, progress on Padre is continuous and the design is in flux, but in the next couple of versions I think we're really going to start to see Padre move past being a Notepad replacement and also act as a vehicle for a variety of handy PPI-based queries, transforms and other functionality (at least on a file by file basis).&lt;/p&gt;&lt;p&gt;At which point Padre becomes the editor you briefly switch over to do some things you can't do in your normal editor.&lt;/p&gt;&lt;p&gt;Which is at least a start towards world domination&lt;nobr&gt; &lt;wbr&gt;&lt;/nobr&gt;:)&lt;/p&gt;</description>
<dc:creator>Alias</dc:creator>
<dc:date>2008-09-17T01:40:43+00:00</dc:date>
<dc:subject>journal</dc:subject>
</item>

<item rdf:about="http://use.perl.org/~Alias/journal/37418?from=rss">
<title>A cache is a leak is a cache</title>
<link>http://use.perl.org/~Alias/journal/37418?from=rss</link>
<description>&lt;p&gt;&lt;i&gt;Before it sounds like I'm just bashing Template Toolkit, let me first congratulate Andy on reaching a result of 100% PASS (minus one FAIL from a weird compiler on Irix) on CPAN Testers. I've been hugely impressed with the structural clean up that has taken place over the last six months.&lt;/i&gt;&lt;/p&gt;&lt;p&gt;On our current 8-machine web cluster our primary limitation has traditionally been the memory usage of the application. In fact, we've been forced in the past to requisition additional web front ends simply because the front-ends are hitting their memory limits (our load and peaks are EXTREMELY regular and predictable, so we can often run close to our capacity limit relatively safely).&lt;/p&gt;&lt;p&gt;Much of this comes down to the problem of simply doing too much loading after the Apache children have forked off (we run at around 30 children per host). One of the things I have been doing in fits and starts since I started working here is trying to identify these items and shifting them before the fork.&lt;/p&gt;&lt;p&gt;We've already shifted a number of overlooked modules into the Apache startup. Most of them were missed because some other module is attempting to behave optimally in the single-process context and delay loading code it doesn't need.&lt;/p&gt;&lt;p&gt;I'd argue that any modern web-related module that don't realise that there is two completely different memory-load contexts they need to care about was out of date 5 years ago.&lt;/p&gt;&lt;p&gt;If you own a module where this problem might apply, you should take a look at &lt;a href="http://search.cpan.org/perldoc?prefork"&gt;prefork&lt;/a&gt; to make your modules more friendly towards mod_perl and other forking environments.&lt;/p&gt;&lt;p&gt;We've also discovered half a gig per host by shifting a number of configuration-type database requests into the startup process, and refactoring the database-tied objects to be smart enough to know to disconnect and clean up their DBI connections and reconnect them after the fork (DBI and Oracle don't survive forking).&lt;/p&gt;&lt;p&gt;Of course, THAT fix uncovered the reason why we were loading 20meg of data per host after the fork in the first place. A horrible segfaulty bug in RHEL4 something to do with a custom RedHat patch. THAT spawned off a whole "time to bite the bullet and upgrade to RHEL5" process...&lt;/p&gt;&lt;p&gt;After a conversation with Ingy in Seattle on my recent tour, my next approach has been to re-examine Template Toolkit behaviour in our system. Originally I had just planned to see if I could pre-cache Template objects before the fork, to remove the cost of loading the compiled templates from disk.&lt;/p&gt;&lt;p&gt;What I unexpectedly uncovered was a giant memory leak hiding in plain sight in the form of the default &lt;a href="http://search.cpan.org/perldoc?Template::Provider"&gt;Template::Provider&lt;/a&gt; cache.&lt;/p&gt;&lt;p&gt;Template Toolkit provides two levels of caching out of the box.&lt;/p&gt;&lt;p&gt;To save the hugely expensive parsing and compile costs there's the awesome disk compile cache, where the template is stored in the form of the code that constructs the appropriate Template::Document object. Since it needs disk space and so can't reliably auto-configure, this is disabled by default.&lt;/p&gt;&lt;p&gt;In addition to this, there's a more dangerous enabled-by-default infinite-by-default run-time memory cache for templates. In other words, by default the memory usage of a Template Toolkit application will grow over time as it uses different templates, bound only by the total size of your template library.&lt;/p&gt;&lt;p&gt;And this is where things go can a bit pear shaped. Built in memory-cache support is just fine, but the whole "infinite-by-default" makes the feature a bit sinister, and "enabled-by-default" means that it's both sinister &lt;b&gt;and&lt;/b&gt; sneaky. If you use Template.pm as a typical user, you'll likely never read through the docs for Template::Provider, and if you happen to miss the impact of the short phrase "(default: undef - cache all)" then there's a good chance your mod_perl application is probably wasting a bunch of memory it doesn't need to be.&lt;/p&gt;&lt;p&gt;Built in and enabled-by-default caches like this a memory leak waiting to happen. If you have a lot of templates to load (like we do), on top of the Apache child overhead multiplying it by an order of magnitude or more (like us) then you are going to blow immense amounts of memory before you notice.&lt;/p&gt;&lt;p&gt;Because it's enabled by default, it's also very easy for it to have been enabled in inappropriate places accidentally (or on purpose) while the application was small and the cache has little impact, only exploding long after the person that wrote it in the first place has gone.&lt;/p&gt;&lt;p&gt;It's tricky for mere mortals to maintain performance-impacting features that need to be hand-tuned and have zero lines of code to have turned on.&lt;/p&gt;&lt;p&gt;A similar example happened last year with one of the email address parsing modules on CPAN. The complexity of email addresses meant that the parsing code was (necesarily) slow, and so an (always-enabled infinite-size) cache was added to speed up the parser.&lt;/p&gt;&lt;p&gt;The system didn't blow up for us until we introduced simulated-spam testing, throwing tons of random junk or semi-junk address data at the email address parser (via throwing mail at a higher-level layer). In the face of huge volumes of semi-random or highly diverse input, the cache magically transformed into a memory leak, growing without limit until the process was killed by the operating system (this has since been fixed on CPAN, the module now requires the cache to be explicitly turned on).&lt;/p&gt;&lt;p&gt;To deal with the Template Toolkit "leak", since I want a different style of caching to the built-in cache anyways, I've created &lt;a href="http://search.cpan.org/perldoc?Template::Provider::Preload"&gt;Template::Provider::Preload&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;This is an alternate provider that adds a second specific pre-fork cache to the provider, and a param&amp;amp;method that will scan your INCLUDE_PATH and load all of your templates into the appropriate cache.&lt;/p&gt;&lt;p&gt;I'm still polishing it, but my goal is to allow the implementation of a range of different caching strategies, such as loading all your common templates but not the rare ones or allowing for full caching without the need for a disk-based compile cache in high-security servers.&lt;/p&gt;&lt;p&gt;At some point, I'd also like to allow for some pre-rolled common strategies that expand to a full set of cache param settings, like "minimum cpu" or "minimum memory".&lt;/p&gt;&lt;p&gt;To use the preloading provider, you do something like the following...&lt;br&gt;&lt;code&gt;&lt;br&gt;my $template = Template-&amp;gt;new(&lt;br&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; # Your normal TT args&lt;br&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; LOAD_TEMPLATES =&amp;gt; [&lt;br&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Template::Provider::Preload-&amp;gt;new(&lt;br&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; PRECACHE     =&amp;gt; 1,&lt;br&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; PREFETCH     =&amp;gt; '*.tt',&lt;br&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; INCLUDE_PATH =&amp;gt; 'my/templates',&lt;br&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; COMPILE_DIR  =&amp;gt; 'my/cache',&lt;br&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; );&lt;br&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ],&lt;br&gt;);&lt;br&gt;&lt;/code&gt;&lt;/p&gt;</description>
<dc:creator>Alias</dc:creator>
<dc:date>2008-09-12T06:56:02+00:00</dc:date>
<dc:subject>journal</dc:subject>
</item>

<item rdf:about="http://use.perl.org/~Alias/journal/37386?from=rss">
<title>CPAN::Indexer::Mirror - Enabling mirror auto-discovery</title>
<link>http://use.perl.org/~Alias/journal/37386?from=rss</link>
<description>&lt;p&gt;&lt;a href="http://search.cpan.org/perldoc?CPAN::Indexer::Mirror"&gt;CPAN::Indexer::Mirror&lt;/a&gt; implements a long-awaited (by me at least) chunk of functionality for the PAUSE indexer.&lt;/p&gt;&lt;p&gt;Specifically, it creates &lt;i&gt;mirror.yaml&lt;/i&gt; and &lt;i&gt;mirror.json&lt;/i&gt; files which contain something like the following.&lt;br&gt;&lt;code&gt;&lt;br&gt;---&lt;br&gt;version: 1.0&lt;br&gt;name: JavaScript Archive Network&lt;br&gt;master: http://openjsan.org/&lt;br&gt;timestamp: 2008-08-15T21:17:52Z&lt;br&gt;mirrors:&lt;br&gt;
&amp;nbsp; &amp;nbsp; - http://jsan.caseywest.com/&lt;br&gt;
&amp;nbsp; &amp;nbsp; - http://back.openjsan.org/&lt;br&gt;
&amp;nbsp; &amp;nbsp; - http://jsan.jp/&lt;br&gt;
&amp;nbsp; &amp;nbsp; - http://jsan.nc.cyut.edu.tw/&lt;br&gt;
&amp;nbsp; &amp;nbsp; - http://jsan.stu.edu.tw/&lt;br&gt;
&amp;nbsp; &amp;nbsp; - http://www.jsan.de/&lt;br&gt;
&amp;nbsp; &amp;nbsp; - http://jsan.log.pt/&lt;br&gt;
&amp;nbsp; &amp;nbsp; - http://jsan.davecardwell.co.uk/&lt;br&gt;
&amp;nbsp; &amp;nbsp; - http://jsan.clueball.com/&lt;br&gt;
&amp;nbsp; &amp;nbsp; - http://jsan.woobling.org/&lt;br&gt;
&amp;nbsp; &amp;nbsp; - http://jsan.develooper.com/&lt;br&gt;
&amp;nbsp; &amp;nbsp; - http://pair.openjsan.org/&lt;br&gt;
&amp;nbsp; &amp;nbsp; - http://jsan.phunnel.org/&lt;br&gt;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;The file contains the absolute minimum needed for a client to work out if a mirror URI is valid, what it is mirroring, how long it has been since the last syncronisation (or at least since the last indexer run) and a list of mirrors that it can probe to look for a better option than the one it is currently running.&lt;/p&gt;&lt;p&gt;The &lt;i&gt;mirror.json&lt;/i&gt; file is identical to the YAML version, but encoded in JSON instead of YAML, making it easier for webby applications to do similar mirror detection.&lt;/p&gt;&lt;p&gt;On the client side, a matching &lt;a href="http://search.cpan.org/perldoc?Mirror::YAML"&gt;Mirror::YAML&lt;/a&gt; module (currently out of date, but being updated) implements the client logic needed to validate, check for updated mirror lists, and scan for the "best" mirror (serially).&lt;/p&gt;&lt;p&gt;More advanced modules, based on something like &lt;a href="http://search.cpan.org/perldoc?HTTP::Client::Parallel"&gt;HTTP::Client::Parallel&lt;/a&gt; would give the ability to do the same mirror selection functions, but would call a number of mirrors at the same time, making the selection of a "good" mirror a completely automated (and reasonably fast) process.&lt;/p&gt;&lt;p&gt;Amoungst other features, this should finally allow us to do away with the (defunct) method of asking a user what mirror to use, when most of the time the user doesn't have any idea which one to use either.&lt;/p&gt;</description>
<dc:creator>Alias</dc:creator>
<dc:date>2008-09-08T04:07:28+00:00</dc:date>
<dc:subject>journal</dc:subject>
</item>

<item rdf:about="http://use.perl.org/~Alias/journal/37326?from=rss">
<title>Imager::Search 1.00 - Image recognition at 5 frames a second</title>
<link>http://use.perl.org/~Alias/journal/37326?from=rss</link>
<description>&lt;p&gt;A couple of years ago, I first came up with the idea of doing basic image recognition using the Perl regular expression engine.&lt;/p&gt;&lt;p&gt;Using Imager for the underying cross-platform image handling, I got a basic first version working by converting each pixel to a HTML colour code, building the image string and a search regex, and then converting the character match positions back into pixel terms.&lt;/p&gt;&lt;p&gt;And it worked great, until I tried to scale it up to the type of image you might actually want to look at the most, screen shots. At the time I needed to monitor OS X machines for any unexpected popups, because these were advertising displays, and that sort of thing is embarrasing.&lt;/p&gt;&lt;p&gt;Once I tried to apply the search technique to something the size of a 1024x768 screenshot, the overheads of transforming a million pixels in Perl started to bite hard.&lt;/p&gt;&lt;p&gt;While the regexp search might take 0.01 second, building the search image was taking something like 10 seconds. Just barely acceptable in my passive monitoring case, but not good for much else (like, say, writing a solitaire bot).&lt;/p&gt;&lt;p&gt;While on the flight home from YAPC::EU (via Iceland) I finally spent some time reorganising the search code into a driver API, and trying what I think is a much better approach.&lt;/p&gt;&lt;p&gt;If the most expensive part of the job is converting the search image, why not use a NATIVE image format for which fast C encoding already exists, build it in memory and then regexp it there. We shift more work into generating the search image, and a lot more work in working out where the hell the match is in pixel terms, but for hopefully a large net win.&lt;/p&gt;&lt;p&gt;And it turns out that 24-bit Windows BMP files make for a reasonably decent search image format. Of course there's the small problem of the scanlines going from bottom to top, and the fact the red/green/blue bytes are around the other way, and the small matter of each scanline being aligned in dword terms, resulting in between 0 and 3 useless bytes at the end of each line depending on the width of the line, but it turns out that with some funky post-match math , judicious use of quotemeta, and some post-processing of matches to remove false positives, you can generate a search expression that will quite comfortably search for an image inside of a native Windows BMP file.&lt;/p&gt;&lt;p&gt;Whereas the old time to capture and prepare a 1024x768 search image as #RRGGBB was around 10-12 seconds, the time to capture and prepare a 1024x768 native BMP file is in the vicinity of 150 &lt;b&gt;milliseconds&lt;/b&gt;, which is almost two orders of magnitude faster.&lt;/p&gt;&lt;p&gt;Combining a 0.15 second capture cost with a 0.01 second regexp cost and another 0.01 to generate the search expression, the result is that using the new default "BMP24" driver, &lt;a href="http://search.cpan.org/perldoc?Imager::Search"&gt;Imager::Search&lt;/a&gt; can monitor the desktop for images at around 5 frames a second!&lt;/p&gt;&lt;p&gt;This has the makings of a truly awesome Solitaire bot, or maybe even something like pinball...&lt;/p&gt;&lt;p&gt;This has got me thinking though, could I make it even faster again?&lt;/p&gt;&lt;p&gt;I'm now pondering the idea of a platform-specific Windows or X11 driver that would bypass Imager for the capture step altogether, and instead generate a search expression for whatever the raw byte string is that comes out of the screen capture system call...&lt;/p&gt;&lt;p&gt;The other major addition I need to add is to support transparency (1-bit transparency for now anyways) in the search image.&lt;/p&gt;&lt;p&gt;But for now, I'm happy enough with the new fast Imager::Search version to stamp it as 1.00 and release it.&lt;/p&gt;</description>
<dc:creator>Alias</dc:creator>
<dc:date>2008-09-02T03:54:34+00:00</dc:date>
<dc:subject>journal</dc:subject>
</item>

<item rdf:about="http://use.perl.org/~Alias/journal/37175?from=rss">
<title>In search of a good Perl shell (by my standards)</title>
<link>http://use.perl.org/~Alias/journal/37175?from=rss</link>
<description>&lt;p&gt;In response to the release of Perl::Shell, Shawn Moore had some fairly nasty initial feedback he chose to post to cpanrantings.&lt;/p&gt;&lt;p&gt;So I thought I should at least explain why I created it (in a location that won't be polluting).&lt;/p&gt;&lt;p&gt;Like with many areas pioneered by more advanced users, my main problem is mostly with Windows support.&lt;/p&gt;&lt;p&gt;Lets start with Devel::REPL, and why I didn't just use it instead.&lt;/p&gt;&lt;p&gt;Partly, this is my fault. For some reason, I thought Devel::REPL used Coro, so when "testing" Devel::REPL I first tried to install Coro, which won't build on Windows at all.&lt;/p&gt;&lt;p&gt;Of course, because I was completely mistaken about Devel::REPL I missed the fact that Devel::REPL installs just fine on Win32. I really should have known better, since Matt Trout himself uses Windows.&lt;/p&gt;&lt;p&gt;The only problem with DeveL::REPL is that the perl shell it provides "re.pl" doesn't work on Windows as documented, because the&lt;nobr&gt; &lt;wbr&gt;&lt;/nobr&gt;.pl extension is associated with who knows what.&lt;/p&gt;&lt;p&gt;Devel::REPL also has some other minor problems, such as using vstrings in use lines (which throws a warning), allowing incomplete statements (although a few patches from me to the PPI functionality should fix that) and odd visual behaviour when you print something without a trailing newline.&lt;/p&gt;&lt;p&gt;Frankly, Python did the shell usability things really really well, and I would personally would just like a clone of the way they do it.&lt;/p&gt;&lt;p&gt;Looking at this situation, I'll probably end up ditching Perl::Shell, and moving "perlthon" to App::Perlthon instead, since it should be a fairly lightweight wrapper around Devel::REPL, once some bugs in Devel::REPL are fixed.&lt;/p&gt;&lt;p&gt;As for the other alternatives suggested by Shawn Moore, the field is a bit thinner.&lt;/p&gt;&lt;p&gt;Shell::Perl doesn't work on Windows, so is irrelevant.&lt;/p&gt;&lt;p&gt;App::Perl does install, and it's iperl shell does SORT of work, but all the prompts spew weird crap to the command line. It looks like maybe it's coloured ansi gone bad.&lt;/p&gt;&lt;p&gt;perlconsole installs on Win32, then spews some warnings that stink of Unix biases, and doesn't support implicit multi-line statements, plus is kinda noisy.&lt;/p&gt;&lt;p&gt;Zoidberg I have never heard of, and would never have found in a CPAN search, and also doesn't work on Windows.&lt;/p&gt;&lt;p&gt;Finally, Sepia's Makefile.PL starts with the particularly inspiring comment...&lt;br&gt;&lt;code&gt;&lt;br&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; To actually use this package in a useful way, you probably need to&lt;br&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; move the Emacs Lisp files somewhere.  Where will depend on your&lt;br&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; installation.&lt;br&gt;&lt;/code&gt;&lt;nobr&gt; &lt;wbr&gt;&lt;/nobr&gt;... and then starts asking questions about optional features I have no idea about.&lt;/p&gt;&lt;p&gt;It installs, but at that point I actually looked at the search.cpan page for Sepia, to discover it isn't even a shell at all, but some kind of extension for an editor I don't even use. So the message makes a bit more sense, but the module is still useless to me.&lt;/p&gt;&lt;p&gt;So apart from Devel::REPL, they are all entirely useless from a cross-platform perspective (but obviously more useful if you don't mind being Unix-specific).&lt;/p&gt;&lt;p&gt;Apart from the initial mistake of misjudging Devel::REPL, it would seem there WAS room for a new shell.&lt;/p&gt;&lt;p&gt;I agree that with Devel::REPL, there's probably no need for another complete standalone shell. Instead, I'll probably just fix the various annoying bugs in Devel::REPL, and then rewrite "perlthon" around it instead.&lt;/p&gt;&lt;p&gt;Unless of course, Devel::REPL wanted to use it instead of the current re.pl script...&lt;/p&gt;</description>
<dc:creator>Alias</dc:creator>
<dc:date>2008-08-14T00:42:55+00:00</dc:date>
<dc:subject>journal</dc:subject>
</item>

<item rdf:about="http://use.perl.org/~Alias/journal/37155?from=rss">
<title>Strawberry Perl 5.10.0.2 August 2008 released for YAPC::EU</title>
<link>http://use.perl.org/~Alias/journal/37155?from=rss</link>
<description>&lt;p&gt;&lt;a href="http://strawberry-perl.googlecode.com/files/strawberry-perl-5.10.0.2.exe"&gt;strawberry-perl-5.10.0.2.exe (Strawberry Perl 5.10.0.2 Installer)&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://strawberry-perl.googlecode.com/files/strawberry-perl-5.8.8.2.exe"&gt;strawberry-perl-5.8.8.2.exe (Strawberry Perl 5.8.8.2 Installer)&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Due to the work on the Perl on a Stick grant, not a lot in terms of man hours has been done on the main &lt;a href="http://strawberryperl.com/"&gt;Strawberry Perl&lt;/a&gt; distribution in this quarter (and it has also delayed the release by about a month due to some major modifications to &lt;a href="http://search.cpan.org/perldoc?Perl::Dist"&gt;Perl::Dist&lt;/a&gt;).&lt;/p&gt;&lt;p&gt;Apart from the usual updating of the toolchain and bundled modules to the current versions, this release adds one major and one minor feature.&lt;/p&gt;&lt;p&gt;Most importantly, the dreaded Vista GCC compatibilities are now finally killed, once and for all. This release contains the (long awaited) production GCC release with the MinGW team's fix for the Vista incompatibility bug. In addition to this, I have a number of reportes now that the Vista Service Pack 1 update also repairs this bug for previous Strawberry Perl releases.&lt;/p&gt;&lt;p&gt;The other minor change added in this release is the addition of &lt;a href="http://search.cpan.org/perldoc?Math::Pari"&gt;Math::Pari&lt;/a&gt; to the list of modules bundled in the default release. This is not useful directly, but means that an important and difficult dependency of many crypto-related modules is now reliably available.&lt;/p&gt;&lt;p&gt;This should result in much better ability for Win32 CPAN Testers machines to test the various crypto modules, which should subsequently help improve the deplorable state of the Perl crypto modules on Windows platforms.&lt;/p&gt;&lt;p&gt;Although this release does not come in a Portable version (yet), the Perl::Dist infrastructure needed to produce Portable releases automatically at the same time as the regular releases is now largely completed.&lt;/p&gt;&lt;p&gt;So the new limited edition black "Perl on a Perl on Stick Stick" USB flash drives should work correctly on Vista machines as well.&lt;/p&gt;&lt;p&gt;With this release out of the way, I get to concentrate on finishing talks for YAPC::EU. Good thing too, since I leave for Copenhagen tomorrow.&lt;/p&gt;&lt;p&gt;As usual, if there's any immediate feedback or something isn't working correctly, please post it below.&lt;/p&gt;</description>
<dc:creator>Alias</dc:creator>
<dc:date>2008-08-11T16:53:06+00:00</dc:date>
<dc:subject>journal</dc:subject>
</item>

<item rdf:about="http://use.perl.org/~Alias/journal/37105?from=rss">
<title>Portable::Dist - Perl on a Stick Phase 2 completed</title>
<link>http://use.perl.org/~Alias/journal/37105?from=rss</link>
<description>&lt;p&gt;I'm happy to report that phase 2 of the Perl on a Stick grant is now completed.&lt;/p&gt;&lt;p&gt;This phase required the creation of code that would take an existing distribution, and make the necesary changes to convert that distribution into a portable distribution/&lt;/p&gt;&lt;p&gt;This now works ok, and given the interest in a future OS X Perl on a Stick I've also kept it completely cross platform (or so I believe).&lt;/p&gt;&lt;p&gt;&lt;a href="http://search.cpan.org/perldoc?Portable::Dist"&gt;Portable::Dist&lt;/a&gt; is available on the CPAN if you want to see the specific changes needed to make a distribution portable.&lt;/p&gt;&lt;p&gt;This brings me to Phase 3 - Integration, in which I will be integrating the use of Portable::Dist into the &lt;a href="http://search.cpan.org/perldoc?Perl::Dist"&gt;Perl::Dist&lt;/a&gt; distribution building system, so that in future we can built Portable versions of ANY distribution at on the additional cost an extra compile run.&lt;/p&gt;&lt;p&gt;Having now completed basically all the enbugging, I shall also be moving more agressively on the debugging front.&lt;/p&gt;</description>
<dc:creator>Alias</dc:creator>
<dc:date>2008-08-05T21:29:54+00:00</dc:date>
<dc:subject>journal</dc:subject>
</item>

</rdf:RDF>
