<?xml version="1.0" encoding="iso-8859-1" ?>

<rss version="2.0">
<channel>
<title>Eric.Weblog()</title>
<link>http://software.ericsink.com/</link>
<description>Thoughts about software from yet another person who invented the Internet</description>
<copyright>Copyright 2001-2008 Eric Sink. All Rights Reserved</copyright>
<generator>mine</generator>


<item>
<title>Holiday Shopping Ideas</title>
<guid>http://software.ericsink.com/entries/hamsters.html</guid>
<link>http://software.ericsink.com/entries/hamsters.html</link>
<pubDate>Mon, 01 Dec 2008 11:44:29 CST</pubDate>
<description>
<![CDATA[
<p>I'm assuming the sales clerk burst out laughing as soon as
we left the pet shop.</p>

<p>Wait, let me give a little background here.</p>

<p>My daughter's quest to get a hamster has become rather a
public spectacle, having been mentioned here in a <a
href="http://software.ericsink.com/entries/perils_of_wikipedia.html">blog entry</a> as well as
in one of SourceGear's <a href="http://www.sourcegear.com/TEM/TEMcomic.html">comic
books</a>.&nbsp; Anyway, her birthday was this weekend, so it seemed like time.</p>

<p>The Champaign Petsmart is designated as "male hamsters
only".&nbsp; In retrospect, perhaps we should have gone there.&nbsp; But so many people
encouraged us to "buy local" that we decided to visit <a
href="http://www.sailfin.com/">Sailfin Pet Shop</a>, just down the street from
SourceGear's offices.</p>

<p>In Sailfin's defense, I would like to say that they provided
us with a good price and excellent service.&nbsp; In this case, "excellent service"
means that they kept a straight face when we asked if the hamster could be
pregnant.</p>

<p>You see, Lydia wanted a <i>white</i> hamster.&nbsp; No other
color would do.&nbsp; And there was only one white hamster in the store.&nbsp; And it was
a female.&nbsp; So we bought it anyway, but not without asking the otherwise very
helpful sales clerk if there was <i>any</i> possibility that "Spunky" could be
pregnant.&nbsp; With no facial expression at all, he looked at the hamster and said,
"Yes, that is possible."</p>

<p>Eighteen hours later when our family's talk of the hamster
abruptly switched to the plural, it became extremely clear that this sales
clerk not only knew darn well that Spunky was knocked up, but he could probably
tell at a glance that she was in early labor.&nbsp; I mean seriously.&nbsp; We brought
the rodent home one afternoon and she was pushing out offspring the next
morning.&nbsp; The Sailfin guy does this for a living -- he <i>had</i> to know.</p>

<p>In contrast, I don't know anything about hamsters.&nbsp; All I
know is that if the current birth rate of one new generation every day
continues, I will have hundreds of billions of these little tribbles by
Christmas, so there will be plenty to share.</p>

<p>So, if any of you would like to bless the geek in your life
with the gift of a hamster at the holidays, please let me know.&nbsp; No charge, as
long as you come to Champaign and pick up the rodent in person.</p>

<p>On the other hand, if you would prefer not to travel to Illinois just to pick up a five dollar furball, consider gifting one of <a
href="http://successfulsoftware.net/2008/11/25/what-do-you-buy-a-programmer-for-christmas">Andy
Brice's geek T-shirts</a> instead.&nbsp; They're nice shirts, the proceeds are going
to charity, and they've gotta be less hassle than a hamster.</p>

<p></p>
]]>
</description>
</item>

<item>
<title>Product Parenting</title>
<guid>http://software.ericsink.com/articles/Product_Parenting.html</guid>
<link>http://software.ericsink.com/articles/Product_Parenting.html</link>
<pubDate>Wed, 22 Oct 2008 08:00:00 CST</pubDate>
<description>
<![CDATA[
<p>The genesis of this article happened back in May when I
posted a <a href="http://software.ericsink.com/entries/guadec_bos.html">blog entry</a>
containing the following snippet:</p>

<p style='margin-left:.5in'><i>And finally, for something
completely different, don't miss the Jam Session at Tech-Ed on June 3<sup>rd</sup>.&nbsp;
Several of us minions from SourceGear are planning to take the stage and give
our rendition of <a href="http://en.wikipedia.org/wiki/Pinball_Wizard">Pinball
Wizard</a>.&nbsp; It'll be me on acoustic guitar, our development manager <a
href="http://vaultblog.sourcegear.com/">Jeremy Sheeley</a> on bass, and our product
manager Paul Roub playing the <a
href="http://blog.roub.net/2008/02/the_evil_mastermind_guitars_you_heard_me.html">Evil
Mastermind Schecter PT</a> that will be given away later that week.</i></p>

<p>BTW, I'm not a very good guitar player, but the jam turned
out <a href="http://www.youtube.com/watch?v=tJcafivoIog">OK</a>.</p>

<p>Anyway, the first comment on that blog post was from a
reader who said:</p>

<p style='margin-left:.5in'><i>3 managers. Wow. Your company
must be growing and/or is fairly large.</i></p>

<p>The person who made that comment was probably using the word
"manager" to refer to "someone who manages people".&nbsp; If so, then yes, our
company has more than 3 managers, but not all of the 3 people playing Pinball
Wizard qualify:</p>

<ul style='margin-top:0in' type=disc>
 <li ><a href="http://vaultblog.sourcegear.com/">Jeremy Sheeley</a>
     is actually a manager.&nbsp; He runs the development team that builds Vault and
     Fortress.</li>
 <li >Strictly speaking, I suppose I am a manager.&nbsp; But people
     who know me would say that referring to me as a manager is an undeserved
     compliment.</li>
 <li >But <a href="http://blog.roub.net/">Paul Roub</a> is a "product
     manager".&nbsp; Here at SourceGear (and in most other companies I know), a product
     manager is not [necessarily] someone who manages people.</li>
</ul>

<p>So when I saw that comment, I told myself I should write an
article about the role of a product manager.&nbsp; This is that article.</p>

<p>(BTW, the content of this article was my presentation (<a
href="http://network.businessofsoftware.org/video/eric-sink-on-product">video</a>)
at the <a href="http://businessofsoftware.org/">Business of Software conference</a>
in September.&nbsp; For more information about this event, keep an eye on the
Business of Software conference <a href="http://blog.businessofsoftware.org/">blog</a>.)</p>

<h2>What is a product manager?</h2>

<p>In short, a product manager is a marketing person who
focuses on strategic stuff and stuff that is specific to the product.</p>

<p>When people think of marketing, their thoughts often run to things
like logos, graphic design, and advertising.&nbsp; This is the communications side
of marketing.&nbsp; We call it "marcomm".</p>

<p>The <a href="http://software.ericsink.com/Marketing_for_Geeks.html">other
side</a> of marketing is the stuff that is more focused on the product itself:</p>

<ul style='margin-top:0in' type=disc>
 <li >Positioning</li>
 <li >Differentiation</li>
 <li >Features</li>
 <li >Competition</li>
 <li >Market research</li>
</ul>

<p>These activities are the domain of the product manager.</p>

<p>I still remember the moment when I first started to learn
this distinction.&nbsp; Back when I worked at Spyglass, one of my peers asked, "Why
don't we have any product marketing people?"</p>

<p>I said, "What do you mean?&nbsp; We've got marketing people.&nbsp;
Marc and his team just spent six months deciding which Pantone shade of red
we're going to use for our logo.&nbsp; That's marketing, right?"</p>

<p>The discussion that followed my clueless remark was very
enlightening.</p>

<h2>Managing Products vs. Managing People</h2>

<p>There is a confusion caused by the word "manager".&nbsp; As noted
before, a product manager doesn't necessarily manage people.</p>

<p>To highlight the differences between product management and
people management, I'm going to start by offering a brief but reasonably
complete lecture on managing people in a software company.</p>

<h2>A Brief but Reasonably Complete Lecture on Managing People in a Software
Company</h2>

<p>Stop treating them like children.</p>

<h2>That's it?</h2>

<p>Yep, that's it.&nbsp; Stop treating them like children.</p>

<p>If you follow this rule and all of its corollaries, you will
be a competent manager, thus placing you in the top one percent of all managers
in the software industry.</p>

<p>Software professionals are grownups.&nbsp; They do not deserve to
be treated like children.</p>

<h2>On the other hand...</h2>

<p>Unlike your coworkers, software products deserve to be
treated very much like children.&nbsp; They're rebellious and wayward.&nbsp; They need to
be given strict boundaries and lots of guidance.</p>

<p>Like children, products go through stages.&nbsp; Joel Spolsky <a
href="http://www.joelonsoftware.com/articles/fog0000000017.html">said</a> that
"good software takes ten years".&nbsp; Those ten years are not all the same.</p>

<p>The life of a growing software product has six different
stages.&nbsp; And the progression of those stages is a lot like the stages of
parenting a child.</p>

<ul style='margin-top:0in' type=disc>
 <li >Each stage requires a different approach.</li>
 <li >There is a gradual progression from "high control" to "letting
     go".</li>
</ul>

<h2>Stage 1:&nbsp; Prepare</h2>

<p>In parenting, the first stage is conception and pregnancy.&nbsp;
In software, this stage covers all the time before your first product release.&nbsp;
The key concept for this stage is "prepare".</p>

<p>This is the stage where you find a product idea and dream
about what it might be when it grows up.</p>

<p>Product managers in stage 1 tend to make the same mistake
that a new father makes:&nbsp; He believes that since the mother (the development
team) is carrying the baby (writing the code), he doesn't have anything to do.&nbsp;
All he has to do is wait until the kid is old enough to throw a baseball around,
right?</p>

<h3>Prepare</h3>

<p>As a product manager, stage 1 is perhaps your most important
stage.&nbsp; You have a lot of preparation to do if you want your product to be
successful.</p>

<ul style='margin-top:0in' type=disc>
 <li >You need to figure out your <a
     href="http://software.ericsink.com/Positioning.html">positioning</a>.</li>
 <li >You need to clearly define your <a
     href="http://www.amazon.com/exec/obidos/ASIN/0471028924/sawdust08-20">differentiation</a>.&nbsp;
     </li>
 <li >And you need to figure out how those two things are going
     to express themselves in every other aspect of the product.</li>
</ul>

<p>This is challenging stuff, and you have to do it now.&nbsp; Later
it will be too late.</p>

<h3>Fail</h3>

<p>Anybody else remember the <a
href="http://en.wikipedia.org/wiki/Bandai_Pippin">Apple Pippin</a>?</p>

<p>When I speak at conferences, they sometimes introduce me as "the
person who led the team at Spyglass who built the browser that Microsoft
licensed to become Internet Explorer".&nbsp; That's <a
href="http://software.ericsink.com/Browser_Wars.html">true</a>, but it is an
incomplete rendition of the truth.</p>

<p>Spyglass licensed its browser to around 120 different
companies who released products based entirely or partially on our code.&nbsp; All
but one of those products crashed and burned.&nbsp; So it would be equally accurate (albeit
far less flattering) to introduce me as "the person who has been affiliated with
more failed web browser products than anyone else on the planet".&nbsp; <b>:-)</b></p>

<p>One of those products was the Apple Pippin (although I would
hasten to say that my code was not the reason why the Pippin failed).&nbsp; <b>:-)</b></p>

<p>The Pippin was a disastrous example of product marketing.&nbsp; And
it failed because somebody did a terrible job in stage 1.&nbsp; The positioning of
this product was never clear.</p>

<ul style='margin-top:0in' type=disc>
 <li >Is it a game machine?</li>
 <li >Is it a computer?</li>
 <li >Is it a set top box?</li>
</ul>

<p>The answer to all of these questions was "yes".&nbsp; By trying
to fit in every category, the Pippin ended up fitting in none of them.</p>

<p>Predictably, the primary differentiation for the Pippin was
that it was lame in every category.&nbsp; Yes, it was a game machine, but it was insanely
expensive and incompatible with 100% of the popular games in the world.&nbsp; Yes,
it was a computer, but it was slow and underpowered.</p>

<h2>Stage 2:&nbsp; Care</h2>

<p>In parenting, the second stage is birth and infancy.&nbsp; In
software, this stage covers the 1.0 release and the time thereafter.&nbsp; The key
concept for this stage is "care".</p>

<p>This is the stage where you endure the final pain of getting
the product out the door.&nbsp; </p>

<p>The product manager has a very important role in the first
release of a new product.&nbsp; The labor pains are endured by the development team,
but the product manager is responsible for the launch.&nbsp; It is important to get
the messaging just right.</p>

<p>Shipping release 1.0 is a lot like the birth of a new baby:&nbsp;
Lots and lots of pain, followed by a brief period of pure happiness, and then no
sleep for quite a while.</p>

<p>In most B2B software products, shipping the 1.0 release is
more like a beginning than an end.</p>

<h3>Care</h3>

<p>After a baby is born, the parents are overwhelmed with the
responsibility of its care.&nbsp; A newborn is completely dependent, unable to do
anything for itself.&nbsp; When it wants to be fed at 3 o'clock in the morning,
that's what has to be done.</p>

<p>Many version 1.0 products have similar needs.&nbsp; Users need
tech support, sometimes urgently and at very inconvenient times.&nbsp; That's what
has to be done.</p>

<p>Like the husband of a breast-feeding mother, the product
manager may not have primary responsibility for all this care that needs to be
provided.&nbsp; But he can be involved, and both he and the product will benefit
from his choice to do so.</p>

<p>Product managers and new fathers typically share one other
task in common during stage 2:&nbsp; Soul searching.&nbsp; </p>

<p>Every father I know has held his new baby and wondered if he
was really prepared for the responsibility.</p>

<p>Product managers in stage 2 need to be asking themselves
questions about the quality of their preparation:</p>

<ul style='margin-top:0in' type=disc>
 <li >Is the positioning right?</li>
 <li >Is the differentiation sufficient?</li>
 <li >Is the messaging clear?</li>
</ul>

<p>Stage 2 is <b>not</b> the time to start doing the stuff you
should have done in stage 1.&nbsp; But it <b>is</b> time to review.&nbsp; It's not too
late to make changes.</p>

<h3>Fail</h3>

<p>Around ten years ago, my company shipped version 1.0 of a
product called SourceSurf.&nbsp; It was a web-based application for browsing source
code repositories.</p>

<p>If you were to travel back in time and ask SourceSurf what
it wants to be when it grows up, it would look into the future and say, "I want
to be sort of like Atlassian <a
href="http://www.atlassian.com/software/fisheye/">FishEye</a>".&nbsp; But SourceSurf
never got the chance to grow up.&nbsp; Version 1.0 was its first and last major release.
&nbsp;What we should have done was tweak the strategy and keep going.&nbsp; Instead, we
looked at the initial results and gave up.</p>

<p>SourceSurf 1.0 didn't do very well, but the product concept
was generally good.&nbsp; We failed to make the minor course corrections this
product needed to be successful.</p>

<h2>Stage 3:&nbsp; Listen</h2>

<p>In parenting, the third stage is the so-called "terrible
twos", (which, as all parents know, actually lasts until the child is almost
four).&nbsp; In software, this stage typically covers the 2.0 release cycle.&nbsp; The
key concept for this stage is "listen".</p>

<p>This is the stage of defiance and rebellion, where the
product begins to exhibit its own will.</p>

<p>One day when my oldest daughter was in this stage, we called
her to dinner.&nbsp; She sauntered up to the table, glanced at the food we had prepared,
and gasped in horror, "There's nothing here I like except butter!"&nbsp; <b>:-)</b></p>

<p>Obviously children need correction during these years.&nbsp; But
they also need to be heard.&nbsp; This is the stage when "kids say the darndest
things", some of which are cute, and some of which are annoying or
embarrassing.&nbsp; Either way, this process is an important stage of growth.&nbsp;
Parents need to provide correction without crushing the child's spirit.&nbsp; Often
that means listening to the weird things the child says.</p>

<h3>Listen</h3>

<p>The product manager also needs to spend stage 3 listening.&nbsp;
Customers ask for a lot of stuff, and that feedback needs to be heard and
incorporated into the next release of the product.&nbsp; There is still time to
tweak the strategy before the product goes mainstream.</p>

<h3>Fail</h3>

<p>Stage 3 is the most common place where products fail.&nbsp; There
are plenty of examples.&nbsp; Almost any product that died at the bottom of the <a
href="http://software.ericsink.com/Act_Your_Age.html">chasm</a> was a failure in
stage 3.&nbsp; My favorite two examples are <a
href="http://en.wikipedia.org/wiki/BeOS">BeOS</a> and <a
href="http://en.wikipedia.org/wiki/Informix_Wingz">Wingz</a>.</p>

<ul style='margin-top:0in' type=disc>
 <li >BeOS was a new operating system released in the late '90s.&nbsp;
     Technologically, BeOS was very cool, but it fell into the chasm because it
     never found a niche on the other side.</li>
 <li >Wingz was a new spreadsheet released in the late '80s.&nbsp;
     Wingz had features that Excel doesn't have today.&nbsp; But to survive, it
     needed to get popular with a small group of users and spread from there.&nbsp;
     I liked Wingz a lot, but I think most people thought it was just too
     weird.</li>
</ul>

<p>I often wonder if these products might have succeeded if
they had been more willing to listen to the very early user feedback and change
course accordingly.&nbsp; This might have meant allowing the product to become
something its parents never dreamed it would be.</p>

<h3>Digression:&nbsp; Looking across the chasm</h3>

<p>Since I am employed by a version control vendor, the chasm
situation that is most interesting to me today is the Decentralized Version
Control System (<a
href="http://en.wikipedia.org/wiki/Distributed_revision_control">DVCS</a>).&nbsp;
Notable examples in this category include open source tools such as Git,
Mercurial, and Bazaar.</p>

<p>Today, these products are not yet mainstream.&nbsp; They have a
lot of buzz in certain communities, but the vast majority of all companies
doing software development are still using centralized tools.</p>

<p>Will the DVCS tools make it across the chasm?</p>

<h2>Stage 4:&nbsp; Talk</h2>

<p>In parenting, the fourth stage is the time from elementary
school to adolescence.&nbsp; In software, this stage typically covers version 3.0,
which is often the first release where the product can be considered
mainstream.&nbsp; The key concept for this stage is "talk".</p>

<p>Parents at this stage often express amazement at what their
child can do.&nbsp; "Little Bobby is just amazing!&nbsp; Seven years ago we made this
baby and now I can carry on an actual conversation with it!"&nbsp; Stage 4 arrives,
and quite suddenly the parent realizes that their baby has become a little
person.</p>

<p>Similarly, software products in stage 4 have reached the
point where most people can actually use them.&nbsp; They're mainstream now.&nbsp;
Previous releases were really only popular with early adopters and people who
have lots of patience.&nbsp; But release 3.0 is polished enough to be a productive
solution for more than half of its target market.</p>

<p>Stage 4 is when products and children begin to develop an
unhealthy level of focus on the competition.&nbsp; When kids go to school, they
begin to learn that they can make themselves feel better by making others feel
worse.&nbsp; It will take them many years to unlearn this lesson, to learn that
mental health and personal peace come from the disciplined choice to not worry
so much about others and take care of yourself.</p>

<p>Similarly, stage 4 products should probably not be terribly
focused on the competition.&nbsp; If you don't have good differentiation by now,
you're not gonna get it.&nbsp; Take care of your own customers.</p>

<h3>Talk</h3>

<p>The most important thing for parents and product managers in
stage 4 is talking.</p>

<p>This is the stage where kids need information, and it is the
last stage when they are actually willing to listen to anything you have to say:&nbsp;
Parents need to talk to their kids about the risks ahead.&nbsp; Tell them about the
heartache and consequences that can come from poor decisions about smoking and
sex and drugs and being a fan of the Chicago Cubs.</p>

<p>Similarly, stage 4 is the time when a product manager's
primary job is providing information.&nbsp; Your product is mainstream now.&nbsp; People
want it.&nbsp; But to help them realize they want it, you have to give prospective
customers lots of information.&nbsp; You need whitepapers.&nbsp; You need demo videos.&nbsp;
You need product comparison documents.&nbsp; And so on.</p>

<h3>Fail</h3>

<p>As an example of a product that didn't do so well in stage
4, I cite my own company's flagship product, SourceGear Vault.</p>

<p>Vault is very popular and has been a success for our
company.&nbsp; But when it comes to providing all the different kinds of information
that a mainstream product needs, we dropped the ball.&nbsp; </p>

<p>Right around the release of Vault 3.0, the product started
to get lots buzz through "word of mouth".&nbsp; People would come to our website to
get product information, but the stuff we had there was just too anemic.</p>

<p>To our credit, we realized our mistake and took steps to fix
it.&nbsp; We hired a product manager to focus on this kind of thing.&nbsp; But still, we
got a late start, so even now Vault is still catching up to where it should be.</p>

<h2>Stage 5:&nbsp; Balance</h2>

<p>In parenting, the fifth stage is the teenage years, from
adolescence through high school.&nbsp; In software, this stage typically covers the
post-3.0 releases.&nbsp; The key concept for this stage is "balance".</p>

<p>This is the stage where a child wants you to stop calling
them a child.&nbsp; It is a time of transition to adulthood, defined by rebellion.&nbsp;
No stage is more trying and difficult for a parent than stage 5.&nbsp; Every parent
wants their children to eventually become independent, but few realize just how
painful the journey will be.&nbsp; The teenage years are a lot like the terrible
twos.&nbsp; When the child doesn't get his way, his anger can be quite explosive.&nbsp;
However, instead of lying on the ground kicking and screaming, he shouts "I
hate you!" and slams his bedroom door.</p>

<h3>Balance</h3>

<p>But just like the terrible twos, this stage is a critical
part of growing up.&nbsp; The parent must strike a balance.&nbsp; This stage is the time
to start steering a bit less.&nbsp; Let the teenager take a bit more control over her
own life.</p>

<p>Stage 5 is when children and products spend a lot of their
time asking for things they don't need:</p>

<ul style='margin-top:0in' type=disc>
 <li >But Dad, every other teenager on the planet has unlimited
     text messaging!</li>
 <li >But Mom, I can't wear a dress that I already wore once!&nbsp; I
     have to get a new one!</li>
 <li >But Dad, ALL of the other word processors have a grammar
     checker!</li>
</ul>

<p>As product manager in stage 5, you need to give your product
some slack.&nbsp; It's time to let customers have some of the features you have been
resisting for years.&nbsp; Even if you don't think the feature is a good idea, as
long as it won't destroy the product, you should seriously consider letting it
happen.</p>

<p>But you still need some boundaries:</p>

<ul style='margin-top:0in' type=disc>
 <li >A parent must begin to let the teenager be what he wants
     to be.&nbsp; But don't let the kid ruin his life.&nbsp; Leave enough boundaries in
     place to ensure that he can finish the journey to adulthood safely and
     without doing something he'll regret for decades.</li>
 <li >Similarly, a software product can ruin its life in stage 5
     by shipping a bad release.&nbsp; A product manager needs to be a champion for
     quality.&nbsp; It doesn't matter how great version 3.0 was.&nbsp; If version 4.0 is
     buggy and unreliable, the product's reputation will probably never fully
     recover.</li>
</ul>

<h3>Fail</h3>

<p>The perfect example of a product that ruined its life with
poor quality is Microsoft Visual SourceSafe.</p>

<p>Today, SourceSafe is the punch line to almost every joke
about version control.&nbsp; It is widely despised and generally regarded to be
unreliable.</p>

<p>Before Microsoft acquired SourceSafe, it was an outstanding
and highly respected product.&nbsp; This product didn't become the mostly widely
used proprietary version control tool for no reason at all.&nbsp; SourceSafe redefined
the industry by bringing more ease of use than any of its predecessors.</p>

<p>But under Microsoft's parenting, SourceSafe ruined its
life.&nbsp; Versions 5.0 and 6.0 were disastrous.&nbsp; I would bet that SourceSafe has
more disdain per user than any other profitable product in history. My company
has made megabucks from the world's dissatisfaction with SourceSafe.</p>

<p>Ironically, the latest version of SourceSafe probably
doesn't deserve quite the level of scorn that it receives.&nbsp; I haven't used
SourceSafe 2005, but I understand that it's not actually that bad.&nbsp; They fixed
a lot of problems.&nbsp; </p>

<p>But the product has become something that people love to
hate.&nbsp; Now it's too late.&nbsp; The world will never trust SourceSafe again.</p>

<h2>Stage 6:&nbsp; Let Go</h2>

<p>In parenting, the sixth stage is adulthood.&nbsp; In software,
this stage covers the time when the product is considered mature.&nbsp; The key
concept for this stage is "let go".</p>

<p>This is the stage where your work as a parent is basically
done.&nbsp; From now on, any mistake your child makes is their own fault.&nbsp; You have
to let go.</p>

<p>Similarly, a product manager doesn't have much to do anymore
when a product reaches maturity.</p>

<p>For both parent and product manager, this is a time to
celebrate the successful end of a long and sometimes difficult journey.</p>

<h3>Let Go</h3>

<p>Both parents and product managers often find it difficult to
let go.&nbsp; But it is important that you do.</p>

<p>You're a product manager.&nbsp; Your job is to help define and shape
the identity of this product.</p>

<p>Once the child is "all grown up", you need to stop trying to
help it figure out what it wants to be.&nbsp; It already is.</p>

<p>Let the folks in marcomm, sales and support handle
everything from now.</p>

<p>This product is done.&nbsp; Go find the next one.</p>

<h3>Epic Fail</h3>

<p>The two most obvious examples where product managers refused
to let go:</p>

<ul style='margin-top:0in' type=disc>
 <li >Microsoft Windows</li>
 <li >Microsoft Office</li>
</ul>

<p>These products are done.&nbsp; They've been done for years.&nbsp; Unfortunately,
Microsoft has largely failed to find its next product.&nbsp; So, because Microsoft
has nothing better to do, they continue to sell us new releases we don't need
and create contrived reasons to force us to buy them.</p>

<p>Naturally somebody is going to gripe at me for saying that
the two highest-revenue software products in history are a failure.&nbsp; I'm not
saying that.&nbsp; What I'm saying is that these two products were stunningly
successful in stages one through five, and that doesn't change the fact that
their execution of stage 6 has been awful.</p>

<h2>Final Remarks</h2>

<p>The product manager and the parent both suffer from an
abundance of diverse opinions.&nbsp; Your local bookstore has hundreds of titles on each
topic, many of them offering conflicting advice.</p>

<p>This article contains lots of my opinions about parenting
and product marketing.&nbsp; Some of my readers will agree with me.&nbsp; Others will
think I am wrong.&nbsp; (The ones in the latter group will send me email.)</p>

<p>The problem with both parenting and product marketing is
that everybody knows how to do it, but nobody really knows how to do it.&nbsp; You
read everything you can, and then you do your best.</p>

<p>And in parenting, your best is probably good enough.</p>

<p>This is one very important way that product management is
completely different from parenting:&nbsp; Most parents are successful.</p>

<p>Very few parents completely fail.&nbsp; We spend many sleepless
hours worrying, but in the end, stuff tends to work out.&nbsp; If you love your kids
and give them your best effort, they're probably going to turn out OK.</p>

<p>In contrast, most products fail.&nbsp; Marketing is field where effort
and "doing your best" are not usually sufficient.</p>

<p>The Pippin didn't fail because there was no product manager
-- it failed because its product manager was a nitwit.</p>

<p>Microsoft isn't flogging us with Windows Vista because they
don't care about finding new products.&nbsp; Microsoft <i>tried</i> to find their
next product.&nbsp; They tried very hard.&nbsp; They assigned their smartest people to
the challenge.&nbsp; They spent many millions of dollars searching for it.&nbsp; But they
never found it.</p>

<p>Google did.</p>

<p></p>
]]>
</description>
</item>

<item>
<title>More on the sad state of print publishing for developers</title>
<guid>http://software.ericsink.com/entries/poultry_magazines.html</guid>
<link>http://software.ericsink.com/entries/poultry_magazines.html</link>
<pubDate>Wed, 01 Oct 2008 11:09:16 CST</pubDate>
<description>
<![CDATA[
<p>People usually think of SourceGear as "Eric Sink's company",
but that's only half true.&nbsp; My business partner Corey Steffen has the same
ownership that I do -- he's just not as loud as I am.</p>

<p>Because Corey is sort of quiet, most people don't know much
about him.&nbsp; Here's a piece of information that I think is interesting:&nbsp; Corey
is an amateur farmer on the side.</p>

<p>Yep, Corey spends his days running a software company and
his off hours running a small farm.&nbsp; So he comes to work with stories about
chickens and sheep and horses and pastures.&nbsp; Oh my.</p>

<p>(It is interesting to note that <a
href="http://blogs.msdn.com/bharry/">Brian Harry</a>, creator of SourceSafe and
Team Foundation Server, also has a <a
href="http://blogs.msdn.com/bharry/archive/2008/03/11/end-of-week-2-on-the-farm.aspx">passion
for farming</a>.&nbsp; So Corey and Brian are two data points that suggest some sort
of a pattern involving version control and agriculture, but I dare not try to
extrapolate.)</p>

<p>Anyway, since Corey's life is such an odd juxtaposition of
two extremely different pastimes, folks here at the company tend to make the
occasional joke about it.&nbsp; In fact, Corey has been the recipient of merciless
but harmless teasing here for over a decade now.&nbsp; For some reason, the subject
just never gets old.&nbsp; When we get together for our company lunch on Wednesdays,
a joke about Corey getting up at 4:30am to clean out the horse stalls before he
comes to the office to clean out the bug database is probably a sure laugh.</p>

<p>Continuing in this fine tradition, one of our guys recently
found the following promotional card and brought it in for a quick joke at
Corey's expense:</p>

<p align=center style='text-align:center'><img border=0
width=379 height=257 src="http://software.ericsink.com/entries/1753_image001.jpg"></p>

<p>"Hey Corey, I thought of you when I saw this magazine.&nbsp;
Maybe you should pick up a copy?"</p>

<p>That was funny.</p>

<p>And it got even funnier two seconds later when Corey
admitted that he was already a subscriber.&nbsp; </p>

<p>The next day, he brought in his copy of the most recent
issue:</p>

<p align=center style='text-align:center'><img border=0
width=294 height=384 src="http://software.ericsink.com/entries/1753_image002.jpg"></p>

<p>I would like to be able to say that I took this in stride.&nbsp;
After all, I've known for years that Corey keeps chickens.&nbsp; I still remember
back in 1997 when Corey joined the company he told me that his chickens provide
them with 18 eggs every morning.</p>

<p>How does a family make use of 18 fresh eggs EVERY SINGLE
MORNING?</p>

<p>Anyway, seeing this magazine left me speechless.&nbsp; In part I
was surprised by yet another <a href="http://en.wikipedia.org/wiki/Green_Acres">Green
Acres</a> moment from Corey.</p>

<p>But mostly I was just shocked that this magazine exists.&nbsp; I
mean really.&nbsp; An entire print publication for people who raise chickens as a
hobby?&nbsp; That's what I call a niche.&nbsp; How does the publisher survive?</p>

<p>More to the point, how can this magazine be successful when <a
href="http://www.ddj.com/">Dr. Dobb's</a> looks like it might be pushing up
daisies sometime before the World Series is over? &nbsp;Dr. Dobbs is arguably the
most prestigious developer magazine in our industry, but it hasn't been looking
any too healthy over the last year or so.</p>

<p>It's gotta be all about market penetration:</p>

<ul style='margin-top:0in' type=disc>
 <li >In very rough and round figures, there are 3 million
     software developers in the United States and 1% of them are subscribers to
     Dr. Dobbs.<br>
     <br>
 </li>
 <li >I have no idea how many people raise poultry in their
     backyard, but I suspect my freshman chemistry class had more people.&nbsp;
     However many it is, I bet well over 50% of them are subscribers to the
     magazine shown above.</li>
</ul>

<p>Most software developers no longer use content in paper
form.</p>

<p>Andy Brice recently <a
href="http://successfulsoftware.net/2008/09/17/the-realities-of-software-book-publishing/">commented</a>
on the poor sales of Charles Petzold's book on WPF 3D.&nbsp; This is another sign of
the major shift in our industry.&nbsp; Petzold was maybe the last of his breed.&nbsp;
Most authors gave up years ago on the idea that they could make a living from
writing alone.&nbsp; Until quite recently, Petzold was one of the few who still did,
and now even that appears to be changing.</p>

<p>Software development magazines and books are dying.&nbsp; You
already know this.&nbsp; I already know this.&nbsp; But I continue to be amazed at the
pace of this change.&nbsp; People resist change.&nbsp; Billions of dollars of VC money
has been lost by overestimating the willingness of people to embrace change.&nbsp;
In this case, I have underestimated it.&nbsp; Looking ahead ten more years, I wonder
how much smaller the "Computers" section at my local Borders bookstore will be.</p>

<p>They'll probably just fill the extra space with a bunch of
titles about backyard livestock management.</p>

<p></p>
]]>
</description>
</item>

<item>
<title>A Case Study in Bad Marketing</title>
<guid>http://software.ericsink.com/entries/eee.html</guid>
<link>http://software.ericsink.com/entries/eee.html</link>
<pubDate>Tue, 12 Aug 2008 10:59:42 CST</pubDate>
<description>
<![CDATA[
<p>OK.&nbsp; Before I explain why Asus deserves to be mentioned in
marketing textbooks for its horrible management of the Eee brand, let me first
say that I love my <a
href="http://www.amazon.com/exec/obidos/ASIN/B001BYB61G/sawdust08-20">Eee PC
901</a>.&nbsp; I've had this little device for a couple weeks now, and it's just a
really great product.</p>

<ul style='margin-top:0in' type=disc>
 <li >The battery life is outstanding.</li>
 <li >It takes a few days of use to get accustomed to the
     keyboard, but after that, it's quite usable.</li>
 <li >I wish the Mac were available in this form factor.&nbsp; (Yes,
     I know about the MacBook Air.&nbsp; That's not even close to what the Eee is.)</li>
 <li >I'd prefer Linux, but I've got the XP version.&nbsp; At some
     point, when Ubuntu Netbook Remix is ready to work smoothly on this thing,
     I'll probably repave.&nbsp; But for now, everything Just Works, and I don't
     want to lose that.</li>
 <li >I got this device to replace my day timer, not my laptop.&nbsp;
     I don't really do any serious work on my Eee.&nbsp; It's a portable web browser
     and email client.&nbsp; Visual Studio is not installed.</li>
 <li >OTOH, I'm thinking that for my next trip, the MacBook Pro
     will stay home and the Eee will go.</li>
 <li >I know the 10-inch netbooks are gaining in popularity, but
     for me the 8.9-inch form factor is much better.&nbsp; The MSI Wind is a lot
     bigger.&nbsp; The Eee is so small I can (and do) take it everywhere.&nbsp; The
     10-inch models remind me of a laptop.</li>
 <li >For me, the Eee is the second coming of my HP 200LX.</li>
 <li >I think of my Eee as a large and extremely capable
     BlackBerry, not as a small and a lame laptop.</li>
</ul>

<p>So, like I said, it's a great product.&nbsp; But Asus is doing
everything they can to destroy this brand.</p>

<p>The brand name "Eee" is great.&nbsp; It's short and memorable.&nbsp;
Its sound matches its sense.&nbsp; It just fits.</p>

<p>But Asus is now introducing so many products under the Eee name
that soon the brand will be meaningless.</p>

<p>I believe the first popular Eee was the 701.&nbsp; People raved
about it.&nbsp; I never owned one, but apparently the two most popular attributes
were the low price and the small size.&nbsp; Either of these attributes could have
become the positioning for the Eee brand.&nbsp; Maybe both.</p>

<p>But now Asus has all kinds of Eee products.&nbsp; Some are
small.&nbsp; Some are large.&nbsp; Some are cheap.&nbsp; Some are expensive.&nbsp; They're even
working on a desktop machine with the Eee brand.&nbsp; After that I can only assume
that we'll see Eee cola, Eee furniture and Eee shaving products.</p>

<p>Maybe Asus doesn't care.&nbsp; After all, they're basically a
manufacturing company, not a marketing company, right?&nbsp; The fact that they
created a great brand was probably an accident anyway.</p>

<p>But as a marketer, that's what makes this even more
infuriating.&nbsp; Creating a great brand usually requires hard work, lots of
creativity, and tremendous discipline.&nbsp; When someone pursues the goal in that
manner and succeeds, I admire them.&nbsp; But when someone accidentally succeeds, and
then destroys their own work, I just want to bang my head against the desk.&nbsp;
Yes, I know that luck is a factor.&nbsp; I just hate the situations where luck is
the <i>only</i> factor.&nbsp; We're making <i>products</i> here, not Top 40 pop
radio songs.&nbsp; Talent and hard work should count for <i>something</i>.</p>

<p>Oh well.&nbsp; The Eee brand will die and Asus will return to its
former life of making products that normal people have never heard about.</p>

<p>But I think this product category will survive.&nbsp; These
things might even become popular enough to go mainstream.&nbsp; I can only assume
that Dell will end up being the leader in this market segment.</p>

<p>But whatever brand they use for these products, it will never
be as cool as "Eee".</p>

<p></p>
]]>
</description>
</item>

<item>
<title>Randy Pausch</title>
<guid>http://software.ericsink.com/entries/randy_pausch.html</guid>
<link>http://software.ericsink.com/entries/randy_pausch.html</link>
<pubDate>Fri, 25 Jul 2008 09:49:07 CST</pubDate>
<description>
<![CDATA[
<p>I was saddened this morning to hear that <a
href="http://en.wikipedia.org/wiki/Randy_Pausch">Randy Pausch</a> has lost his
battle with pancreatic cancer.</p>

<p>Pausch was a CS professor at Carnegie Mellon who became
famous for his <a href="http://www.thelastlecture.com/">Last Lecture</a>,
delivered in September 2007 and later published as a bestselling book.&nbsp; He was
also the creator of the <a href="http://www.alice.org/">Alice</a> software
project.</p>

<p>When a famous person dies, I often find myself appreciating
their work, but I usually cannot say that I feel a personal sense of loss.&nbsp; <a
href="http://www.imdb.com/name/nm0001321/">Richard Harris</a> was fantastic in
every role I have seen him play, but I doubt he and I would have found much to
talk about. &nbsp;For me, Randy Pausch is a special case.&nbsp; All of us are lucky to
have access to his work, but I think the people who really knew him are even
more fortunate.&nbsp; I wish I was one of them.</p>

<p>Every man dies.&nbsp; Not every man truly lives.&nbsp; Rest in peace,
Dr. Pausch.&nbsp; You truly lived.</p>

<p></p>
]]>
</description>
</item>

<item>
<title>Summer Movies</title>
<guid>http://software.ericsink.com/entries/summer_movies.html</guid>
<link>http://software.ericsink.com/entries/summer_movies.html</link>
<pubDate>Mon, 21 Jul 2008 11:18:24 CST</pubDate>
<description>
<![CDATA[
<p>This weekend I saw Wall-E and The Dark Knight, both of which
are just amazingly good.&nbsp; Lately I'm thinking this may be the best summer of
movies ever.</p>

<p>Compared to cinematic masterpieces such as these, Paul
Roub's <a href="http://blog.roub.net/2008/07/explaining_fortress_visually.html">recent
videos</a> are kind of lame.&nbsp; His plot and characters are really anemic.&nbsp; I
need to talk to him about somehow working in a car chase scene and more
explosions.</p>

<p><b>:-)</b></p>

<p>Seriously, Paul has been making some short videos to offer a
different way of talking about our products.&nbsp; His <a
href="http://sourcegear.com/fortress/video/installation.html">latest one</a> is
my favorite:&nbsp; In order to show how quick and easy it is to setup SourceGear
Fortress, this video shows every step of the install from start to finish.&nbsp; The
video is 3 minutes and 12 seconds long.</p>

<p>These movies aren't exactly Iron Man, but they're still
pretty cool.</p>

<p></p>
]]>
</description>
</item>

<item>
<title>C and Morse Code</title>
<guid>http://software.ericsink.com/entries/c_morse_code.html</guid>
<link>http://software.ericsink.com/entries/c_morse_code.html</link>
<pubDate>Fri, 23 May 2008 06:40:16 CST</pubDate>
<description>
<![CDATA[
<p>Darren Stokes <a
href="http://blog.darrenstokes.com/2008/05/22/do-you-really-need-to-know-c-i-think-so/">sides
with</a> Joel over Jeff on whether programmers should know C.</p>

<p>This whole debate reminds me of <a
href="http://en.wikipedia.org/wiki/Amateur_radio">amateur radio</a> operators
bickering over whether newbies should be allowed to get a license without
learning <a href="http://en.wikipedia.org/wiki/Morse_code">Morse code</a>.</p>

<h3>Morse Code</h3>

<p><i>So Eric, tell us about your experience as an amateur "ham"
radio operator?</i></p>

<p>My call sign is KA9KEF.&nbsp; To get my General class license, I
had to pass a written exam as well as a Morse code test at 13 words per minute.</p>

<p><i>Really, you know Morse code?&nbsp; Nowadays, it's possible to
get a ham radio license with no code at all.&nbsp; </i></p>

<p>Yes, and I think that's outrageous!&nbsp; It's just wrong.</p>

<p><i>Why do you think that?</i></p>

<p>If I had to learn Morse code, then everybody else should
too.</p>

<p><i>So does anybody really need Morse code these days?</i></p>

<p>Well, I suppose not.&nbsp; But don't pester me with facts that distract
from my point.&nbsp; Learning Morse code should be a rite of passage for all hams.&nbsp;
Anybody who got a license without code is not a "real ham".</p>

<p><i>But you -- you are a "real ham".</i></p>

<p>Yep.&nbsp; I passed the Morse code test.&nbsp; 13 wpm.</p>

<p><i>So you're still actively involved in amateur radio?</i></p>

<p>Well, no.</p>

<p><i>Oh.&nbsp; When was the last time you used your ham rig?</i></p>

<p>I suppose it's been a few years.</p>

<p><i>How many years are in "a few"?&nbsp; Maybe five?</i></p>

<p>More like twenty.</p>

<p><i>Twenty years?&nbsp; </i></p>

<p>Twenty-three, actually.</p>

<p><i>And you still have your amateur radio equipment?</i></p>

<p>Well, no.&nbsp; I sold my station a long time ago.</p>

<p><i>OK, let's review.&nbsp; You're a "real ham", even though
everything you know about ham radio is two decades out of date.&nbsp; But the guys
who got a "no code" license and are actively practicing the hobby today,
they're somehow not "real"?</i></p>

<p>That's right.&nbsp; I know Morse code.&nbsp; They don't.</p>

<p><i>So you think all ham radio operators should be required
to learn a basically useless skill simply because you did?</i></p>

<p>Exactly!&nbsp; And don't ask me to get down from my high horse.&nbsp;
I like it up here.</p>

<h3>C</h3>

<p>The argument about whether programmers need to know C is
just so similar.</p>

<p>All of the people arguing that C is important are the people
who have already learned it.&nbsp; I'm pretty sure that a lot of their argument is
resting on the same foundation as those crotchety old hams:&nbsp; "If I had to learn
C, then everybody else should too."</p>

<p>I am one of those people.&nbsp; Yep, not only am I a Morse code
bigot, I'm a C bigot as well.</p>

<p>I learned C, and I learned it good.&nbsp; I've worked on multiple
significant C projects.&nbsp; I even wrote a C compiler.&nbsp; In C.&nbsp; I think all "real programmers"
know C.</p>

<p>Yep, we C programmers are elitist and proud of it.&nbsp; The view
from up here on our high horse is pretty good.&nbsp; We see lots of so-called
programmers down there:</p>

<ul style='margin-top:0in' type=disc>
 <li >They don't really know what a pointer is.</li>
 <li >They're not even using a real compiler!&nbsp; That thing
     they're using doesn't even generate native code you know.&nbsp; It's "byte
     code", so it's not real.</li>
 <li >Those people have never had to manage their own memory.</li>
 <li >In fact, they've never really had to do anything at all.&nbsp;
     I mean really.&nbsp; They're building on a class library that's got more
     features in it than Photoshop.</li>
</ul>

<p>We are different.&nbsp; We learned C.&nbsp; We are "real programmers".</p>

<h3>One big difference</h3>

<p>What's the main difference between hams who know Morse code
and programmers know C?</p>

<p>The C programmers actually have a point.</p>

<p>Seriously, strip away all the elitism and see what's left.&nbsp; Morse
code is nearly useless, but C is still darn important whether you're using it
or not.</p>

<p>And a lot of people are still using it, by the way.&nbsp; Don't
think of C as merely "important historical and foundational background".&nbsp; In
fact, my current project is being written in C.&nbsp; Software development today is
a big field.&nbsp; There are still many problems for which C is the best solution.</p>

<p>But even if you're coding in something higher level, the
experience of using low-level programming techniques is invaluable.</p>

<p>I'm not going to take a black-and-white stance on this.&nbsp; I
won't go so far as to say that every developer must learn C.&nbsp; I've met lots of
developers without C experience who are successful and making positive
contributions to important software projects.</p>

<p>Furthermore, I'll admit that knowing C is not a magic
solution to poor skills.&nbsp; A lousy developer who happens to know C is simply
better equipped to hurt himself or somebody nearby.</p>

<p>However, I can say these two things:</p>

<ol style='margin-top:0in' start=1 type=1>
 <li >All of the truly extraordinary developer s I know are
     people who really understand the kind of low-level details that C forces
     you to know.</li>
 <li >Every programmer without C experience has a clear path of
     personal development:&nbsp; Learn C.&nbsp; Get some real experience using C to write
     a serious piece of software.&nbsp; Even if you never use it again, you'll be a
     better programmer when you're done.</li>
</ol>

<p></p>
]]>
</description>
</item>

<item>
<title>My Favorite Books</title>
<guid>http://software.ericsink.com/articles/books.html</guid>
<link>http://software.ericsink.com/articles/books.html</link>
<pubDate>Thu, 22 May 2008 08:00:00 CST</pubDate>
<description>
<![CDATA[
<p>People often ask me for a list of my favorite books.&nbsp; So
here it is.&nbsp; </p>

<p>I reserve the right to update this list from time to time.</p>

<p>I tend to read a <i>lot</i> of stuff.&nbsp; The fact that I
recommend a book here does not mean that I agree with everything in it.</p>

<h3>Coding</h3>

<p>I think it's out of print, but I really liked <a
href="http://www.amazon.com/exec/obidos/ASIN/1556155514/sawdust08-20">Writing
Solid Code</a>.&nbsp; It's very oriented toward C/C++, so if you're mostly in
C#/Java/Ruby/Python/Perl/VB, it may not be worth your time.&nbsp; Still, it's an
outstanding book.</p>

<p>And of course <a
href="http://www.amazon.com/exec/obidos/ASIN/0735619670/sawdust08-20">Code
Complete</a> is a classic.</p>

<h3>Software Management</h3>

<p><a
href="http://www.amazon.com/exec/obidos/ASIN/0735623198/sawdust08-20">Dynamics
of Software Development</a> is one of my favorites.</p>

<h3>Business</h3>

<p>I'm a big fan of <a
href="http://www.amazon.com/exec/obidos/ASIN/0060566108/sawdust08-20">Built to
Last</a> and its sequel, <a
href="http://www.amazon.com/exec/obidos/ASIN/0066620996/sawdust08-20">Good to
Great</a>.&nbsp; The sequel is easier to read and a bit more relevant to smaller
companies.</p>

<p><a
href="http://www.amazon.com/exec/obidos/ASIN/0761521747/sawdust08-20">The
Silicon Valley Way</a> is a great book, and it's a very visual book with nice
short chapters.&nbsp; Easy to just pick up and browse..</p>

<p>If you get the opportunity, go hear Guy Kawasaki speak.&nbsp; He's
much better in person than he is on paper.&nbsp; But if that doesn't work out, <a
href="http://www.amazon.com/exec/obidos/ASIN/088730995X/sawdust08-20">Rules for
Revolutionaries</a> is a good read.</p>

<h3>Marketing</h3>

<p>If you read only one book on marketing, it should be <a
href="http://www.amazon.com/exec/obidos/ASIN/0060517123/sawdust08-20">Crossing
the Chasm</a>.</p>

<p>But actually you should read at least a dozen books on
marketing.&nbsp; </p>

<p>Here's your second one: &nbsp;<a
href="http://www.amazon.com/exec/obidos/ASIN/0471028924/sawdust08-20">Differentiate
or Die</a></p>

<p>Now go find ten more.</p>

<h3>Sales</h3>

<p>I think <a
href="http://www.amazon.com/exec/obidos/ASIN/0684856018/sawdust08-20">Selling
the Wheel</a> is an outstanding book.&nbsp; At first you'll be tempted to stop
because it's kind of cheesy.&nbsp; Don't.&nbsp; Finish it all the way to the end.</p>

<h3>Useless but Enjoyable Fluff</h3>

<p>I really like the "Prey" series of novels by John Sandford.&nbsp;
Start at the beginning with <a
href="http://www.amazon.com/exec/obidos/ASIN/0425205819/sawdust08-20">Rules of
Prey</a></p>

<h3>WPF</h3>

<p>I have all of the following WPF books:</p>

<ul style='margin-top:0in' type=disc>
 <li >The one by <a
     href="http://www.amazon.com/exec/obidos/ASIN/0596510373/sawdust08-20">Chris
     Sells and Ian Griffiths</a></li>
 <li >The one by <a
     href="http://www.amazon.com/exec/obidos/ASIN/0672328917/sawdust08-20">Adam
     Nathan</a></li>
 <li >The one by <a
     href="http://www.amazon.com/exec/obidos/ASIN/0735619573/sawdust08-20">Charles
     Petzold</a></li>
 <li >The other one by Charles Petzold, <a
     href="http://www.amazon.com/exec/obidos/ASIN/0735623945/sawdust08-20">focused
     on WPF 3D</a></li>
</ul>

<p>These are all good, each in a different way.&nbsp; If you're
going to do anything serious with WPF, it seems to me that you should own them
all.</p>

<h3>Other Stuff</h3>

<p>The <a
href="http://www.amazon.com/exec/obidos/ASIN/0743269519/sawdust08-20">Seven
Habits of Highly Effective People</a> is still worth reading.&nbsp; None of Covey's
other books are nearly as good.</p>

<p>Any serious pool player has a copy of <a
href="http://www.amazon.com/exec/obidos/ASIN/0156005549/sawdust08-20">Byrne's
New Standard Book of Pool and Billiards</a>.</p>

<p>My favorite literary novel is <a
href="http://www.amazon.com/exec/obidos/ASIN/0140449264/sawdust08-20">The Count
of Monte Cristo</a>.&nbsp; The unabridged version is worth the extra trouble.</p>

<p>For dog lovers, <a
href="http://www.amazon.com/exec/obidos/ASIN/0060817097/sawdust08-20">Marley
&amp; Me</a> is terrific.</p>

<p></p>
]]>
</description>
</item>

<item>
<title>Yesterday's entry:  A comment and a correction</title>
<guid>http://software.ericsink.com/entries/ethics.html</guid>
<link>http://software.ericsink.com/entries/ethics.html</link>
<pubDate>Wed, 21 May 2008 08:33:06 CST</pubDate>
<description>
<![CDATA[
<h3>The Comment</h3>

<p>I've received a lot of feedback on <a
href="http://software.ericsink.com/entries/scrabble_1994.html">yesterday's blog entry</a>.&nbsp;
The two most common questions are:</p>

<ul style='margin-top:0in' type=disc>
 <li >Eric, why did you think that working on your Scrabble
     project was wrong?&nbsp; It doesn't seem all that bad.</li>
 <li >And since you thought it was so awful, can we assume that
     you would go ballistic if someone in your company was working on a pet
     project at the office?</li>
</ul>

<p>I sort of figured that if I wrote an article about a
software manager that I really admire, I didn't need to address the question of
how I would react in a similar situation.&nbsp; It should be fairly simple to
connect the dots.</p>

<p>But folks are having trouble with the fact that I held such a
strict attitude about my own transgression.&nbsp; They assume that I would be
similarly draconian with others.&nbsp; A fair assumption I suppose, but an incorrect
one.</p>

<p>When it comes to ethics, most people treat themselves
loosely and other strictly.&nbsp; Instead, try being strict with yourself and
gracious toward others.&nbsp; You'll get along a lot better with the world.</p>

<p>Do I really believe that working on a fun personal project
at work is such a heinous crime?&nbsp; Certainly not.&nbsp; But surely you can agree that
goofing off and trying to cover it up isn't exactly the way to win the employee
of the month award?</p>

<p>The truth is that I just don't believe in making excuses.&nbsp; I'm
not going to defend myself unless I have solid possession of the moral high
ground.</p>

<p>My kids read this blog.&nbsp; I'm trying to teach them to take
responsibility for <i>all</i> their choices, good and bad, big and small.&nbsp; How
can I do that if I'm not willing to set the example?</p>

<p>If I found somebody in my company working on a pet project
at work, I imagine I would handle it pretty much like Tim did:&nbsp; I would be more
disappointed in the company than in the individual.&nbsp; If people are working on
hobby code, then they're bored.&nbsp; In my opinion, the blame for a bored employee
splits about 80/20 toward management.</p>

<h3>The Correction</h3>

<p>Tim's current car is a Lamborghini, not a Ferrari.</p>

<p></p>
]]>
</description>
</item>

<item>
<title>Choose Your Manager</title>
<guid>http://software.ericsink.com/entries/scrabble_1994.html</guid>
<link>http://software.ericsink.com/entries/scrabble_1994.html</link>
<pubDate>Tue, 20 May 2008 08:00:00 CST</pubDate>
<description>
<![CDATA[
<h3>The Context:&nbsp; Being a slacker</h3>

<p>In the early months of 1994 I wrote a program to play
Scrabble.</p>

<p>It was a magnificent piece of code, easily the fastest
Scrabble program I had ever seen.&nbsp; The implementation (in C) was based on the
GADDAG data structure and algorithm explained in a <a
href="http://software.ericsink.com/downloads/faster-scrabble-gordon.pdf">paper</a> by Steven
Gordon.&nbsp; The resulting program was so fast that computer moves were
instantaneous.</p>

<p>Unfortunately I had to keep my software a secret.&nbsp; The
lawyers at Hasbro love to send <a href="http://en.wikipedia.org/wiki/Nastygram">nastygrams</a>
to anyone who implements a Scrabble program.&nbsp; These guys are a lot like the
lawyers at the RIAA who have become famous for their lawsuits against toddlers
and family pets.&nbsp; The Hasbro legal team is merely less prolific.</p>

<p>Actually there was one other reason why I kept my Scrabble
program a secret:</p>

<p>I wrote the entire thing on company time using my employer's
hardware.</p>

<p>At the time I was working for Spyglass.&nbsp; We had recently
finished shipping version 2.0 of our flagship product, Spyglass Transform.&nbsp;
Things were a bit slow, so I was discreetly hacking on my pet project.&nbsp; I setup
my office such that nobody could see my screen from the door.</p>

<p>Unfortunately, I gave myself away.&nbsp; At times when I was working
on my Scrabble code when my boss (Tim Krauskopf) walked in the door, I would
flinch and quickly try to minimize the window.&nbsp; About the third time it
happened, Tim said, "All right, what game are you playing?"&nbsp; Suddenly I wished
I actually <i>was</i> playing something like Doom.&nbsp; In that moment, working on
non-company software seemed more shameful than wasting time in a first-person
shooter.</p>

<p>I offered a full confession and an apology.&nbsp; </p>

<p>I don't remember what he said.&nbsp; </p>

<p>I do remember that he never mentioned it again.</p>

<h3>The Inflection Point:&nbsp; Day 1 of the browser wars</h3>

<p>A few weeks later, on April 4<sup>th</sup>, 1994, Tim once
again stepped into my office.&nbsp; He said he needed to talk with me somewhere offsite.&nbsp;
We left.</p>

<p>In that conversation, Tim told me that the Spyglass management
team was making the decision to abandon our then current business (scientific
data visualization tools) and get into the web browser business.&nbsp; He asked me
to immediately begin working and commit to giving a demo to an important
potential customer a few weeks later.</p>

<p>I shifted into high gear.&nbsp; I came in at 5:30 am every day
for weeks.&nbsp; I was writing code at a fantastic pace.&nbsp; The demo was successful.&nbsp;
We showed them our browser.&nbsp; It didn't have as many features as NCSA Mosaic,
but it was a lot faster.&nbsp; We didn't tell them that it was written from scratch
in less than a month by a kid who had never written any networking code
before.&nbsp; We got the sale.</p>

<p>And that was just the beginning.&nbsp; The project started out
with me alone, but two years later it was a team of 50 with me in a leadership
role.&nbsp; We were the first Internet IPO.&nbsp; We licensed our browser to Microsoft
and it became Internet Explorer.</p>

<p>That conversation on April 4<sup>th</sup> ended up being a
defining moment for my career.&nbsp; And it happened just a few weeks after Tim
caught me skiving off on the job.</p>

<p>What the %#$@ was Tim thinking?</p>

<h3>The Premise:&nbsp; Tim made a wise choice</h3>

<p>I'm going to surface a lesson from this story, but you
should probably read no further if you disagree with Tim's decision.</p>

<p>And if you do, I can't really argue with you.&nbsp; I'm not going
to defend my actions.&nbsp; I was being irresponsible, even dishonest.&nbsp; There are no
excuses for behavior like that.</p>

<p>Maybe Tim should have fired me.&nbsp; At the very least, maybe
Tim should not have entrusted the development of his company's next big product
to someone who lacked the discipline to stay on task.</p>

<p>Still, the overall results deserve some kind of voice in
this argument.&nbsp; Tim and his company were very successful.&nbsp; Tim drives a Ferrari
now.&nbsp; Tim's choice worked out very well for me, but it turned out pretty well
for Spyglass too.</p>

<h3>The Lesson Learned:&nbsp; Choose your manager carefully</h3>

<p>This story may seem like it's about me, but really it's
about Tim Krauskopf.</p>

<p>I've never asked Tim why, so I guess I don't really know.&nbsp; Maybe
he just believes that being obsessive to a fault about code isn't the worst
character defect for a developer to have.</p>

<p>I spent five years at Spyglass.&nbsp; The incident described
above is just one of many that left me in awe of Tim's leadership skills and discernment.&nbsp;
I don't think I ever really figured out what makes that guy tick, but I still
think of him every time I measure myself as a manager and leader.</p>

<p>The part that seems most astonishing to me is that he kept
his emotions in check.&nbsp; Didn't he feel any sort of disappointment or even
betrayal?&nbsp; Why didn't he overreact?&nbsp; That's what most people would have done.&nbsp;
I probably would have.</p>

<p>All I really know here is this:</p>

<p>Your manager plays an enormous role in determining the
success of your career.&nbsp; Choose your manager very, very carefully.</p>

<ul style='margin-top:0in' type=disc>
 <li >Choose somebody smart.&nbsp; </li>
 <li >Find somebody who is not merely smart, but "emotionally
     smart".</li>
 <li >Find somebody who is not merely smart, but wise.</li>
 <li >Choose a person from whom you can learn.</li>
</ul>

<p>Just to be clear, I am not saying you are powerless.&nbsp; Your
success is mostly determined by your own abilities and choices.</p>

<p>But one of those choices is the decision of who you are
going to work with.</p>

<p>Don't take that choice lightly.</p>

<p><i>Update:&nbsp; See my <a
href="http://software.ericsink.com/entries/ethics.html">follow-up</a>.</i></p>

<p></p>
]]>
</description>
</item>


</channel>
</rss>
