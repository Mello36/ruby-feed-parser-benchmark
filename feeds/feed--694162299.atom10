<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="http://feeds.feedburner.com/~d/styles/atom10full.xsl" type="text/xsl" media="screen"?><?xml-stylesheet href="http://feeds.feedburner.com/~d/styles/itemcontent.css" type="text/css" media="screen"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0">
    <title>metajack.im</title>
    <link rel="alternate" type="text/html" href="http://metajack.im/" />
    
    <id>tag:metajack.im,2008-08-29://1</id>
    <updated>2008-12-09T12:40:49Z</updated>
    <subtitle>a blog about startups and code</subtitle>
    <generator uri="http://www.sixapart.com/movabletype/">Movable Type Pro 4.21-en</generator>

<link rel="self" href="http://feeds.feedburner.com/metajack" type="application/atom+xml" /><entry>
    <title>code.stanziq.com Switching to Git</title>
    <link rel="alternate" type="text/html" href="http://feeds.feedburner.com/~r/metajack/~3/479201442/" />
    <id>tag:metajack.im,2008://1.129</id>

    <published>2008-12-09T05:39:33Z</published>
    <updated>2008-12-09T12:40:49Z</updated>

    <summary>My team and I have been talking about switching to distributed version control for some time now. We’ve had a lot of great contributions from the community, but we’ve felt the barriers to participation could have been much lower. After...</summary>
    <author>
        <name>Jack Moffitt</name>
        <uri>http://metajack.im/cgi-sys/cgiwrap/metajack/managed-mt/mt-cp.cgi?__mode=view&amp;blog_id=1&amp;id=1</uri>
    </author>
    
    <category term="code" label="code" scheme="http://www.sixapart.com/ns/types#tag" />
    <category term="git" label="git" scheme="http://www.sixapart.com/ns/types#tag" />
    <category term="palaver" label="palaver" scheme="http://www.sixapart.com/ns/types#tag" />
    <category term="punjab" label="punjab" scheme="http://www.sixapart.com/ns/types#tag" />
    <category term="speeqe" label="speeqe" scheme="http://www.sixapart.com/ns/types#tag" />
    <category term="stanziq" label="stanziq" scheme="http://www.sixapart.com/ns/types#tag" />
    <category term="strophe" label="strophe" scheme="http://www.sixapart.com/ns/types#tag" />
    
    <content type="html" xml:lang="en" xml:base="http://metajack.im/">
        &lt;p&gt;My team and I have been talking about switching to distributed version control for some time now.  We&amp;#8217;ve had a lot of great contributions from the community, but we&amp;#8217;ve felt the barriers to participation could have been much lower.  After investigating several different systems, we finally settled on &lt;a href="http://git.or.cz"&gt;Git&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;m still in the process of converting all the &lt;a href="http://subversion.tigris.org"&gt;Subversion&lt;/a&gt; history, but we&amp;#8217;ve already got our internal projects up and running on the new system.  The only other change is that Web repository browsing will be done via &lt;a href="http://hjemli.net/git/cgit/"&gt;cgit&lt;/a&gt; instead of &lt;a href="http://trac.edgewall.com"&gt;Trac&amp;#8217;s&lt;/a&gt; internal browser.  cgit turns out to be much, much faster than the git plugin for Trac, or Trac&amp;#8217;s Subversion browser, and it looks pretty nice to boot.&lt;/p&gt;

&lt;p&gt;At some point I&amp;#8217;d like to write up a list of pros and cons of the various distributed version control systems that we found during our research.  Most of the reviews we found were from people who compared them only to Subversion and not to each other, and sites like &lt;a href="http://whygitisbetterthanx.com"&gt;whygitisbetterthanx.com&lt;/a&gt; are a little one sided.&lt;/p&gt;

        

    &lt;img src="http://feeds.feedburner.com/~r/metajack/~4/479201442" height="1" width="1"/&gt;</content>
<feedburner:origLink>http://metajack.im/2008/12/08/codestanziqcom-switching-to-git/</feedburner:origLink></entry>

<entry>
    <title>Great Peter Saint-Andre Interview on FLOSS Weekly</title>
    <link rel="alternate" type="text/html" href="http://feeds.feedburner.com/~r/metajack/~3/478068841/" />
    <id>tag:metajack.im,2008://1.128</id>

    <published>2008-12-08T03:41:07Z</published>
    <updated>2008-12-08T03:41:09Z</updated>

    <summary>Peter Saint-Andre was interviewed this week on FLOSS Weekly. I’m not sure how I missed this podcast series before, but it is quite excellent, and I’ve been making up for lost time listening to back episodes. Several of us listened...</summary>
    <author>
        <name>Jack Moffitt</name>
        <uri>http://metajack.im/cgi-sys/cgiwrap/metajack/managed-mt/mt-cp.cgi?__mode=view&amp;blog_id=1&amp;id=1</uri>
    </author>
    
    <category term="interview" label="interview" scheme="http://www.sixapart.com/ns/types#tag" />
    <category term="jabber" label="jabber" scheme="http://www.sixapart.com/ns/types#tag" />
    <category term="podcast" label="podcast" scheme="http://www.sixapart.com/ns/types#tag" />
    <category term="xmpp" label="xmpp" scheme="http://www.sixapart.com/ns/types#tag" />
    
    <content type="html" xml:lang="en" xml:base="http://metajack.im/">
        &lt;p&gt;&lt;a href="http://stpeter.im"&gt;Peter Saint-Andre&lt;/a&gt; was interviewed this week on &lt;a href="http://twit.tv/FLOSS"&gt;FLOSS Weekly&lt;/a&gt;.  I&amp;#8217;m not sure how I missed this podcast series before, but it is quite excellent, and I&amp;#8217;ve been making up for lost time listening to back episodes.  Several of us listened to &lt;a href="http://twit.tv/floss49"&gt;Peter&amp;#8217;s interview&lt;/a&gt; live, but in case you missed it, it is now available on the main site and through iTunes.&lt;/p&gt;

        

    &lt;img src="http://feeds.feedburner.com/~r/metajack/~4/478068841" height="1" width="1"/&gt;</content>
<feedburner:origLink>http://metajack.im/2008/12/07/great-peter-saint-andre-interview-on-floss-weekly/</feedburner:origLink></entry>

<entry>
    <title>Web Hooks Notifications For Git</title>
    <link rel="alternate" type="text/html" href="http://feeds.feedburner.com/~r/metajack/~3/477157661/" />
    <id>tag:metajack.im,2008://1.127</id>

    <published>2008-12-07T02:55:08Z</published>
    <updated>2008-12-07T02:55:10Z</updated>

    <summary>A few days ago I posted about my commitbot code which notifies XMPP multi-user chat rooms about Git repository changes. The script used GitHub’s Web hook API. For those of you not using GitHub, I’ve also written a Web hook...</summary>
    <author>
        <name>Jack Moffitt</name>
        <uri>http://metajack.im/cgi-sys/cgiwrap/metajack/managed-mt/mt-cp.cgi?__mode=view&amp;blog_id=1&amp;id=1</uri>
    </author>
    
    <category term="code" label="code" scheme="http://www.sixapart.com/ns/types#tag" />
    <category term="git" label="git" scheme="http://www.sixapart.com/ns/types#tag" />
    <category term="python" label="python" scheme="http://www.sixapart.com/ns/types#tag" />
    
    <content type="html" xml:lang="en" xml:base="http://metajack.im/">
        &lt;p&gt;A few days ago I posted about my &lt;a href="http://github.com/metajack/commitbot/tree/master"&gt;commitbot&lt;/a&gt; code which notifies XMPP multi-user chat rooms about &lt;a href="http://git.or.cz"&gt;Git&lt;/a&gt; repository changes.  The script used &lt;a href="http://github.com"&gt;GitHub&amp;#8217;s&lt;/a&gt; &lt;a href="http://github.com/guides/post-receive-hooks"&gt;Web hook API&lt;/a&gt;.  For those of you not using GitHub, I&amp;#8217;ve also written a Web hook notifier post-receive hook script.&lt;/p&gt;

&lt;p&gt;You can find the Python code in my &lt;a href="http://github.com/metajack/notify-webhook/tree/master"&gt;notify-webhook&lt;/a&gt; GitHub repository.  It will allow any Git repository to use Web hook enabled services, and it follows the GitHub API as closely as possible.  &lt;/p&gt;

&lt;p&gt;For example, you could use notify-webhook along with any of the service integration scripts that GitHub provides in its &lt;a href="http://github.com/github/github-services/tree/master"&gt;github-services&lt;/a&gt; to provide things like XMPP, IRC, Campfire, or Twitter integration for arbitrary Git repositories, not just those hosted on GitHub.&lt;/p&gt;

        

    &lt;img src="http://feeds.feedburner.com/~r/metajack/~4/477157661" height="1" width="1"/&gt;</content>
<feedburner:origLink>http://metajack.im/2008/12/06/web-hooks-notifications-for-git/</feedburner:origLink></entry>

<entry>
    <title>My Identi.ca Wishlist</title>
    <link rel="alternate" type="text/html" href="http://feeds.feedburner.com/~r/metajack/~3/476407292/" />
    <id>tag:metajack.im,2008://1.126</id>

    <published>2008-12-06T06:28:42Z</published>
    <updated>2008-12-06T06:28:45Z</updated>

    <summary>Identi.ca has come a long way in a short time. Although I don’t agree with all the technical decisions Evan makes, by and large, he’s created a useful service and a community that I enjoy participating in. Having been a...</summary>
    <author>
        <name>Jack Moffitt</name>
        <uri>http://metajack.im/cgi-sys/cgiwrap/metajack/managed-mt/mt-cp.cgi?__mode=view&amp;blog_id=1&amp;id=1</uri>
    </author>
    
    <category term="identica" label="identica" scheme="http://www.sixapart.com/ns/types#tag" />
    <category term="jabber" label="jabber" scheme="http://www.sixapart.com/ns/types#tag" />
    <category term="microblogging" label="microblogging" scheme="http://www.sixapart.com/ns/types#tag" />
    <category term="openmicroblogging" label="openmicroblogging" scheme="http://www.sixapart.com/ns/types#tag" />
    <category term="xmpp" label="xmpp" scheme="http://www.sixapart.com/ns/types#tag" />
    
    <content type="html" xml:lang="en" xml:base="http://metajack.im/">
        &lt;p&gt;&lt;a href="htt://identi.ca"&gt;Identi.ca&lt;/a&gt; has come a long way in a short time.  Although I don&amp;#8217;t agree with all the technical decisions &lt;a href="http://identi.ca/evan"&gt;Evan&lt;/a&gt; makes, by and large, he&amp;#8217;s created a useful service and a community that I enjoy participating in.  Having been a regular user or some time, I have accumulated a number of wishlist items that I would love to see implemented.&lt;/p&gt;

        &lt;h2&gt;More XMPP Integration&lt;/h2&gt;

&lt;p&gt;While I would love for Identi.ca to use XMPP on the back end, that is not what I mean in this case.  The XMPP chat interface to Identi.ca works quite well, but it is limited to receiving and posting dents, and posting private dents.  Here are some of the missing pieces I&amp;#8217;m waiting for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Direct messages should go to my IM client; currently I have to use the Web site to receive direct messages, even though I can send them right from my IM client.  It would be even better if the XMPP bot was rewritten as a component so that it could make direct messages appears in new tabs like &lt;a href="http://tweet.im"&gt;Tweet.im&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Subscribing and unsubscribing from contacts is only available on the Web site.  I would love to be able to type &lt;code&gt;follow tetsuo&lt;/code&gt; when I notice someone having an interesting conversation with someone I don&amp;#8217;t know.  This would go perfect with the unsubscribed @-reply support that was recently added.&lt;/li&gt;
&lt;li&gt;Notices of favorites should get sent to my IM client as well, perhaps as a configurable option.  I don&amp;#8217;t want to keep switching back and forth between e-mail, the Web browser, and my IM client.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://enjit.com"&gt;Enjit&lt;/a&gt; has a great reply system in their real time &lt;a href="http://www.friendfeed.com"&gt;FriendFeed&lt;/a&gt; interface.  It would be nice to have something like this in Identi.ca, and one use of it would be to allow marking favorites right from the IM client.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Stop Teasing Me&lt;/h2&gt;

&lt;p&gt;Why does Identi.ca tease me so?  Everytime someone favorites one of my dents, I get a e-mail notice about it.  That notice however doesn&amp;#8217;t include the text of the dent I sent, so I have no idea which dent amused them without clicking through to the Web site.  &lt;/p&gt;

&lt;p&gt;I feel like Identi.ca does not respect my time when it makes me jump through this hoop.  Just give me the data I want already; it&amp;#8217;s not like Evan has ads to sell on the Web site.&lt;/p&gt;

&lt;h2&gt;IM Interface Polish&lt;/h2&gt;

&lt;p&gt;The Web interface has lots of polish that does not exist yet in the IM interface.  For example, the Web interface will shorten URLs automatically.  It will also put the real URL in the tooltip.  The IM interface has none of this.  I have to manually shorten my URLs, and I never know what kind of link I&amp;#8217;m clicking on.&lt;/p&gt;

&lt;h2&gt;Out Of Band Information&lt;/h2&gt;

&lt;p&gt;I like tags, but rarely use them because they eat up a lot of my 140 character allotment.  These should be transmitted out of band in the Atom payload and not count against my character limit.  I think they would be a lot more useful this way.&lt;/p&gt;

&lt;p&gt;The IM interface could just append them to the end of dents, just as if the person had typed them there.  It could also append any of the automatic tags that are not supported at Identi.ca.&lt;/p&gt;

&lt;h2&gt;Changelogs and Documentation&lt;/h2&gt;

&lt;p&gt;Evan and others are adding new features all the time, but half the time I never know about them until I see someone else using them or discussing them.  Identi.ca really needs a small blog that posts all the updates and new features.  I want to play with new stuff, but I can&amp;#8217;t if I don&amp;#8217;t know about it.&lt;/p&gt;

&lt;p&gt;It would also be great if all the features were documented somewhere.  i see peole talking about the new &lt;code&gt;@#tag&lt;/code&gt; type group support, but I can&amp;#8217;t find anything about how this works.  New people coming to the service are going to have a steeper and steeper learning curve.&lt;/p&gt;

&lt;p&gt;At least the thriving community makes it easy to pick up these things by osmosis, but it could be better.&lt;/p&gt;

&lt;h2&gt;What About You?&lt;/h2&gt;

&lt;p&gt;What are your wishlist features?  Even if you use some other microblogging server, I&amp;#8217;d love to know what you find lacking.  The ideas are still young, and I&amp;#8217;m excited to see all the experimentation.&lt;/p&gt;

&lt;p&gt;If you aren&amp;#8217;t on Identi.ca, give it a try.  You can follow me at &lt;a href="http://identi.ca/metajack"&gt;identi.ca/metajack&lt;/a&gt;.&lt;/p&gt;

    &lt;img src="http://feeds.feedburner.com/~r/metajack/~4/476407292" height="1" width="1"/&gt;</content>
<feedburner:origLink>http://metajack.im/2008/12/05/my-identica-wishlist/</feedburner:origLink></entry>

<entry>
    <title>Send GitHub Commits to XMPP Chat Rooms</title>
    <link rel="alternate" type="text/html" href="http://feeds.feedburner.com/~r/metajack/~3/475422407/" />
    <id>tag:metajack.im,2008://1.125</id>

    <published>2008-12-05T06:16:46Z</published>
    <updated>2008-12-05T06:16:48Z</updated>

    <summary>We’re in the process of switching our development workflow from Subversion to git. As part of this transition, we wanted to put notifications in our development group chat room. GitHub has already standardized Web hooks and provides integration with IRC...</summary>
    <author>
        <name>Jack Moffitt</name>
        <uri>http://metajack.im/cgi-sys/cgiwrap/metajack/managed-mt/mt-cp.cgi?__mode=view&amp;blog_id=1&amp;id=1</uri>
    </author>
    
    <category term="code" label="code" scheme="http://www.sixapart.com/ns/types#tag" />
    <category term="git" label="git" scheme="http://www.sixapart.com/ns/types#tag" />
    <category term="github" label="github" scheme="http://www.sixapart.com/ns/types#tag" />
    <category term="jabber" label="jabber" scheme="http://www.sixapart.com/ns/types#tag" />
    <category term="python" label="python" scheme="http://www.sixapart.com/ns/types#tag" />
    <category term="twisted" label="twisted" scheme="http://www.sixapart.com/ns/types#tag" />
    <category term="wokkel" label="wokkel" scheme="http://www.sixapart.com/ns/types#tag" />
    <category term="xmpp" label="xmpp" scheme="http://www.sixapart.com/ns/types#tag" />
    
    <content type="html" xml:lang="en" xml:base="http://metajack.im/">
        &lt;p&gt;We&amp;#8217;re in the process of switching our development workflow from &lt;a href="http://subversion.tigris.org"&gt;Subversion&lt;/a&gt; to &lt;a href="http://git.or.cz"&gt;git&lt;/a&gt;.  As part of this transition, we wanted to put notifications in our development group chat room.  &lt;a href="http://github.com"&gt;GitHub&lt;/a&gt; has already standardized &lt;a href="http://github.com/guides/post-receive-hooks"&gt;Web hooks&lt;/a&gt; and provides integration with IRC and other services.  I decided to implement an XMPP bot that listened for these HTTP push notifications and send commit information to the room.  &lt;/p&gt;

&lt;p&gt;The code is available in my &lt;a href="http://github.com/metajack/commitbot/tree/master"&gt;commitbot repository&lt;/a&gt;.  Thanks to &lt;a href="http://twistedmatrix.com"&gt;Twisted&lt;/a&gt; and &lt;a href="http://wokkel.ik.nu"&gt;Wokkel&lt;/a&gt; this was surprisingly simple and occupies less than a hundred lines of code.  Commitbot will send both plain text and &lt;a href="http://www.xmpp.org/extensions/xep-0071.html"&gt;XHTML-IM&lt;/a&gt; formatted messages.  The plain ones look like this:&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src="http://metajack.im/code/gitbot-plain.png" alt="gitbot-plain.png" border="0" width="680" height="66" /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;The next part of this project is to implement a git hook script that can send these notifications just like GitHub does.&lt;/p&gt;

        

    &lt;img src="http://feeds.feedburner.com/~r/metajack/~4/475422407" height="1" width="1"/&gt;</content>
<feedburner:origLink>http://metajack.im/2008/12/04/send-github-commits-to-xmpp-chat-rooms/</feedburner:origLink></entry>

<entry>
    <title>BOSH As Interoperable Transport Solution</title>
    <link rel="alternate" type="text/html" href="http://feeds.feedburner.com/~r/metajack/~3/473995404/" />
    <id>tag:metajack.im,2008://1.124</id>

    <published>2008-12-03T21:24:09Z</published>
    <updated>2008-12-03T21:24:11Z</updated>

    <summary>Over on the Not Invented Here blog, Lisa talks about BOSH: If it really becomes universally supported in servers, then we could write any new application on top of XMPP and it will work over HTTP as well as natively...</summary>
    <author>
        <name>Jack Moffitt</name>
        <uri>http://metajack.im/cgi-sys/cgiwrap/metajack/managed-mt/mt-cp.cgi?__mode=view&amp;blog_id=1&amp;id=1</uri>
    </author>
    
    <category term="bosh" label="bosh" scheme="http://www.sixapart.com/ns/types#tag" />
    <category term="jabber" label="jabber" scheme="http://www.sixapart.com/ns/types#tag" />
    <category term="xmpp" label="xmpp" scheme="http://www.sixapart.com/ns/types#tag" />
    
    <content type="html" xml:lang="en" xml:base="http://metajack.im/">
        &lt;p&gt;Over on the &lt;a href="http://nih.blogspot.com/"&gt;Not Invented Here&lt;/a&gt; blog, Lisa &lt;a href="http://nih.blogspot.com/2008/12/im-following-up-on-my-last-rant-on.html"&gt;talks&lt;/a&gt; about &lt;a href="http://www.xmpp.org/extensions/xep-0124.html"&gt;BOSH&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If it really becomes universally supported in servers, then we could write any new application on top of XMPP and it will work over HTTP as well as natively over TCP. Now that&amp;#8217;s interoperability! &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Many people are starting to do exactly this.  Why provide two transports when one will do?  You can even use the same API to interact with XMPP over TCP as with HTTP; just see &lt;a href="http://code.stanziq.com/strophe"&gt;Strophe&lt;/a&gt; for an example.&lt;/p&gt;

&lt;p&gt;Another thing to note is that BOSH is split up into two parts.  One part just sets up a two way XML stream; the second part puts XMPP semantics on top of this.  I don&amp;#8217;t believe any of the BOSH implementations currently support the non-XMPP BOSH, but I&amp;#8217;m sure they could be easily modified to do so.&lt;/p&gt;

&lt;p&gt;This is yet another reason to use BOSH and XMPP over other Comet-y techniques.&lt;/p&gt;

        

    &lt;img src="http://feeds.feedburner.com/~r/metajack/~4/473995404" height="1" width="1"/&gt;</content>
<feedburner:origLink>http://metajack.im/2008/12/03/bosh-as-interoperable-transport-solution/</feedburner:origLink></entry>

<entry>
    <title>Exploring XMPP</title>
    <link rel="alternate" type="text/html" href="http://feeds.feedburner.com/~r/metajack/~3/472563948/" />
    <id>tag:metajack.im,2008://1.123</id>

    <published>2008-12-02T15:07:13Z</published>
    <updated>2008-12-02T15:07:16Z</updated>

    <summary>A few weeks ago I gave a presentation called Exploring XMPP at SAPO Codebits ‘08. My new friends at SAPO have just informed me that a video version of the talk is available now for all to enjoy. You can...</summary>
    <author>
        <name>Jack Moffitt</name>
        <uri>http://metajack.im/cgi-sys/cgiwrap/metajack/managed-mt/mt-cp.cgi?__mode=view&amp;blog_id=1&amp;id=1</uri>
    </author>
    
    <category term="codebits" label="codebits" scheme="http://www.sixapart.com/ns/types#tag" />
    <category term="conference" label="conference" scheme="http://www.sixapart.com/ns/types#tag" />
    <category term="jabber" label="jabber" scheme="http://www.sixapart.com/ns/types#tag" />
    <category term="speaking" label="speaking" scheme="http://www.sixapart.com/ns/types#tag" />
    <category term="video" label="video" scheme="http://www.sixapart.com/ns/types#tag" />
    <category term="xmpp" label="xmpp" scheme="http://www.sixapart.com/ns/types#tag" />
    
    <content type="html" xml:lang="en" xml:base="http://metajack.im/">
        &lt;p&gt;A few weeks ago I gave a presentation called &lt;em&gt;Exploring XMPP&lt;/em&gt; at &lt;a href="http://codebits.sapo.pt"&gt;SAPO Codebits &amp;#8216;08&lt;/a&gt;.  My new friends at SAPO have just informed me that a video version of the talk is available now for all to enjoy.  You can &lt;a href="http://codebits.sapo.pt/intra/s/speaker/11"&gt;watch it here&lt;/a&gt;; the video is about half way down the page.&lt;/p&gt;

&lt;p&gt;The talk explorers a hypothetical application similar to &lt;a href="http://oss.oetiker.ch/mrtg/"&gt;MRTG&lt;/a&gt; but built on top of &lt;a href="http://www.xmpp.org"&gt;XMPP&lt;/a&gt; instead of SNMP.  I start with XMPP basics including the network, addressing, and a small primer on the three main stanza types.  After that, I jump write into the various bits of protocol to build the application.  I talk about presence, &lt;a href="http://www.xmpp.org/extensions/xep-0030.html"&gt;service discovery&lt;/a&gt;, &lt;a href="http://www.xmpp.org/extensions/xep-0050.html"&gt;ad-hoc commands&lt;/a&gt;, and &lt;a href="http://www.xmpp.org/extensions/xep-0060.html"&gt;pubsub&lt;/a&gt;; all of these pieces are used for various parts of the application.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;d love to know what you think of the talk or if you have any suggestions.  I&amp;#8217;ll use the feedback to improve future talks.&lt;/p&gt;

        

    &lt;img src="http://feeds.feedburner.com/~r/metajack/~4/472563948" height="1" width="1"/&gt;</content>
<feedburner:origLink>http://metajack.im/2008/12/02/exploring-xmpp/</feedburner:origLink></entry>

<entry>
    <title>Why You Should Drop Out Of School</title>
    <link rel="alternate" type="text/html" href="http://feeds.feedburner.com/~r/metajack/~3/472035078/" />
    <id>tag:metajack.im,2008://1.122</id>

    <published>2008-12-02T03:52:38Z</published>
    <updated>2008-12-02T03:52:41Z</updated>

    <summary>There are a thousand stories of startup founders dropping out of school. Some of these stories end with giant successes, and some of them end with failure. I dropped out of school in 1999 to join an Internet startup, and...</summary>
    <author>
        <name>Jack Moffitt</name>
        <uri>http://metajack.im/cgi-sys/cgiwrap/metajack/managed-mt/mt-cp.cgi?__mode=view&amp;blog_id=1&amp;id=1</uri>
    </author>
    
    <category term="school" label="school" scheme="http://www.sixapart.com/ns/types#tag" />
    <category term="startups" label="startups" scheme="http://www.sixapart.com/ns/types#tag" />
    
    <content type="html" xml:lang="en" xml:base="http://metajack.im/">
        &lt;p&gt;There are a thousand stories of startup founders dropping out of school.  Some of these stories end with giant successes, and some of them end with failure.  I dropped out of school in 1999 to join an Internet startup, and my story is a happy one.  Even if one were to change the outcome, I would still have dropped out.  Here&amp;#8217;s why you should think about it.&lt;/p&gt;

&lt;p&gt;School will always be an option, at least in most circumstances.  Perhaps your situation is special, and you have some specific financial reason to be locked into school.  In my case, I was on a full scholarship to a private university I could not otherwise afford.  It certainly wasn&amp;#8217;t a decision I made lightly, but it was still a good one.  Years later, it wasn&amp;#8217;t very difficult to go back and finish up.  If I had not gotten excited about new projects, I would probably have started a graduate degree.  It&amp;#8217;s alright that I didn&amp;#8217;t; I can go back and do that in a few years.&lt;/p&gt;

&lt;p&gt;Opportunity will not always be an option.  While you may have many opportunities available in your lifetime, you must make a decision whether to act on them.  You can always go back to school, but you can&amp;#8217;t always be a founder of some company or help invent some new gadget.  You may have a lifetime of regret if you miss some interesting opportunity, but with school, you can always resume where you left off.&lt;/p&gt;

&lt;p&gt;It is much easier to take risks when you are young.  This is not because older people are not as clever, but because they have formed families and collected obligations.  It&amp;#8217;s certainly possible for them to take risks, but the amount of responsibility wrangling they have to do is often considerably greater.  Why should you spend the easiest years of your life in terms of taking on risk, doing the safest possible thing?&lt;/p&gt;

&lt;p&gt;I think that everyone gets a lot of chances in life to do wonderful things, but too few people recognize them or fail to act.  If you see one of these chances, I urge you to take it; you can always resume your safer life if it doesn&amp;#8217;t work out.&lt;/p&gt;

        

    &lt;img src="http://feeds.feedburner.com/~r/metajack/~4/472035078" height="1" width="1"/&gt;</content>
<feedburner:origLink>http://metajack.im/2008/12/01/why-you-should-drop-out-of-school/</feedburner:origLink></entry>

<entry>
    <title>Chesspark Design Details Part 3: Game Design</title>
    <link rel="alternate" type="text/html" href="http://feeds.feedburner.com/~r/metajack/~3/465583438/" />
    <id>tag:metajack.im,2008://1.121</id>

    <published>2008-11-25T23:40:42Z</published>
    <updated>2008-11-25T23:40:46Z</updated>

    <summary>In part one we discussed the merits of XMPP as a basis for Chesspark, and in part two we explored session handling. Now we’ll jump into the heart of Chesspark, which is the game design....</summary>
    <author>
        <name>Jack Moffitt</name>
        <uri>http://metajack.im/cgi-sys/cgiwrap/metajack/managed-mt/mt-cp.cgi?__mode=view&amp;blog_id=1&amp;id=1</uri>
    </author>
    
    <category term="chess" label="chess" scheme="http://www.sixapart.com/ns/types#tag" />
    <category term="chesspark" label="chesspark" scheme="http://www.sixapart.com/ns/types#tag" />
    <category term="jabber" label="jabber" scheme="http://www.sixapart.com/ns/types#tag" />
    <category term="startups" label="startups" scheme="http://www.sixapart.com/ns/types#tag" />
    <category term="xmpp" label="xmpp" scheme="http://www.sixapart.com/ns/types#tag" />
    
    <content type="html" xml:lang="en" xml:base="http://metajack.im/">
        &lt;p&gt;In &lt;a href="http://metajack.im/2008/11/21/chesspark-design-details-part-1-why-xmpp/"&gt;part one&lt;/a&gt; we discussed the merits of &lt;a href="http://www.xmpp.org"&gt;XMPP&lt;/a&gt; as a basis for &lt;a href="http://www.chesspark.com"&gt;Chesspark&lt;/a&gt;, and in &lt;a href="http://metajack.im/2008/11/24/chesspark-design-details-part-2-session-handling/"&gt;part two&lt;/a&gt; we explored session handling.  Now we&amp;#8217;ll jump into the heart of Chesspark, which is the game design.  &lt;/p&gt;

        &lt;h2&gt;A Little About Chess Games&lt;/h2&gt;

&lt;p&gt;Chess is a game with no secrets, only strategy.  In game theory, this is called &lt;a href="http://en.wikipedia.org/wiki/Perfect_information"&gt;perfect information&lt;/a&gt;.  Each player, and everyone watching, has all of the game state at all times.  One of our tasks is to ensure that everyone has access to the game state and is notified of any state changes as they happen.&lt;/p&gt;

&lt;p&gt;Chess is also a game with rules, and these rules must be enforced.  In casual games this is enforced by social contract; if you violate the rules no one will play with you.  Since social contracts are practically useless on the Internet, another task for us is enforcing the game rules.&lt;/p&gt;

&lt;p&gt;Chess is a timed game.  Many people who have played only casually will have never played chess with a clock, but this is how serious chess is played.  There are several timing systems.  The most basic one gives each player a fixed amount of time to make all moves.  We&amp;#8217;ll need to keep everyone&amp;#8217;s game clocks synchronized.&lt;/p&gt;

&lt;p&gt;Chess is also full of meta-rules that govern tournaments and club play as well as ranking systems for competition.  Where appropriate, we&amp;#8217;ll need to implement these.  For example, people expect to have a chess rating, and they expect that bad behavior will be discouraged.&lt;/p&gt;

&lt;h2&gt;Chesspark Design Principles&lt;/h2&gt;

&lt;p&gt;There are several principles that we adopted very early.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;The arbiter&lt;/strong&gt; - Since peer to peer rule enforcement leads to unhappy players when one person cheats, we wanted to enforce game logic as a third party.  This means that each player trusts this enforcer, call the arbiter, which manages game state changes.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Watching games&lt;/strong&gt; - Watching other people play is fun, especially when the game is close, the players are friends, or the action is fast.  We wanted to support watching games as well as playing them.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;True to life&lt;/strong&gt; - Chess is played in person often, and this is how most people are familiar with the game.  We wanted to make sure that playing chess at Chesspark stayed as close to real life chess as possible.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These decisions help shape much of our technology at Chesspark, and except for staying true to life, are applicable to most any game.&lt;/p&gt;

&lt;h2&gt;Broadcasting State&lt;/h2&gt;

&lt;p&gt;There are two big tools for broadcasting information in XMPP - &lt;a href="http://www.xmpp.org/extensions/xep-0060.html"&gt;pubsub&lt;/a&gt; and &lt;a href="http://www.xmpp.org/extensions/xep-0045.html"&gt;multi-user chat&lt;/a&gt;.  Chesspark uses both tools for different purposes.  For broadcasting game state, we chose multi-user chat.&lt;/p&gt;

&lt;p&gt;Multi-user chat (MUC) already has many of the important pieces we needed for a game.  Each game is represented by a room.  All the participants in a game can talk and interact with each other.  Game state is just another message to the room.  MUC participants have roles which tell everyone how they are related to the room, and each participant has presence information on the others.&lt;/p&gt;

&lt;p&gt;Pubsub, in contrast, does not have a good way for subscribers to know about or interact with one another.  If there was a pubsub node representing a game, each participant would have to be a publisher in order to broadcast presence and chat messages.  It can be done, but MUC seemed the more natural fit.&lt;/p&gt;

&lt;h2&gt;Extending MUC&lt;/h2&gt;

&lt;p&gt;We extended normal MUC in a few different ways to support some of the Chesspark features.  &lt;/p&gt;

&lt;p&gt;First, we added a new player role.  Having a player role allows occupants to see who the two players are easily.  Without the role, each occupant would have to ask the arbiter who the players were.  Having a new role also let&amp;#8217;s us change the communication rules.&lt;/p&gt;

&lt;h3&gt;Special Delivery&lt;/h3&gt;

&lt;p&gt;Normally in a MUC people talk and everyone can see it.  There are also moderated rooms where only people with permission to talk can do so, but even in this case, all occupants can see what is said.  This isn&amp;#8217;t so great for chess games.&lt;/p&gt;

&lt;p&gt;Chess takes a lot of concentration, and we didn&amp;#8217;t want idle conversation among game watchers to interrupt the players.  This follows from our principle of staying true to life.  In a real life tournament, it is considered quite rude to stand next to players and start talking.  The area surrounding players is kept quiet.&lt;/p&gt;

&lt;p&gt;Another issue is that people watching chess games want to discuss the moves, potential tactics, and future plans.  Players, however, are not allowed to receive advice or help from anyone, so if they can see the chat of watchers, then there is a real problem.&lt;/p&gt;

&lt;p&gt;We solved this by making roles affect who sees chat messages.  In a chess game room, players can send messages and these messages are seen by everyone in the room.  Regular participants can also talk, but only other regular participants can see their messages.  A player never sees any chat from an observer during a game.  Once a game is over, the players can see the observers&amp;#8217; chat messages.&lt;/p&gt;

&lt;p&gt;Another feature related to this is to have a special chat mode where a player can send a message &lt;em&gt;only&lt;/em&gt; to observers.  The other player will never see it.  This allows banter matches, where players share their strategy with the participants without revealing their plans to the opponent.&lt;/p&gt;

&lt;h3&gt;The Need For Palaver&lt;/h3&gt;

&lt;p&gt;No existing MUC implementation was extensible in the way we needed it, so we were forced to write our own.  The result is a pluggable MUC implementation called &lt;a href="http://code.stanziq.com/palaver"&gt;Palaver&lt;/a&gt;.   Palaver can be extended via plugins to support the features Chesspark required and many other types of new behavior.&lt;/p&gt;

&lt;p&gt;There are three types of plugins for Palaver, join, presence, and message.  Join plugins control access to the room. A presence plugin can inject extended stanzas into room presence.  Message plugins affect message delivery and acceptance.&lt;/p&gt;

&lt;p&gt;Chesspark uses all three types.  We use a join plugin to keep out non-members from the game rooms.  We use a presence plugin to include extra information like professional chess titles or Chesspark specific member roles.  Finally, the message plugin uses the occupant&amp;#8217;s role to affect message delivery.&lt;/p&gt;

&lt;h2&gt;Initial State And Clocks&lt;/h2&gt;

&lt;p&gt;When players first join a game room, they need to know the current state.  Sending them state updates will not be helpful unless they have the current state as context.  Arbiter handles this by watching for room joins and then sending out the current copy of the state privately to the person who joined.  Move numbers are communicated in the initial state and in the state changes, so the new participant will always know which information is new.&lt;/p&gt;

&lt;p&gt;Clocks updates are sent periodically by the arbiter to all players, and the current time is also sent with any board state changes.  This allows everyone to keep in sync.&lt;/p&gt;

&lt;h2&gt;Game State Changes&lt;/h2&gt;

&lt;p&gt;Any time a player manipulates game state, the request is sent directly to the arbiter via an &lt;code&gt;&amp;lt;iq/&amp;gt;&lt;/code&gt; stanza.  The arbiter can accept the action or reject it as illegal or malformed.   If the action is legal, the arbiter will broadcast it via a &lt;code&gt;&amp;lt;message/&amp;gt;&lt;/code&gt; to the game room.&lt;/p&gt;

&lt;p&gt;For example, a player sends arbiter a move request:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;pre&gt;
    &amp;lt;iq to='arbiter.chesspark.com' from='metajack@chesspark.com/cpc' 
        type='set' id='move1'&gt;
        &amp;lt;game xmlns='http://onlinegamegroup.com/xml/chesspark-01'&gt;
            &amp;lt;move&gt;e2e4&amp;lt;/move&gt;
        &amp;lt;/game&gt;
    &amp;lt;/iq&gt;
&lt;/pre&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Instead of a &lt;code&gt;&amp;lt;move/&amp;gt;&lt;/code&gt; element, we might also have &lt;code&gt;&amp;lt;resign/&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;addtime/&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;draw/&amp;gt;&lt;/code&gt;, etc.&lt;/p&gt;

&lt;p&gt;Arbiter determines whether this move is legal.  Is it our turn?  Is there a piece in this location?  Can that piece be moved to the destination?  If it&amp;#8217;s legal, arbiter will return an empty result to us, and broadcast the message to the room:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;pre&gt;
    &amp;lt;iq from='arbiter.chesspark.com' to='metajack@chesspark.com/cpc' 
        type='result' id='move1'/&gt;
    &amp;lt;message from='1234@games.chesspark.com/Arbiter' 
             to='1234@games.chesspark.com' type='groupchat'&gt;
        &amp;lt;game xmlns='http://onlinegamegroup.com/xml/chesspark-01' 
              white='metajack@chesspark.com' black='trainer@chesspark.com' 
              id='1234'&gt;
            &amp;lt;move player='metajack@chesspark.com' side='white' ply='1' number='1'&gt;
                e2e4
            &amp;lt;/move&gt;
            &amp;lt;time control='0' side='black'&gt;1800.0&amp;lt;/time&gt;
            &amp;lt;time control='0' side='white'&gt;1800.0&amp;lt;/time&gt;
        &amp;lt;/game&gt;
    &amp;lt;/message&gt;
&lt;/pre&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Note that arbiter includes the move number, the ply (or half-move) number, the side, the player name, the move, and the current clock states.  A client can easily detect if this state change is already included in their known state by checking the ply number, and it has all the information it needs to update to the new state and synchronize the clocks.&lt;/p&gt;

&lt;h2&gt;Stay Tuned&lt;/h2&gt;

&lt;p&gt;There are still a few more things to cover regarding game design.  Specifically, how are games negotiated and created?  How are ratings handled?  What about cheating, abuse, and all the edge cases?&lt;/p&gt;

&lt;p&gt;We&amp;#8217;ll cover those in the next installment.&lt;/p&gt;

    &lt;img src="http://feeds.feedburner.com/~r/metajack/~4/465583438" height="1" width="1"/&gt;</content>
<feedburner:origLink>http://metajack.im/2008/11/25/chesspark-design-details-part-3-game-design/</feedburner:origLink></entry>

<entry>
    <title>Chesspark Design Details Part 2: Session Handling</title>
    <link rel="alternate" type="text/html" href="http://feeds.feedburner.com/~r/metajack/~3/464431669/" />
    <id>tag:metajack.im,2008://1.120</id>

    <published>2008-11-24T23:21:19Z</published>
    <updated>2008-11-24T23:21:21Z</updated>

    <summary>In part one of this series I talked about why XMPP makes a good technology base for an online gaming platform like Chesspark. Let’s get a little more technical now, and look at specifically at how XMPP is used at...</summary>
    <author>
        <name>Jack Moffitt</name>
        <uri>http://metajack.im/cgi-sys/cgiwrap/metajack/managed-mt/mt-cp.cgi?__mode=view&amp;blog_id=1&amp;id=1</uri>
    </author>
    
    <category term="chesspark" label="chesspark" scheme="http://www.sixapart.com/ns/types#tag" />
    <category term="jabber" label="jabber" scheme="http://www.sixapart.com/ns/types#tag" />
    <category term="startups" label="startups" scheme="http://www.sixapart.com/ns/types#tag" />
    <category term="xmpp" label="xmpp" scheme="http://www.sixapart.com/ns/types#tag" />
    
    <content type="html" xml:lang="en" xml:base="http://metajack.im/">
        &lt;p&gt;In &lt;a href="http://metajack.im/2008/11/21/chesspark-design-details-part-1-why-xmpp/"&gt;part one&lt;/a&gt; of this series I talked about why XMPP makes a good technology base for an online gaming platform like &lt;a href="http://www.chesspark.com"&gt;Chesspark&lt;/a&gt;.  Let&amp;#8217;s get a little more technical now, and look at specifically at how XMPP is used at Chesspark in the context of session handling.&lt;/p&gt;

        &lt;h2&gt;Being A Good Citizen&lt;/h2&gt;

&lt;p&gt;One of the early design decisions we made at Chesspark was to embrace XMPP federation and the XMPP network.  We knew that a special gaming capable client would be needed, but we wanted any XMPP account on any federated server to be able to play.  We didn&amp;#8217;t want to force people to create accounts on our own XMPP server.&lt;/p&gt;

&lt;p&gt;There were a few reasons for this.&lt;/p&gt;

&lt;p&gt;For starters, we theorized that people with existing rosters would have an easier time promoting Chesspark to their friends if they didn&amp;#8217;t have to create them a second time or fiddle with importing them from another account.  We wanted to make it extremely easy for people to share their games and invite their friends.  &lt;/p&gt;

&lt;p&gt;Another reason is that we felt that if Chesspark were open enough, and a good enough XMPP citizen, there might be some third party support for it in other clients or services.  We were thinking far into the future when more games than just chess might be available.&lt;/p&gt;

&lt;p&gt;With this goal in mind, there are a number of immediate issues.&lt;/p&gt;

&lt;h2&gt;The Price Of Federation&lt;/h2&gt;

&lt;p&gt;Participating on a federated network incurs some penalties and restrictions, but most of the them this price is well worth paying.  Here are a few pitfalls that affected us.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Feature deployments&lt;/strong&gt; -  Not every XMPP server supports the same features.  Specifically, &lt;a href="http://talk.google.com"&gt;Google Talk&lt;/a&gt; doesn&amp;#8217;t support &lt;a href="http://www.xmpp.org/extensions/xep-0049.html"&gt;private XML storage&lt;/a&gt; and few servers have &lt;a href="http://www.xmpp.org/extensions/xep-0163.html"&gt;PEP&lt;/a&gt; deployed.  If you want to use such features, you must implement backup versions for servers which don&amp;#8217;t support them.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;No local tricks&lt;/strong&gt; - Servers have complete control over local users.  We can forge packets to or from them, and we can access and manipulate their state directly.  In a federated network, such manipulations and forgeries aren&amp;#8217;t possible.  This means that if you need to access state, you need to do it in a way that works in the presence of remote users.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In Chesspark&amp;#8217;s case, the first thing that bit us was not being able to use local state access to detect presence of users.&lt;/p&gt;

&lt;h2&gt;Managing Sessions&lt;/h2&gt;

&lt;p&gt;Many things inside Chesspark&amp;#8217;s game logic need to know the presence of users.  For example, if you invite a user to a game, the server needs to know whether that person is a member, whether or not they are currently online, and if they are already playing a game.  Since we can&amp;#8217;t just ask the database for the state of a remote user, we have to find another method.&lt;/p&gt;

&lt;p&gt;One way to do this is to have presence subscriptions to each and every member.  This is cumbersome and overly verbose.  We don&amp;#8217;t need any of this information unless the user is using a Chesspark client, since otherwise their client can&amp;#8217;t participate anyway.  With over 400,000 members, managing such a roster would be a huge chore.&lt;/p&gt;

&lt;p&gt;XMPP has a great solution for this - direct presence.  &lt;/p&gt;

&lt;h2&gt;Direct Presence&lt;/h2&gt;

&lt;p&gt;If a presence stanza is sent directly to another user via the &lt;code&gt;to&lt;/code&gt; attribute, the sender&amp;#8217;s server will make sure that the recipient is notified when they go offline.  It won&amp;#8217;t tell you about intermediate presence changes, but that person will know the online or offline state of the sender.  This is incredibly useful.&lt;/p&gt;

&lt;p&gt;At Chesspark, the first thing any compatible client must do is send direct presence to a special component called &lt;code&gt;login.chesspark.com&lt;/code&gt;.  This component&amp;#8217;s one and only job is to keep track of logged in Chesspark members and notify other parts of the system about this information.  Normal clients will not send this presence, and the Chesspark system will get no information about them - exactly what we want.&lt;/p&gt;

&lt;p&gt;This is what it looks like:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;pre&gt;
    &amp;lt;presence to='login.chesspark.com'/&gt;
&lt;/pre&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It is simple, but quite effective.&lt;/p&gt;

&lt;h2&gt;Session Info&lt;/h2&gt;

&lt;p&gt;It is often useful to have some information about each member&amp;#8217;s client or computer.  One could use &lt;a href="http://www.xmpp.org/extensions/xep-0030.html"&gt;service discovery&lt;/a&gt; to query for such information, but it is more efficient just to have the Chesspark clients include this information directly in this initial direct presence.&lt;/p&gt;

&lt;p&gt;Chesspark collects browser information and screen dimensions as well as the standard client version information.  Here is an example:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;pre&gt;
    &amp;lt;presence to='login.chesspark.com' from='metajack@chesspark.com/cpc'&gt;
        &amp;lt;client-info xmlns='http://onlinegamegroup.com/xml/chesspark-01'&gt;
            &amp;lt;vender&gt;Chesspark&amp;lt;/vender&gt;
            &amp;lt;name&gt;Chesspark Webclient&amp;lt;/name&gt;
            &amp;lt;version&gt;16194&amp;lt;/version&gt;
            &amp;lt;os&gt;Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.5; en-US; rv:1.9.0.4) Gecko/2008102920 Firefox/3.0.4 (1101x656)&amp;lt;/os&gt;
            &lt;ip&gt;xxx.xxx.xxx.xxx&lt;/ip&gt;
        &amp;lt;/client-info&gt;
    &amp;lt;/presence&gt;
&lt;/pre&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;Internal Notifications&lt;/h2&gt;

&lt;p&gt;Internally, the &lt;code&gt;login.chesspark.com&lt;/code&gt; component publishes all presence changes to the other Chesspark components.  We currently do this just by sending special message stanzas to the other components, but it could also be done with &lt;a href="http://www.danga.com/memcached/"&gt;memcached&lt;/a&gt; or some other way.  The way our code is designed, it was trivial to add this new message type and react to it, as opposed to worrying about how to get asynchronous notifications from some other system.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;pre&gt;
    &amp;lt;message to='arbiter.chesspark.com' from='login.chesspark.com'&gt;
        &amp;lt;member-login xmlns='http://onlinegamegroup.com/xml/chesspark-01' 
                      jid='latency4@chesspark.com/watch_arbiter'/&gt;
    &amp;lt;/message&gt;
&lt;/pre&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;There is also a corresponding &lt;code&gt;member-logout&lt;/code&gt; message.&lt;/p&gt;

&lt;h2&gt;Final Thoughts&lt;/h2&gt;

&lt;p&gt;Using this method it is easy to track the presence of connection Chesspark clients, whether they are remote XMPP users or local ones.  Sure it is not quite as easy as a database query, but it allows any XMPP account in the federated network to participate as a first class citizen.&lt;/p&gt;

&lt;p&gt;Next time I&amp;#8217;ll cover the game design, and we&amp;#8217;ll learn all about how Chesspark uses &lt;a href="http://www.xmpp.org/extensions/xep-0045.html"&gt;multi-user chat&lt;/a&gt; to broadcast and share state with players and observers.&lt;/p&gt;

    &lt;img src="http://feeds.feedburner.com/~r/metajack/~4/464431669" height="1" width="1"/&gt;</content>
<feedburner:origLink>http://metajack.im/2008/11/24/chesspark-design-details-part-2-session-handling/</feedburner:origLink></entry>

<entry>
    <title>On Web Applications And Erlang</title>
    <link rel="alternate" type="text/html" href="http://feeds.feedburner.com/~r/metajack/~3/463390636/" />
    <id>tag:metajack.im,2008://1.119</id>

    <published>2008-11-24T02:01:47Z</published>
    <updated>2008-11-24T02:01:48Z</updated>

    <summary>There is certainly a lot to choose from in the Erlang Web framework space, but that is not what I want to talk about. For those of you not familiar with Erlang, it is a pure message passing system. There...</summary>
    <author>
        <name>Jack Moffitt</name>
        <uri>http://metajack.im/cgi-sys/cgiwrap/metajack/managed-mt/mt-cp.cgi?__mode=view&amp;blog_id=1&amp;id=1</uri>
    </author>
    
    <category term="code" label="code" scheme="http://www.sixapart.com/ns/types#tag" />
    <category term="erlang" label="erlang" scheme="http://www.sixapart.com/ns/types#tag" />
    <category term="web" label="web" scheme="http://www.sixapart.com/ns/types#tag" />
    
    <content type="html" xml:lang="en" xml:base="http://metajack.im/">
        &lt;p&gt;There is certainly a &lt;a href="http://yarivsblog.com/articles/2006/10/27/introducing-erlyweb-the-erlang-twist-on-web-framworks/"&gt;lot&lt;/a&gt; &lt;a href="http://nitrogen-erlang.tumblr.com/"&gt;to&lt;/a&gt; &lt;a href="http://code.google.com/p/mochiweb/"&gt;choose&lt;/a&gt; &lt;a href="http://yaws.hyber.org/"&gt;from&lt;/a&gt; in the &lt;a href="http://www.erlang.org"&gt;Erlang&lt;/a&gt; Web framework space, but that is not what I want to talk about.  For those of you not familiar with Erlang, it is a pure &lt;a href="http://en.wikipedia.org/wiki/Message_passing"&gt;message passing&lt;/a&gt; system.  There are lots of tiny, cheap processes, and they communicate by passing messages as opposed to sharing memory and state.  If you think about this a little, you realize that this is a lot like programming for the Web.&lt;/p&gt;

&lt;p&gt;For all the talk about how weird Erlang is, it seems to me that at its core, the Erlang model is quite familiar to most modern programmers.  Replace the &lt;code&gt;!&lt;/code&gt; operator and commands like &lt;code&gt;sync_send_event&lt;/code&gt; or &lt;code&gt;call&lt;/code&gt; with HTTP GET, PUT, and POST.  Erlang&amp;#8217;s terms are also essentially binary JSON.  Instead of processes the Web has millions of servers and clients talking to each other.&lt;/p&gt;

&lt;p&gt;Couple this with the fact that most people doing JavaScript these days are getting intimately familiar with &lt;a href="http://en.wikipedia.org/wiki/Functional_programming"&gt;functional&lt;/a&gt; concepts like &lt;a href="http://en.wikipedia.org/wiki/Closure_(computer_science)"&gt;closures&lt;/a&gt;, and the distance between Erlang programming and Web programming turns out to be quite short.&lt;/p&gt;

&lt;p&gt;I think if people would look beyond the syntax (after all, beauty is only skin deep), Web programmers would be flocking to Erlang in greater numbers.&lt;/p&gt;

        

    &lt;img src="http://feeds.feedburner.com/~r/metajack/~4/463390636" height="1" width="1"/&gt;</content>
<feedburner:origLink>http://metajack.im/2008/11/23/on-web-applications-and-erlang/</feedburner:origLink></entry>

<entry>
    <title>Kwickserver Beta - A New XMPP Server?</title>
    <link rel="alternate" type="text/html" href="http://feeds.feedburner.com/~r/metajack/~3/462561554/" />
    <id>tag:metajack.im,2008://1.118</id>

    <published>2008-11-23T06:33:02Z</published>
    <updated>2008-11-23T06:33:04Z</updated>

    <summary>Peter from the Kwickserver team e-mailed me to let me know that the first beta release of their mail and communication server has been released. It appears that Kwickserver is attempting to create a unified communications server, and they have...</summary>
    <author>
        <name>Jack Moffitt</name>
        <uri>http://metajack.im/cgi-sys/cgiwrap/metajack/managed-mt/mt-cp.cgi?__mode=view&amp;blog_id=1&amp;id=1</uri>
    </author>
    
    <category term="jabber" label="jabber" scheme="http://www.sixapart.com/ns/types#tag" />
    <category term="xmpp" label="xmpp" scheme="http://www.sixapart.com/ns/types#tag" />
    
    <content type="html" xml:lang="en" xml:base="http://metajack.im/">
        &lt;p&gt;Peter from the &lt;a href="http://www.kwickserver.info"&gt;Kwickserver&lt;/a&gt; team e-mailed me to let me know that the first beta release of their &lt;a href="http://www.kwickserver.info/mwiki/index.php/Mail_General"&gt;mail and communication server&lt;/a&gt; has been released.  It appears that Kwickserver is attempting to create a unified communications server, and they have created an &lt;a href="http://www.xmpp.org"&gt;XMPP&lt;/a&gt; server alongside their e-mail server.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;m unsure if this is just a re-packaging of some other XMPP and e-mail server, or if the Kwickserver team has actually created a new XMPP server.  In either case, it looks like an interesting project.  The work is GPL licensed and is funded by an &lt;a href="http://www.nic.at/uebernic/firmendaten_impressum/internet_privatstiftung_austria"&gt;Austrian non-profit organization&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It&amp;#8217;s distributed as an CD image for PC compatible hardware.  I assume this means that it is a live-CD based on one of the Linux distributions.  If one of you brave souls gives it a try, please report back and let us know more details.&lt;/p&gt;

        

    &lt;img src="http://feeds.feedburner.com/~r/metajack/~4/462561554" height="1" width="1"/&gt;</content>
<feedburner:origLink>http://metajack.im/2008/11/22/kwickserver-beta---a-new-xmpp-server/</feedburner:origLink></entry>

<entry>
    <title>Chesspark Design Details Part 1: Why XMPP?</title>
    <link rel="alternate" type="text/html" href="http://feeds.feedburner.com/~r/metajack/~3/461237343/" />
    <id>tag:metajack.im,2008://1.117</id>

    <published>2008-11-21T22:12:37Z</published>
    <updated>2008-11-21T22:12:39Z</updated>

    <summary>I’ve been asked several times to talk a bit about how we built Chesspark, how it uses XMPP, and what various lessons we learned along the way. This is way too much for a single blog post, so I’ll be...</summary>
    <author>
        <name>Jack Moffitt</name>
        <uri>http://metajack.im/cgi-sys/cgiwrap/metajack/managed-mt/mt-cp.cgi?__mode=view&amp;blog_id=1&amp;id=1</uri>
    </author>
    
    <category term="chess" label="chess" scheme="http://www.sixapart.com/ns/types#tag" />
    <category term="chesspark" label="chesspark" scheme="http://www.sixapart.com/ns/types#tag" />
    <category term="code" label="code" scheme="http://www.sixapart.com/ns/types#tag" />
    <category term="jabber" label="jabber" scheme="http://www.sixapart.com/ns/types#tag" />
    <category term="startups" label="startups" scheme="http://www.sixapart.com/ns/types#tag" />
    <category term="xmpp" label="xmpp" scheme="http://www.sixapart.com/ns/types#tag" />
    
    <content type="html" xml:lang="en" xml:base="http://metajack.im/">
        &lt;p&gt;I&amp;#8217;ve been asked several times to talk a bit about how we built &lt;a href="http://www.chesspark.com"&gt;Chesspark&lt;/a&gt;, how it uses XMPP, and what various lessons we learned along the way.  This is way too much for a single blog post, so I&amp;#8217;ll be doing a small series of them on Chesspark&amp;#8217;s design.  To kick things off, let&amp;#8217;s discuss why someone would want to build a game system on top of XMPP in the first place.&lt;/p&gt;

        &lt;h2&gt;Why XMPP?&lt;/h2&gt;

&lt;p&gt;It is certainly possible to build something like Chesspark without XMPP, and &lt;a href="http://www.chessclub.com"&gt;others&lt;/a&gt; have done so.  XMPP does offer many advantages of interest for games.&lt;/p&gt;

&lt;h3&gt;People Are Social&lt;/h3&gt;

&lt;p&gt;Humans are social creatures, and they like to communicate with one another.  Any multiplayer game involves some social interaction, and this interaction soon becomes of primary importance.  You have only to look at the enormous amount of &lt;a href="http://www.worldofwarcraft.com"&gt;World of Warcraft&lt;/a&gt; guilds to see this.  &lt;/p&gt;

&lt;p&gt;At first, everyone is interested primarily in the game.  They solve puzzles, perform quests, kill monsters, or just interact with the game world.   As they play, they meet people and form relationships.  Pretty soon they are using the game as a shared activity for socializing with friends.  Take their friends away, and the game isn&amp;#8217;t nearly as interesting.&lt;/p&gt;

&lt;h3&gt;IM Is Already A Social Network&lt;/h3&gt;

&lt;p&gt;Instant messaging is one of the oldest computer social networks.  It has all the things that you need: friends lists, presence, avatars, private chats, and group chats.  Choosing XMPP as a basis for a game means that it starts off as a first class social network; there is no need to bolt on these features later.&lt;/p&gt;

&lt;p&gt;Starting with the social aspects first means that the most important piece will be integrated at a deep level in the design.   Those that start with game rules often end up wedging social features in afterwards, and this can make for a poor experience.&lt;/p&gt;

&lt;p&gt;To give an example, our competitor the &lt;a href="http://www.chessclub.com"&gt;Internet Chess Club&lt;/a&gt; also has a friends list and group chat, but these features are tacked on.  There are a fixed number of numbered (not named) group chat rooms, and none of the client UI makes the friends list front and center like people expect from IM clients.  Chesspark operates like an IM client, a user interface that many people understand and are familiar with.  Group chat rooms can be private or public, have descriptive names, and their own participants lists that users can interact with.&lt;/p&gt;

&lt;h3&gt;Real Time Is Important&lt;/h3&gt;

&lt;p&gt;Another reason for XMPP is that it is built for real time communication, and this is a pretty necessary ingredient to an often fast paced game like chess.  Most other Web sites for chess have turn based or play by e-mail systems, but we wanted Chesspark to support the super fast bullet and blitz chess games.  In bullet and blitz players have one minute or five minutes to make all of their moves.  This means that latencies must be minimized.&lt;/p&gt;

&lt;p&gt;XMPP has all the tools already available for dealing with this situation.  It has &lt;a href="http://www.xmpp.org/extensions/xep-0060.html"&gt;pubsub&lt;/a&gt; for subscribing to asynchronous notifications, &lt;a href="http://www.xmpp.org/extensions/xep-0124.html"&gt;BOSH&lt;/a&gt; for bridging to the Web, and &lt;a href="http://www.xmpp.org/extensions/xep-0045.html"&gt;Multi-user chat&lt;/a&gt; for creating shared real time interaction spaces.&lt;/p&gt;

&lt;h3&gt;Work On Implementation Instead Of Design&lt;/h3&gt;

&lt;p&gt;Using XMPP allowed us to save countless hours, by letting us focus our efforts on great implementation instead of re-designing another protocol and associated tools.  We found that many things that we needed had already been created, and this let us get to market faster and resulted in more reliable software.&lt;/p&gt;

&lt;p&gt;In some cases we had to design our own implementations of XMPP services, like the &lt;a href="http://code.stanziq.com/palaver"&gt;Palaver&lt;/a&gt; group chat server.  Even with these cases, we were able to implement a protocol that was already well designed instead of designing and implementing some protocol.&lt;/p&gt;

&lt;p&gt;Protocol design is not trivial, and starting from such a robust base of protocols and tools is reason enough to choose XMPP.&lt;/p&gt;

&lt;h2&gt;For Next Time&lt;/h2&gt;

&lt;p&gt;Here are some of the topics I plan to cover:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Session handling - Games have state that must be tracked, and part of this state is the presence of players.  We faced additional challenges by choosing to make Chesspark a good citizen of the federated XMPP network, but it turns out they were easily solved.&lt;/li&gt;
&lt;li&gt;Game design - Why did we choose to use multi-user chat as the primitive for games?  How and where are game rules checked?  &lt;/li&gt;
&lt;li&gt;Cheating and edge cases - What happens when a player disconnects during a game?  How do we detect and prevent various abuses?&lt;/li&gt;
&lt;li&gt;Tool choices - There are a lot of great XMPP tools, and I&amp;#8217;ll give some rationale about the choices we made.&lt;/li&gt;
&lt;li&gt;Infrastructure and optimization - We went through several iterations of infrastructure and have spent many hours fine tuning latency, query times, and user experience.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you have any questions or topics that I didn&amp;#8217;t mention, feel free to chime in.  I&amp;#8217;ll try to cover everything I can.&lt;/p&gt;

    &lt;img src="http://feeds.feedburner.com/~r/metajack/~4/461237343" height="1" width="1"/&gt;</content>
<feedburner:origLink>http://metajack.im/2008/11/21/chesspark-design-details-part-1-why-xmpp/</feedburner:origLink></entry>

<entry>
    <title>More XMPP Commandline Goodness</title>
    <link rel="alternate" type="text/html" href="http://feeds.feedburner.com/~r/metajack/~3/460168323/" />
    <id>tag:metajack.im,2008://1.116</id>

    <published>2008-11-20T23:40:56Z</published>
    <updated>2008-11-20T23:41:00Z</updated>

    <summary>Seth from the Yahoo Fire Eagle team e-mailed me today about Poetry, our XMPP commandline tools project. It seems that Seth has been thinking along the same lines, and he has created switchboard, a similar tool written in Ruby. It...</summary>
    <author>
        <name>Jack Moffitt</name>
        <uri>http://metajack.im/cgi-sys/cgiwrap/metajack/managed-mt/mt-cp.cgi?__mode=view&amp;blog_id=1&amp;id=1</uri>
    </author>
    
    <category term="code" label="code" scheme="http://www.sixapart.com/ns/types#tag" />
    <category term="jabber" label="jabber" scheme="http://www.sixapart.com/ns/types#tag" />
    <category term="ruby" label="ruby" scheme="http://www.sixapart.com/ns/types#tag" />
    <category term="xmpp" label="xmpp" scheme="http://www.sixapart.com/ns/types#tag" />
    
    <content type="html" xml:lang="en" xml:base="http://metajack.im/">
        &lt;p&gt;&lt;a href="http://github.com/mojodna"&gt;Seth&lt;/a&gt; from the &lt;a href="http://fireeagle.yahoo.net/"&gt;Yahoo Fire Eagle&lt;/a&gt; team e-mailed me today about &lt;a href="http://launchpad.net/poetry"&gt;Poetry&lt;/a&gt;, our XMPP commandline tools project.  It seems that Seth has been thinking along the same lines, and he has created &lt;a href="http://github.com/mojodna/switchboard/tree"&gt;switchboard&lt;/a&gt;, a similar tool written in &lt;a href="http://www.ruby-lang.org/"&gt;Ruby&lt;/a&gt;.  It appears switchboard is a little farther along than Poetry.  Check out the &lt;a href="http://github.com/mojodna/switchboard/tree/master/README.markdown"&gt;README file&lt;/a&gt; for usage examples.&lt;/p&gt;

&lt;p&gt;The more tools the merrier I say.&lt;/p&gt;

        

    &lt;img src="http://feeds.feedburner.com/~r/metajack/~4/460168323" height="1" width="1"/&gt;</content>
<feedburner:origLink>http://metajack.im/2008/11/20/more-xmpp-commandline-goodness/</feedburner:origLink></entry>

<entry>
    <title>New Strophe Based IM Client</title>
    <link rel="alternate" type="text/html" href="http://feeds.feedburner.com/~r/metajack/~3/458854072/" />
    <id>tag:metajack.im,2008://1.115</id>

    <published>2008-11-19T21:38:10Z</published>
    <updated>2008-11-19T21:38:12Z</updated>

    <summary><![CDATA[Gar has just put up the first preview of his new Strophe project, TrophyIM. It&#8217;s still rough, but it is shaping up nicely. You just add a &lt;div&gt; tag to your Web page with a special id attribute, and TrophyIM...]]></summary>
    <author>
        <name>Jack Moffitt</name>
        <uri>http://metajack.im/cgi-sys/cgiwrap/metajack/managed-mt/mt-cp.cgi?__mode=view&amp;blog_id=1&amp;id=1</uri>
    </author>
    
    <category term="code" label="code" scheme="http://www.sixapart.com/ns/types#tag" />
    <category term="jabber" label="jabber" scheme="http://www.sixapart.com/ns/types#tag" />
    <category term="javascript" label="javascript" scheme="http://www.sixapart.com/ns/types#tag" />
    <category term="strophe" label="strophe" scheme="http://www.sixapart.com/ns/types#tag" />
    <category term="xmpp" label="xmpp" scheme="http://www.sixapart.com/ns/types#tag" />
    
    <content type="html" xml:lang="en" xml:base="http://metajack.im/">
        &lt;p&gt;&lt;a href="http://sysadminco.com/"&gt;Gar&lt;/a&gt; has just put up the first preview of his new &lt;a href="http://code.stanziq.com/strophe"&gt;Strophe&lt;/a&gt; project, &lt;a href="http://code.google.com/p/trophyim/"&gt;TrophyIM&lt;/a&gt;.  It&amp;#8217;s still rough, but it is shaping up nicely.  You just add a &amp;lt;div&amp;gt; tag to your Web page with a special id attribute, and TrophyIM takes care of the rest.  You can see the &lt;a href="http://sysadminco.com/scripts/trophyim/?"&gt;live demo&lt;/a&gt;, but be aware that it may break if Gar is actively coding on it.&lt;/p&gt;

&lt;p&gt;It&amp;#8217;s always nice to see more people using Strophe.&lt;/p&gt;

        

    &lt;img src="http://feeds.feedburner.com/~r/metajack/~4/458854072" height="1" width="1"/&gt;</content>
<feedburner:origLink>http://metajack.im/2008/11/19/new-strophe-based-im-client/</feedburner:origLink></entry>

</feed>
