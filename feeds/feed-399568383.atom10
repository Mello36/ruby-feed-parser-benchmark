<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="http://feeds.feedburner.com/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0" xml:lang="en-US">
  <title>GIANT ROBOTS SMASHING INTO OTHER GIANT ROBOTS - Home</title>
  <id>tag:giantrobots.thoughtbot.com,2008:mephisto/</id>
  <generator version="0.8.0" uri="http://mephistoblog.com">Mephisto Drax</generator>
  
  <link href="http://giantrobots.thoughtbot.com/" rel="alternate" type="text/html" />
  <updated>2008-12-11T23:02:50Z</updated>
  <link rel="self" href="http://feeds.feedburner.com/GiantRobotsSmashingIntoOtherGiantRobots" type="application/atom+xml" /><feedburner:browserFriendly>This is an XML content feed. It is intended to be viewed in a newsreader or syndicated to another site, subject to copyright and fair use.</feedburner:browserFriendly><entry xml:base="http://giantrobots.thoughtbot.com/">
    <author>
      <name>Dan Croak</name>
    </author>
    <id>tag:giantrobots.thoughtbot.com,2008-12-11:7756</id>
    <published>2008-12-11T23:01:00Z</published>
    <updated>2008-12-11T23:02:50Z</updated>
    <category term="Business" />
    <category term="kickstart" />
    <category term="training" />
    <link href="http://feeds.feedburner.com/~r/GiantRobotsSmashingIntoOtherGiantRobots/~3/482099157/kickstart" rel="alternate" type="text/html" />
    <title>Kickstart</title>
<content type="html">
            &lt;p&gt;We do work for some companies with their own &lt;strong&gt;in-house development team&lt;/strong&gt;. They often don’t have much Ruby experience. Others are &lt;strong&gt;startups&lt;/strong&gt;. They need to hire developers but don’t know how to &lt;strong&gt;interview potential Rubyists&lt;/strong&gt;. Neither want to &lt;strong&gt;delay development&lt;/strong&gt; of their projects while they wait to build their team.&lt;/p&gt;


	&lt;p&gt;In response to their needs, we’re pleased to announce our new consulting service:&lt;/p&gt;


&lt;div&gt;&lt;a href="http://thoughtbot.com/services/kickstart"&gt;&lt;img src="http://giantrobots.thoughtbot.com/assets/2008/12/11/title-kickstart.gif" /&gt;&lt;/a&gt;&lt;/div&gt;

	&lt;h2&gt;In a nutshell&lt;/h2&gt;


&lt;div&gt;&amp;lt;object height="175" width="285"&gt;&amp;lt;param&gt;&amp;lt;/param&gt;&amp;lt;param&gt;&amp;lt;/param&gt;&amp;lt;param&gt;&amp;lt;/param&gt;&amp;lt;embed src="http://www.youtube.com/v/jKMK3XGO27k&amp;amp;#38;hl=en&amp;amp;#38;fs=1" height="175" width="285"&gt;&amp;lt;/embed&gt;&amp;lt;/object&gt;&lt;/div&gt;

	&lt;ol&gt;
	&lt;li&gt;We begin &lt;a href="http://thoughtbot.com/work"&gt;work&lt;/a&gt; on your Rails app immediately. &lt;/li&gt;
		&lt;li&gt;We help hire (if needed) and &lt;a href="http://thoughtbot.com/training"&gt;train&lt;/a&gt; your in-house team. &lt;/li&gt;
		&lt;li&gt;We pair program with your team at &lt;a href="http://blog.railsrumble.com/workshare#tb"&gt;our office&lt;/a&gt; or yours. &lt;/li&gt;
		&lt;li&gt;When your team is self-sufficient, you take the reins.&lt;/li&gt;
		&lt;li&gt;We quietly back away.&lt;/li&gt;
	&lt;/ol&gt;


	&lt;h2&gt;Hiring&lt;/h2&gt;


	&lt;p&gt;Software is a team sport. You need good people whom you trust and whose company you enjoy. Additionally, the ideal Kickstart client understands the value of &lt;a href="http://en.wikipedia.org/wiki/Pair_programming"&gt;pair programming&lt;/a&gt;. Your team members should be willing and able to pair regularly.&lt;/p&gt;


	&lt;p&gt;We will help you hire by &lt;strong&gt;pairing with interviewees&lt;/strong&gt; on real Ruby code. This even works with developers coming to Ruby from other languages. In this case, the interviewee dictates what should be done, and the thoughtbot developer implements it in Ruby.&lt;/p&gt;


	&lt;h2&gt;Training&lt;/h2&gt;


	&lt;p&gt;&lt;img src="http://giantrobots.thoughtbot.com/assets/2008/12/10/rocky4strain2.JPG" /&gt;&lt;/p&gt;


	&lt;p&gt;We are &lt;a href="http://thoughtbot.com/training"&gt;experienced trainers&lt;/a&gt; of Ruby, Rails, and related software practices such as &lt;a href="http://en.wikipedia.org/wiki/Code_refactoring"&gt;refactoring&lt;/a&gt;, version control, and &lt;a href="http://en.wikipedia.org/wiki/Test-driven_development"&gt;Test Driven Development&lt;/a&gt;.&lt;/p&gt;


	&lt;p&gt;Transitioning to &lt;strong&gt;a new toolset can be scary&lt;/strong&gt;, but it doesn’t have to be. Internally at thoughtbot, we have a proven track record of making great Ruby developers out of &lt;strong&gt;Java, .NET, Python, or &lt;span class="caps"&gt;PHP&lt;/span&gt; developers&lt;/strong&gt;. We all came from other technology backgrounds and know how to take you down the same path.&lt;/p&gt;


	&lt;h2&gt;Programming&lt;/h2&gt;


	&lt;p&gt;We have consulted on dozens of &lt;a href="http://thoughtbot.com/work"&gt;Rails projects&lt;/a&gt; for the last three years. We’ve &lt;strong&gt;made the mistakes&lt;/strong&gt; your Ruby team is about to make.&lt;/p&gt;


	&lt;p&gt;Imagine your developers sitting at their keyboard, source code in one window, tests flying by in another, with a thoughtbot developer sitting right there, stepping in immediately when a mistake is about to happen.&lt;/p&gt;


	&lt;h2&gt;Self-sufficiency&lt;/h2&gt;


	&lt;p&gt;We believe this is the fastest way to impart Ruby skills to other developers. Our greatest triumph will be when you say:&lt;/p&gt;


	&lt;blockquote&gt;
		&lt;p&gt;“We don’t need thoughtbot anymore. We have a maintainable app with clean code that works. We have an expert development team with a unified vision of where to the app goes next.”&lt;/p&gt;
	&lt;/blockquote&gt;


	&lt;p&gt;&lt;a href="http://thoughtbot.com/contact"&gt;Let’s get started&lt;/a&gt;.&lt;/p&gt;
          </content>  <feedburner:origLink>http://giantrobots.thoughtbot.com/2008/12/11/kickstart</feedburner:origLink></entry>
  <entry xml:base="http://giantrobots.thoughtbot.com/">
    <author>
      <name>Tammer Saleh</name>
    </author>
    <id>tag:giantrobots.thoughtbot.com,2008-12-08:7755</id>
    <published>2008-12-08T14:50:00Z</published>
    <updated>2008-12-09T14:52:35Z</updated>
    <link href="http://feeds.feedburner.com/~r/GiantRobotsSmashingIntoOtherGiantRobots/~3/478544048/voices-that-matter-and-rubyconf-2008" rel="alternate" type="text/html" />
    <title>Voices that Matter and RubyConf 2008</title>
<content type="html">
            &lt;p&gt;We’ve been busy this past few months, having been asked to present at both &lt;a href="http://rubyconf.org/"&gt;RubyConf 2008 in Orlando&lt;/a&gt;, and at &lt;a href="http://www.voicesthatmatter.com/ruby2008/"&gt;Voices that Matter&lt;/a&gt; (aka “Obieconf”) in our home town of Boston.&lt;/p&gt;


	&lt;p&gt;&lt;a href="http://www.flickr.com/photos/sd/3041195771/"&gt;&lt;img src="http://farm4.static.flickr.com/3165/3041195771_cfba8ecb97.jpg" alt="" /&gt;&lt;/a&gt;&lt;/p&gt;


	&lt;p&gt;&lt;em&gt;Matt Jankowski shows a slide asking who the people whose voices matter are, exactly&lt;/em&gt;&lt;/p&gt;


	&lt;h2&gt;Voices that Matter&lt;/h2&gt;


	&lt;p&gt;&lt;a href="http://www.flickr.com/photos/sd/3041399471/"&gt;&lt;img src="http://farm4.static.flickr.com/3181/3041399471_76bfa491d1.jpg" alt="" /&gt;&lt;/a&gt;&lt;/p&gt;


	&lt;p&gt;&lt;em&gt;Pat Maddox, Tammer Saleh, Brian Liles, Sandy Metz discuss how you test whether your voice matters&lt;/em&gt;&lt;/p&gt;


	&lt;p&gt;The most recent conference was Voices that Matter, in good ol’ Beantown.  This was one of the best conferences we’d been to, for a few different reasons.&lt;/p&gt;


	&lt;p&gt;Obie Fernandez chaired the conference, and did a great job of keeping it focused and dense.  The talks were limited to 30 minutes each, and mostly dealt with practical business matters: how to run an agile ruby shop; what technologies are ready for wide-spread use; building strong teams; etc.&lt;/p&gt;


	&lt;p&gt;Some of the main themes included &lt;a href="http://smartic.us/2008/8/15/tatft-i-feel-a-revolution-coming-on"&gt;&lt;span class="caps"&gt;TATFT&lt;/span&gt;&lt;/a&gt;, pair programming, and &lt;a href="http://blog.l4rk.com/2008/11/pro-ruby-conference-wrap-up.html"&gt;maintaining a friendly and inviting Rails culture&lt;/a&gt;. 
We were also very surprised by the amount of thoughtbot love we encountered.  We participated in two round table discussions, and presented both &lt;a href="http://www.voicesthatmatter.com/ruby2008/sessions.aspx#nature"&gt;Agile in the Enterprise&lt;/a&gt; and &lt;a href="http://www.voicesthatmatter.com/ruby2008/sessions.aspx#antipatterns"&gt;Rails AntiPatterns&lt;/a&gt;, and we were mentioned in a handful of the other presentations.  We can’t express how happy we are to know that people are getting real value from our tools and philosophies.  You can download our talks here…&lt;/p&gt;


	&lt;p&gt;&lt;br /&gt;&lt;/p&gt;


	&lt;table&gt;
		&lt;tr&gt;
			&lt;td&gt;&lt;a href="http://giantrobots.thoughtbot.com/assets/2008/12/1/VOICES-THAT-MATTER-Agile-Enterprise.pdf"&gt;&lt;img src="http://giantrobots.thoughtbot.com/assets/2008/12/5/agile-enterprise.jpg" height="225" alt="Agile in the Enterprise" width="300"&gt;&lt;/a&gt;&lt;/td&gt;
			&lt;td&gt;&lt;a href="http://giantrobots.thoughtbot.com/assets/2008/12/1/antipatterns.pdf"&gt;&lt;img src="http://giantrobots.thoughtbot.com/assets/2008/12/5/antipatterns.jpg" height="225" alt="Rails AntiPatterns" width="300"&gt;&lt;/a&gt;&lt;/td&gt;
		&lt;/tr&gt;
	&lt;/table&gt;




	&lt;p&gt;&lt;br /&gt;&lt;/p&gt;


	&lt;p&gt;Chad and I were very pleased that the AntiPatterns talk (which was a sample from our upcoming &lt;a href="http://my.safaribooksonline.com/9780321620293"&gt;Rails AntiPatterns&lt;/a&gt; book) got a 5-star rating across the board!&lt;/p&gt;


	&lt;p&gt;&lt;a href="http://flickr.com/photos/jcn/3051724907/"&gt;&lt;img src="http://farm4.static.flickr.com/3135/3051724907_3de4296a44.jpg" alt="" /&gt;&lt;/a&gt;&lt;/p&gt;


	&lt;p&gt;&lt;em&gt;Chad Pytel speculating about whose voice will matter in The New Economy&lt;/em&gt;&lt;/p&gt;


	&lt;h2&gt;RubyConf 2008&lt;/h2&gt;


	&lt;p&gt;&lt;a href="http://giantrobots.thoughtbot.com/assets/2008/12/5/coding-for-failure.pdf"&gt; &lt;img src="http://giantrobots.thoughtbot.com/assets/2008/12/5/coding-for-failure.jpg" height="225" alt="Coding for Failure" width="300"&gt; &lt;/a&gt;&lt;/p&gt;


	&lt;p&gt;We also presented at RubyConf on &lt;a href="http://www.rubyconf.org/talks/37" title="in 45 minutes"&gt;Coding For Failure: All you need to know for building rock solid applications&lt;/a&gt;.&lt;/p&gt;


	&lt;p&gt;I’m not sure what to say about RubyConf that hasn’t already been said.  Except that I would be greatly disappointed, and take it as a personal insult to me, and everyone I love, if it’s not held in exactly the same location next year.&lt;/p&gt;


	&lt;p&gt;As alluded to, RubyConf featured the laziest of rivers, the most full RV rides, the dirtiest go-cart racing, and a water slide that was strangely difficult to climb up from the bottom to the top despite one’s personal interest in achieving such a feat.&lt;/p&gt;


	&lt;p&gt;Note to future conference organizers – if the talks could somehow be projected onto a screen that you could see &lt;strong&gt;from the hot tub&lt;/strong&gt; you probably would not get any complaints.&lt;/p&gt;


	&lt;p&gt;&lt;a href="http://www.flickr.com/photos/danbenjamin/3012061271/"&gt;&lt;img src="http://farm4.static.flickr.com/3013/3012061271_53d873f259.jpg" alt="" /&gt;&lt;/a&gt;&lt;/p&gt;


	&lt;p&gt;&lt;em&gt;Jason Morrison wondering – “when a voice that matters is spoken in a forest but no one hears it, does it make a noise?”&lt;/em&gt;&lt;/p&gt;


	&lt;p&gt;(And thanks to &lt;a href="http://danbenjamin.com/"&gt;Dan Benjamin&lt;/a&gt;, &lt;a href="http://www.jessechannorris.com"&gt;Jesse Chan Norris&lt;/a&gt;, and &lt;a href="http://www.notsostupid.com/"&gt;Sebastian Delmont&lt;/a&gt; for the use of their photos.)&lt;/p&gt;
          </content>  <feedburner:origLink>http://giantrobots.thoughtbot.com/2008/12/8/voices-that-matter-and-rubyconf-2008</feedburner:origLink></entry>
  <entry xml:base="http://giantrobots.thoughtbot.com/">
    <author>
      <name>Matt Jankowski</name>
    </author>
    <id>tag:giantrobots.thoughtbot.com,2008-12-01:7752</id>
    <published>2008-12-01T16:51:00Z</published>
    <updated>2008-12-01T17:14:00Z</updated>
    <link href="http://feeds.feedburner.com/~r/GiantRobotsSmashingIntoOtherGiantRobots/~3/471531249/sweet-tea" rel="alternate" type="text/html" />
    <title>Sweet tea</title>
<content type="html">
            &lt;p&gt;Hey!  Remember when we &lt;a href="http://giantrobots.thoughtbot.com/2008/5/28/funny-shirts-your-friends-won-t-understand-at-railsconf"&gt;launched teebot&lt;/a&gt; right before RailsConf this past May?  Well since then we’ve run out of stock on some of the initial shirt sizes, and we’ve been handing out some previously unsold shirt designs at various ruby events and conferences throughout the year.&lt;/p&gt;


	&lt;p&gt;If you attended any of our &lt;a href="http://thoughtbot.com/training"&gt;training&lt;/a&gt; events, or if you saw us at a conference, we may have thrown a tee shirt at you.  We looked into &lt;a href="http://www.tshirtgun.com/sabre.htm"&gt;t shirt launchers&lt;/a&gt; but they’re prohibitively expensive for something which would primarily just amuse us.&lt;/p&gt;


	&lt;p&gt;So if you didn’t get your fill of Black Friday shopping and your itching to clothe your loved ones in thoughtbot designed tees, why not check out teebot, which has been restocked with sizes of &lt;a href="http://teebot.thoughtbot.com/products/do-or-do-not"&gt;do or do not&lt;/a&gt;, &lt;a href="http://teebot.thoughtbot.com/products/script-runner"&gt;script/runner&lt;/a&gt; and &lt;a href="http://teebot.thoughtbot.com/products/has_many-shoes"&gt;has many shoes&lt;/a&gt; and now features two new shirts…&lt;/p&gt;


	&lt;p&gt;&lt;br /&gt;&lt;/p&gt;


	&lt;table&gt;
		&lt;tr&gt;
			&lt;td&gt;&lt;img src="http://giantrobots.thoughtbot.com/assets/2008/12/1/ralph_head_thumb.gif" alt="" /&gt;&lt;/td&gt;
			&lt;td&gt;&lt;img src="http://giantrobots.thoughtbot.com/assets/2008/12/1/hoes_thumb.gif" alt="" /&gt;&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td&gt;&lt;a href="http://teebot.thoughtbot.com/products/red-ralph"&gt;Red ralph teebot logo shirt&lt;/a&gt; &lt;br /&gt;You can tell people this is actually a muxtape shirt if it makes you more likely to buy it.&lt;/td&gt;
			&lt;td&gt;&lt;a href="http://teebot.thoughtbot.com/products/has-many-hoes"&gt;has_many :hoes, :through =&amp;gt; :area_codes&lt;/a&gt; &lt;br /&gt; Frequently spotted but never before sold. &lt;strong&gt;Until now!&lt;/strong&gt;&lt;/td&gt;
		&lt;/tr&gt;
	&lt;/table&gt;




	&lt;p&gt;&lt;br /&gt;&lt;/p&gt;


	&lt;p&gt;While I have your attention, we’ve put our two presentations from the recent &lt;a href="http://voicesthatmatter.com/ruby2008/"&gt;Voices That Matter&lt;/a&gt; professional ruby conference (great &lt;a href="http://flickr.com/photos/sd/sets/72157609355648746/"&gt;photo set&lt;/a&gt; from Sebastian Delmont on flickr) in Boston online.  Here you are:&lt;/p&gt;


	&lt;ul&gt;
	&lt;li&gt;Matt Jankowski – &lt;a href="http://giantrobots.thoughtbot.com/assets/2008/12/1/VOICES-THAT-MATTER-Agile-Enterprise.pdf"&gt;Agile in the Enterprise&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;Chad Pytel and Tammer Saleh – &lt;a href="http://giantrobots.thoughtbot.com/assets/2008/12/1/antipatterns.pdf"&gt;Rails Antipatterns: Best Practice Refactoring&lt;/a&gt;&lt;/li&gt;
	&lt;/ul&gt;
          </content>  <feedburner:origLink>http://giantrobots.thoughtbot.com/2008/12/1/sweet-tea</feedburner:origLink></entry>
  <entry xml:base="http://giantrobots.thoughtbot.com/">
    <author>
      <name>Dan Croak</name>
    </author>
    <id>tag:giantrobots.thoughtbot.com,2008-11-16:7730</id>
    <published>2008-11-16T18:23:00Z</published>
    <updated>2008-11-17T16:02:21Z</updated>
    <category term="Business" />
    <category term="bars" />
    <category term="boston" />
    <category term="entertainment" />
    <category term="restaurants" />
    <category term="voices that matter" />
    <link href="http://feeds.feedburner.com/~r/GiantRobotsSmashingIntoOtherGiantRobots/~3/455129148/boston-guide-for-rubyists" rel="alternate" type="text/html" />
    <title>Boston guide for Rubyists</title>
<content type="html">
            &lt;p&gt;The Voices that Matter &lt;a href="http://www.voicesthatmatter.com/ruby2008/"&gt;Professional Ruby Conference&lt;/a&gt; is this upcoming week in Boston. I’m excited to share our fair city with all of those attending. To make your stay more pleasant, I’ve assembled a little guide.&lt;/p&gt;


	&lt;p&gt;It is meant explicitly for Rubyists visiting town this week, November 2008. If anyone has other Boston tips, please add them to the comments.&lt;/p&gt;


	&lt;h2&gt;Getting around&lt;/h2&gt;


	&lt;h3&gt;The T&lt;/h3&gt;


	&lt;p&gt;The subway system is called “the T”, and has colored lines. &lt;a href="http://www.mbta.com/schedules_and_maps/subway/lines/?route=GREEN#Green%20Line"&gt;The Green Line from Kenmore to Haymarket&lt;/a&gt; is the section of the subway system that you most care about for the part of Boston the conference is being held. If you want to go down to &lt;span class="caps"&gt;MIT&lt;/span&gt;, Central Square, or Harvard Square in Cambridge, take the #1 bus from &lt;a href="http://is.gd/7KWl"&gt;Massachusetts Avenue and Commonwealth Avenue.&lt;/a&gt;&lt;/p&gt;


	&lt;h3&gt;The Sheraton and the Prudential&lt;/h3&gt;


	&lt;p&gt;The conference is at the Sheraton Boston (&lt;a href="http://is.gd/7z5o"&gt;Google Map&lt;/a&gt;), which is attached to the Prudential. The Prudential building is the second-tallest in Boston and has a large, upscale mall that connects Huntington Avenue and Boylston Street, two main thoroughfares in Boston. It has a Starbucks, bunch of clothing stores, a Barnes &amp; Noble, and a few chain restaurants (try the clam chowder at &lt;a href="http://www.legalseafoods.com/"&gt;Legal Seafoods&lt;/a&gt;).&lt;/p&gt;


	&lt;p&gt;The indoor maze is nice bonus if the weather’s not up to Florida/Texas/California standards. There’s a skyway that connects the Prudential to Copley, a larger, more upscale mall. Less important than knowing where the shopping is, however, is knowing this cut-through when you’re trying to find food:&lt;/p&gt;


	&lt;h2&gt;Food&lt;/h2&gt;


	&lt;h3&gt;Food: Tremont Street&lt;/h3&gt;


	&lt;p&gt;These are all walkable from the hotel. Cut through Copley. You’ll end up outside, facing the Back Bay station (Orange Line). Make a right onto Dartmouth Street, walk about five short blocks and you’ll be at Tremont. Most of these restaurants are to your left on Tremont.&lt;/p&gt;


	&lt;ul&gt;
	&lt;li&gt;&lt;a href="http://www.yelp.com/biz/picco-boston-2"&gt;Picco&lt;/a&gt; &lt;/li&gt;
		&lt;li&gt;&lt;a href="http://www.yelp.com/biz/the-beehive-boston"&gt;The Beehive&lt;/a&gt; More of a bar. Burger, beer, and live jazz music.&lt;/li&gt;
		&lt;li&gt;&lt;a href="http://www.yelp.com/biz/masa-boston"&gt;Masa&lt;/a&gt; Southwestern, Tex-Mex.&lt;/li&gt;
	&lt;/ul&gt;


	&lt;h3&gt;Food: Asian&lt;/h3&gt;


	&lt;ul&gt;
	&lt;li&gt;&lt;a href="http://www.yelp.com/biz/douzo-boston"&gt;Douzo&lt;/a&gt; is located just through the Copley mall described above. Excellent sushi. &lt;/li&gt;
		&lt;li&gt;&lt;a href="http://www.yelp.com/biz/kaze-shabu-shabu-boston"&gt;Kaze Shabu Shabu&lt;/a&gt; is a fun place. Boiling water in front of you, drop in your chicken, pork, beef, vegetables, etc.&lt;/li&gt;
	&lt;/ul&gt;


	&lt;h3&gt;Food: the North End&lt;/h3&gt;


	&lt;p&gt;This is for the adventurous, unafraid to leave the bounds of the hotel, especially for a great dinner. The North End is Boston’s Italian neighborhood. The food over here is amazing. It’s not right next to the hotel but it’s worth the $1.25 on the Green Line to Haymarket or a ~$10 cab ride.&lt;/p&gt;


	&lt;p&gt;You can’t go wrong with &lt;a href="http://is.gd/7zI6"&gt;any of the restaurants&lt;/a&gt; in this neighborhood.&lt;/p&gt;


	&lt;h2&gt;The Bars&lt;/h2&gt;


	&lt;p&gt;Okay, the important stuff. There’s about a dozen good bars within three blocks of the hotel. Mostly on the 900 block of Boylston Street and on Dalton itself (the address of the Sheraton).&lt;/p&gt;


	&lt;h3&gt;King’s&lt;/h3&gt;


	&lt;p&gt;This place is huge with tons of activities.&lt;/p&gt;


	&lt;p&gt;Bowling, tons of pool tables and three bars. Big Buck Hunter, Golden Tee, Ms. Pacman, and Centipede.&lt;/p&gt;


	&lt;p&gt;On tap: Harpoon &lt;span class="caps"&gt;IPA&lt;/span&gt;, Sam Admas Octoberfest. Good pitcher specials.&lt;/p&gt;


	&lt;p&gt;Where: Dalton Street, closest bar to the Sheraton. (&lt;a href="http://www.yelp.com/biz/kings-boston"&gt;Yelp&lt;/a&gt;)&lt;/p&gt;


	&lt;p&gt;&lt;img src="http://giantrobots.thoughtbot.com/assets/2008/11/15/kings_one.JPG" width="250" /&gt;
&lt;img src="http://giantrobots.thoughtbot.com/assets/2008/11/15/kings_two.JPG" width="250" /&gt;&lt;/p&gt;


	&lt;h3&gt;Bukowski&lt;/h3&gt;


	&lt;p&gt;This place is named after a &lt;a href="http://en.wikipedia.org/wiki/Charles_Bukowski"&gt;local writer&lt;/a&gt;. It’s got a Bohemian feel, is tiny (capacity under 50), and is known for having some of the best beer selection in town.&lt;/p&gt;


	&lt;p&gt;On the stereo: folk and country music, John Prine, Bob Dylan.&lt;/p&gt;


	&lt;p&gt;Booze: &lt;a href="http://beeradvocate.com/beer/profile/2743"&gt;Green Flash&lt;/a&gt;, &lt;a href="http://beeradvocate.com/articles/698"&gt;Leatherlips &lt;span class="caps"&gt;IPA&lt;/span&gt;&lt;/a&gt; (local), &lt;a href="http://beeradvocate.com/beer/profile/147/4083/"&gt;Stone Ruination&lt;/a&gt;, &lt;a href="http://beeradvocate.com/beer/profile/162/259"&gt;Ipswich &lt;span class="caps"&gt;IPA&lt;/span&gt;&lt;/a&gt; and &lt;a href="http://beeradvocate.com/beer/profile/162/260"&gt;Oatmeal Stout&lt;/a&gt; (local), &lt;a href="http://beeradvocate.com/beer/profile/98"&gt;Harpoon&lt;/a&gt; (local), &lt;a href="http://beeradvocate.com/beer/profile/64/2093"&gt;Dogfish 90&lt;/a&gt;, &lt;a href="http://beeradvocate.com/beer/profile/4/448/"&gt;Allagash Tripel&lt;/a&gt;, &lt;a href="http://beeradvocate.com/beer/profile/345/1005"&gt;Victory Hop Devil&lt;/a&gt;, &lt;a href="http://beeradvocate.com/beer/profile/158/12013"&gt;Great Divide Yeti&lt;/a&gt; and about 100 others…&lt;/p&gt;


	&lt;p&gt;Where: Dalton Street, tucked in between a parking garage and the Mass Turnpike… seriously. (&lt;a href="http://www.yelp.com/biz/bukowski-tavern-boston"&gt;Yelp&lt;/a&gt;)&lt;/p&gt;


	&lt;p&gt;&lt;img src="http://giantrobots.thoughtbot.com/assets/2008/11/15/bukowskis_one.JPG" width="250" /&gt;
&lt;img src="http://giantrobots.thoughtbot.com/assets/2008/11/15/bukowskis_two.JPG" width="250" /&gt;&lt;/p&gt;


	&lt;h3&gt;Dillon’s&lt;/h3&gt;


	&lt;p&gt;This place is classy. Dark wood, fans look like they belong in the Bahamas.&lt;/p&gt;


	&lt;p&gt;On tap: Guinness, &lt;span class="caps"&gt;UFO&lt;/span&gt;.&lt;/p&gt;


	&lt;p&gt;On the stereo: Van Morrison.&lt;/p&gt;


	&lt;p&gt;Where: Boylston street, next to the firehouse. Corner of Boylston and Dalton. (&lt;a href="http://www.yelp.com/biz/dillons-boston"&gt;Yelp&lt;/a&gt;)&lt;/p&gt;


	&lt;p&gt;&lt;img src="http://giantrobots.thoughtbot.com/assets/2008/11/15/dillons_one.JPG" width="250" /&gt;
&lt;img src="http://giantrobots.thoughtbot.com/assets/2008/11/15/dillons_two.JPG" width="250" /&gt;&lt;/p&gt;


	&lt;h3&gt;McGreevey’s&lt;/h3&gt;


	&lt;p&gt;This place is a baseball bar. Very &lt;strong&gt;Boston&lt;/strong&gt;. Irish bartenders, Irish food, Irish beer. Owned by &lt;a href="http://www.youtube.com/v/x-64CaD8GXw"&gt;Dropkick Murphys&lt;/a&gt;. Waitress says they’re “bad ass guys” and “come in here all the time.” Filled with superstition and &lt;a href="http://redsox.com"&gt;Red Sox&lt;/a&gt; folklore. “McGreevey’s 3rd Base is the last stop before home.”&lt;/p&gt;


	&lt;p&gt;On tap: Red Hook Long Hammer.&lt;/p&gt;


	&lt;p&gt;Where: Boylston Street. (&lt;a href="http://www.yelp.com/biz/mcgreevys-boston"&gt;Yelp&lt;/a&gt;)&lt;/p&gt;


	&lt;p&gt;&lt;img src="http://giantrobots.thoughtbot.com/assets/2008/11/15/mcgreeveys_two.JPG" width="250" /&gt;
&lt;img src="http://giantrobots.thoughtbot.com/assets/2008/11/15/mcgreeveys_one.JPG" width="250" /&gt;&lt;/p&gt;


	&lt;h3&gt;Pour House&lt;/h3&gt;


	&lt;p&gt;Warm. &lt;span class="caps"&gt;TGI&lt;/span&gt; Friday’s feel (a.k.a. lots of crazy crap on the walls). Lot of musicians from &lt;a href="http://www.berklee.edu/"&gt;Berklee&lt;/a&gt; hang out there. Huge beers of the Bud/Miller/Coors variety.&lt;/p&gt;


	&lt;p&gt;On the stereo: &lt;a href="http://www.youtube.com/watch?v=3m6z1Q2MkVk"&gt;Runaround Sue&lt;/a&gt;.&lt;/p&gt;


	&lt;p&gt;Where: Boylston Street. (&lt;a href="http://www.yelp.com/biz/the-pour-house-boston"&gt;Yelp&lt;/a&gt;)&lt;/p&gt;


	&lt;p&gt;&lt;img src="http://giantrobots.thoughtbot.com/assets/2008/11/15/pour_house.JPG" width="250" /&gt;&lt;/p&gt;


	&lt;h3&gt;Lir&lt;/h3&gt;


	&lt;p&gt;On Wednesday night of the conference, head to the second floor of Lir from 9pm-midnight. We’re holding the room for Rubyists only. Go up the spiral staircase to the room with all the bookcases…&lt;/p&gt;


	&lt;p&gt;Where: Boylston Street. (&lt;a href="http://www.yelp.com/biz/lir-irish-pub-and-restaurant-boston"&gt;Yelp&lt;/a&gt;)&lt;/p&gt;


	&lt;p&gt;&lt;img src="http://giantrobots.thoughtbot.com/assets/2008/11/15/lir_one.JPG" width="250" /&gt;&lt;/p&gt;


	&lt;h3&gt;Other bars close by&lt;/h3&gt;


	&lt;p&gt;If you’re more of the college persuasion, or enjoy Southern-style barbecue chicken and ribs, try &lt;a href="http://www.yelp.com/biz/whiskeys-food-and-spirits-boston"&gt;Whiskey’s&lt;/a&gt;. If you want to try to catch a Red Sox player cheating on his wife with a Northeastern student, go to &lt;a href="http://www.yelp.com/biz/daisy-buchanans-boston"&gt;Daisy Buchanan’s&lt;/a&gt;. If you want a breathtaking view of the city, hit the &lt;a href="http://www.yelp.com/biz/top-of-the-hub-boston"&gt;Top of the Hub&lt;/a&gt;, which sits on like the 842nd floor of the Prudential. It’s a very expensive dinner (one of the nicest restaurants in Boston), but you can sit at the bar and get a drink and a snack for under $20 while reflecting on the &lt;a href="http://en.wikipedia.org/wiki/Siege_of_Boston"&gt;Siege of Boston&lt;/a&gt;... at least that’s what I do.&lt;/p&gt;


	&lt;p&gt;We hope your enjoy your stay in the Hub of the Universe.&lt;/p&gt;
          </content>  <feedburner:origLink>http://giantrobots.thoughtbot.com/2008/11/16/boston-guide-for-rubyists</feedburner:origLink></entry>
  <entry xml:base="http://giantrobots.thoughtbot.com/">
    <author>
      <name>Dan Croak</name>
    </author>
    <id>tag:giantrobots.thoughtbot.com,2008-11-07:7699</id>
    <published>2008-11-07T22:17:00Z</published>
    <updated>2008-11-11T06:49:25Z</updated>
    <category term="Development" />
    <category term="Technology" />
    <category term="bacon" />
    <category term="context" />
    <category term="cucumber" />
    <category term="matchy" />
    <category term="rspec" />
    <category term="shoulda" />
    <category term="testing" />
    <link href="http://feeds.feedburner.com/~r/GiantRobotsSmashingIntoOtherGiantRobots/~3/445951359/a-critical-look-at-the-current-state-of-ruby-testing" rel="alternate" type="text/html" />
    <title>A critical look at the current state of Ruby testing</title>
<content type="html">
            &lt;p&gt;I’ve been feeling lately that there is a splintering in the Ruby community over testing tools. RSpec is very popular. Shoulda, too. context, matchy, bacon &amp; test/spec all have their fans.&lt;/p&gt;


	&lt;p&gt;There’s nothing inherently wrong with experiments. Diversity is a virtue. We all learn from one another.&lt;/p&gt;


	&lt;p&gt;However, standards also have their place. Testing is in the &lt;span class="caps"&gt;DNA&lt;/span&gt; of the Ruby community. Why should I have to ask questions on a mailing list of unknown helpfulness when I can find all my answers in the &lt;a href="http://www.ruby-doc.org/stdlib/libdoc/test/unit/rdoc/index.html"&gt;Ruby Standard Library&lt;/a&gt;?&lt;/p&gt;


	&lt;p&gt;There’s a simple fact that no one seems to be talking about: &lt;strong&gt;all of these testing tools are solutions to non-existant problems.&lt;/strong&gt;&lt;/p&gt;


	&lt;p&gt;Let’s take a critical look at the current state of Ruby testing.&lt;/p&gt;


	&lt;h2&gt;Why context blocks are bad&lt;/h2&gt;


They look like this in Shoulda:
&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td title="click to toggle" class="line_numbers"&gt;&lt;pre&gt;1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;6&lt;tt&gt;
&lt;/tt&gt;7&lt;tt&gt;
&lt;/tt&gt;8&lt;tt&gt;
&lt;/tt&gt;9&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;context &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;a GET to #index&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  setup &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    &lt;span class="i"&gt;2&lt;/span&gt;.times { Factory(&lt;span class="sy"&gt;:user&lt;/span&gt;) }&lt;tt&gt;
&lt;/tt&gt;    get &lt;span class="sy"&gt;:index&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;  should_respond_with &lt;span class="sy"&gt;:success&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  should_assign_to &lt;span class="sy"&gt;:users&lt;/span&gt;, &lt;span class="sy"&gt;:equals&lt;/span&gt; =&amp;gt; &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;User.ordered&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;span class="r"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;


	&lt;p&gt;This means:&lt;/p&gt;


	&lt;ul&gt;
	&lt;li&gt;Two GETs. The second one is unnecessary.&lt;/li&gt;
		&lt;li&gt;Two failure messages if something goes wrong. I only want to deal with the immediate error. One small step at a time.&lt;/li&gt;
		&lt;li&gt;Nine lines of code&lt;/li&gt;
		&lt;li&gt;Four db records created. I need to create two objects to test ordering. With two test runs, I get 4 objects. With more tests, I get many more objects created. This significantly increases my overall test time for the suite, breaking my concentration and losing everyone money.&lt;/li&gt;
		&lt;li&gt;String programming. Some feel stronger about that eval that happens with “User.ordered”. I’m somewhat ambivalent. I don’t like that I lose syntax highlighting. A pragmatic rule of thumb seems to be: if it can be avoided, it should be.&lt;/li&gt;
		&lt;li&gt;Where do I put new tests? Do I find the perfect context with the perfect setup? At a certain point, nested contexts become unwieldy. I don’t want to scroll 100 lines up to find out where I’m declaring a variable. That kind of garbage reminds me of my &lt;a href="http://en.wikipedia.org/wiki/Active_Server_Pages"&gt;Active Server Pages&lt;/a&gt; days.&lt;/li&gt;
	&lt;/ul&gt;


	&lt;p&gt;Let’s compare that to plain old &lt;a href="http://www.ruby-doc.org/stdlib/libdoc/test/unit/rdoc/index.html"&gt;Test::Unit&lt;/a&gt; (you know, that testing library you get for free with Ruby without having to install gems off github and keep track of the latest “features”):&lt;/p&gt;


&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td title="click to toggle" class="line_numbers"&gt;&lt;pre&gt;1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;6&lt;tt&gt;
&lt;/tt&gt;7&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="r"&gt;def&lt;/span&gt; &lt;span class="fu"&gt;test_GET_to_index_finds_all_users_ordered&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="i"&gt;2&lt;/span&gt;.times { Factory(&lt;span class="sy"&gt;:user&lt;/span&gt;) }&lt;tt&gt;
&lt;/tt&gt;  get &lt;span class="sy"&gt;:index&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;  assert_response &lt;span class="sy"&gt;:success&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  assert_equal &lt;span class="co"&gt;User&lt;/span&gt;.ordered, assigns(&lt;span class="sy"&gt;:users&lt;/span&gt;)&lt;tt&gt;
&lt;/tt&gt;&lt;span class="r"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;


	&lt;p&gt;With Test::Unit, we get:&lt;/p&gt;


	&lt;ul&gt;
	&lt;li&gt;One &lt;span class="caps"&gt;GET&lt;/span&gt;.&lt;/li&gt;
		&lt;li&gt;One failure message to address if something goes wrong: the one I actually care about.&lt;/li&gt;
		&lt;li&gt;Seven lines of code.&lt;/li&gt;
		&lt;li&gt;Two db records created.&lt;/li&gt;
		&lt;li&gt;No string programming.&lt;/li&gt;
		&lt;li&gt;No libraries to install or extra dependencies that might break or I might have to debug.&lt;/li&gt;
		&lt;li&gt;Just put the new test at the end of the file.&lt;/li&gt;
	&lt;/ul&gt;


	&lt;h2&gt;Why “one assertion per test” is a false idol&lt;/h2&gt;


	&lt;p&gt;There’s something very Zen about “one assertion per test.” Focusing on just one thing at a time is noble and easy to wrap your mind around.&lt;/p&gt;


	&lt;p&gt;However, this is often taken to the extreme. Let’s look at a typical test for users/:id.xml:&lt;/p&gt;


&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td title="click to toggle" class="line_numbers"&gt;&lt;pre&gt;1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;6&lt;tt&gt;
&lt;/tt&gt;7&lt;tt&gt;
&lt;/tt&gt;8&lt;tt&gt;
&lt;/tt&gt;9&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;11&lt;tt&gt;
&lt;/tt&gt;12&lt;tt&gt;
&lt;/tt&gt;13&lt;tt&gt;
&lt;/tt&gt;14&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;15&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;16&lt;tt&gt;
&lt;/tt&gt;17&lt;tt&gt;
&lt;/tt&gt;18&lt;tt&gt;
&lt;/tt&gt;19&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;20&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;21&lt;tt&gt;
&lt;/tt&gt;22&lt;tt&gt;
&lt;/tt&gt;23&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;context &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;a GET to /users/:id.xml&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  setup &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    &lt;span class="iv"&gt;@user&lt;/span&gt; = &lt;span class="co"&gt;Factory&lt;/span&gt; &lt;span class="sy"&gt;:user&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    get &lt;span class="sy"&gt;:show&lt;/span&gt;, &lt;span class="sy"&gt;:id&lt;/span&gt; =&amp;gt; &lt;span class="iv"&gt;@user&lt;/span&gt;.to_param, &lt;span class="sy"&gt;:format&lt;/span&gt; =&amp;gt; &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;xml&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;tt&gt;
&lt;/tt&gt;  should_respond_with &lt;span class="sy"&gt;:success&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  should_render_template &lt;span class="sy"&gt;:show&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;tt&gt;
&lt;/tt&gt;  should &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;find the correct User&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    assert_equal &lt;span class="iv"&gt;@user&lt;/span&gt;, assigns(&lt;span class="sy"&gt;:user&lt;/span&gt;)&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;tt&gt;
&lt;/tt&gt;  should_respond_with_xml_for &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;user&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;tt&gt;
&lt;/tt&gt;  should &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;include the user id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    assert_select &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="iv"&gt;@user&lt;/span&gt;.id.to_s&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;tt&gt;
&lt;/tt&gt;  should &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;include the user name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    assert_select &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="iv"&gt;@user&lt;/span&gt;.name&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;span class="r"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;


	&lt;p&gt;Not bad. That’s fairly easy to read. The problems:&lt;/p&gt;


	&lt;ul&gt;
	&lt;li&gt;6 database records created.&lt;/li&gt;
		&lt;li&gt;Cognitive dissonance. Some of the “one assertions per test” are shoulda macros (one line) and some are should blocks (three lines). &lt;strong&gt;There’s no rhythm. No flow.&lt;/strong&gt; TDD should &lt;strong&gt;feel rhythmic.&lt;/strong&gt;&lt;/li&gt;
		&lt;li&gt;Test names are not intention-revealing. “should include the user id” and “should include the user name” are test names I wrote. They suck. They suck because I’m forcing myself to name something that is too fine-grained.&lt;/li&gt;
		&lt;li&gt;If context/describe/should/it blocks want to make things shorter then why aren’t we using a library (Test::Unit) that makes them one line? The very fact they are more than 3 lines is because of these sugary libraries.&lt;/li&gt;
	&lt;/ul&gt;


	&lt;p&gt;Let’s try it with basic Ruby (Test::Unit) and Rails:&lt;/p&gt;


&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td title="click to toggle" class="line_numbers"&gt;&lt;pre&gt;1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;6&lt;tt&gt;
&lt;/tt&gt;7&lt;tt&gt;
&lt;/tt&gt;8&lt;tt&gt;
&lt;/tt&gt;9&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;11&lt;tt&gt;
&lt;/tt&gt;12&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="r"&gt;def&lt;/span&gt; &lt;span class="fu"&gt;test_user_show_xml&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="iv"&gt;@user&lt;/span&gt; = &lt;span class="co"&gt;Factory&lt;/span&gt; &lt;span class="sy"&gt;:user&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  get &lt;span class="sy"&gt;:show&lt;/span&gt;, &lt;span class="sy"&gt;:id&lt;/span&gt; =&amp;gt; &lt;span class="iv"&gt;@user&lt;/span&gt;.to_param, &lt;span class="sy"&gt;:format&lt;/span&gt; =&amp;gt; &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;xml&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;  assert_response &lt;span class="sy"&gt;:success&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  assert_template &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;show&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;  assert_equal &lt;span class="iv"&gt;@user&lt;/span&gt;, assigns(&lt;span class="sy"&gt;:user&lt;/span&gt;)&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;  assert_select &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;user/id&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="iv"&gt;@user&lt;/span&gt;.id.to_s&lt;tt&gt;
&lt;/tt&gt;  assert_select &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;user/name&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="iv"&gt;@user&lt;/span&gt;.name&lt;tt&gt;
&lt;/tt&gt;&lt;span class="r"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;


	&lt;ul&gt;
	&lt;li&gt;Half the lines.&lt;/li&gt;
		&lt;li&gt;Leverages the framework.&lt;/li&gt;
	&lt;/ul&gt;


	&lt;h2&gt;How “shoulda macros” should work&lt;/h2&gt;


	&lt;p&gt;I love shoulda macros. I think most of them read well, especially some of the newer ones announced in &lt;a href="http://giantrobots.thoughtbot.com/2008/9/30/shoulda-2-0"&gt;shoulda 2.0&lt;/a&gt; They also keep your test suite &lt;span class="caps"&gt;DRY&lt;/span&gt;.&lt;/p&gt;


	&lt;p&gt;They are not without problems, however:&lt;/p&gt;


	&lt;ul&gt;
	&lt;li&gt;Most are designed to be their own tests. This encourages the bad behavior discussed above in “Why contexts are bad” and “Why ‘one assertion per test’ is a false idol.” &lt;/li&gt;
		&lt;li&gt;Some make heavy use of eval. I’m convinced eval is the reason &lt;strong&gt;some line numbers are way off in backtraces.&lt;/strong&gt; Hunting for line numbers makes me angry and breaks my rhythm.&lt;/li&gt;
	&lt;/ul&gt;


	&lt;p&gt;Whatever happened to simple, protected Ruby instance methods?&lt;/p&gt;


	&lt;p&gt;This was my process last night at the &lt;a href="http://bostonrb.org"&gt;Boston.rb&lt;/a&gt; hackfest:&lt;/p&gt;


&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td title="click to toggle" class="line_numbers"&gt;&lt;pre&gt;1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;6&lt;tt&gt;
&lt;/tt&gt;7&lt;tt&gt;
&lt;/tt&gt;8&lt;tt&gt;
&lt;/tt&gt;9&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="r"&gt;def&lt;/span&gt; &lt;span class="fu"&gt;test_separate_invalids_creates_invalid&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  nurse = &lt;span class="co"&gt;Nurse&lt;/span&gt;.new&lt;tt&gt;
&lt;/tt&gt;  nurse.separate_invalids!&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;  model             = &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;Job&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  invalid_file      = invalid_file_for model&lt;tt&gt;
&lt;/tt&gt;  invalid_file_path = invalid_file_path_for model&lt;tt&gt;
&lt;/tt&gt;  assert &lt;span class="co"&gt;File&lt;/span&gt;.exists?(invalid_file_path), &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="il"&gt;&lt;span class="dl"&gt;#{&lt;/span&gt;invalid_file&lt;span class="dl"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="k"&gt; does not exist&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;span class="r"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;


	&lt;p&gt;That worked fine. However, those last four lines are noisy. Plus, I need to test two other models and don’t want to repeat the same lines.&lt;/p&gt;


	&lt;p&gt;Time to wrap up those last four lines in a method with an &lt;a href="http://xunitpatterns.com/Intent%20Revealing%20Name.html"&gt;Intention-Revealing Name&lt;/a&gt;. Since this is very vanilla Ruby, I’ll put it in a protected method in this file. Later on, &lt;strong&gt;if&lt;/strong&gt; I need to test the same behavior in another file, I’ll move the helper to test_helper.rb.&lt;/p&gt;


&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td title="click to toggle" class="line_numbers"&gt;&lt;pre&gt;1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;6&lt;tt&gt;
&lt;/tt&gt;7&lt;tt&gt;
&lt;/tt&gt;8&lt;tt&gt;
&lt;/tt&gt;9&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;11&lt;tt&gt;
&lt;/tt&gt;12&lt;tt&gt;
&lt;/tt&gt;13&lt;tt&gt;
&lt;/tt&gt;14&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;15&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;16&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="r"&gt;def&lt;/span&gt; &lt;span class="fu"&gt;test_separate_invalids_creates_invalid&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  nurse = &lt;span class="co"&gt;Nurse&lt;/span&gt;.new&lt;tt&gt;
&lt;/tt&gt;  nurse.separate_invalids!&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;  assert_create_invalid_file_for &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;Job&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  assert_create_invalid_file_for &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;JobReport&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  assert_create_invalid_file_for &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;JobView&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;protected&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;span class="r"&gt;def&lt;/span&gt; &lt;span class="fu"&gt;assert_create_invalid_file_for&lt;/span&gt;(model)&lt;tt&gt;
&lt;/tt&gt;  invalid_file      = invalid_file_for model&lt;tt&gt;
&lt;/tt&gt;  invalid_file_path = invalid_file_path_for model&lt;tt&gt;
&lt;/tt&gt;  assert &lt;span class="co"&gt;File&lt;/span&gt;.exists?(invalid_file_path), &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="il"&gt;&lt;span class="dl"&gt;#{&lt;/span&gt;invalid_file&lt;span class="dl"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="k"&gt; does not exist&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;span class="r"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;


	&lt;p&gt;This is bread-and-butter, meat-and-potatoes, &lt;strong&gt;lunch-pail&lt;/strong&gt; programming.&lt;/p&gt;


	&lt;h2&gt;Standards expand the reach of Ruby&lt;/h2&gt;


	&lt;p&gt;Ruby on Rails is still cutting-edge. Most of the people doing Rails are working at small companies and startups. This is fun and exciting.&lt;/p&gt;


	&lt;p&gt;Let’s make more programmers happy by helping Ruby extend its reach. I’d personally love to see new industries, like the budding &lt;a href="http://en.wikipedia.org/wiki/Clean_technology"&gt;clean teach&lt;/a&gt;, &lt;a href="http://en.wikipedia.org/wiki/Smart_grid"&gt;smart grid&lt;/a&gt; industry pick Ruby as a go-to programming language.&lt;/p&gt;


	&lt;p&gt;However, for Ruby to continue to grow, risk-averse programmers and managers need some reassurances:&lt;/p&gt;


	&lt;p&gt;“How will my current Java or C# skills translate?”&lt;/p&gt;


	&lt;p&gt;Well, you’ll need to learn Ruby first. Then, just spend an hour or two looking at &lt;a href="http://www.ruby-doc.org/stdlib/libdoc/test/unit/rdoc/index.html"&gt;the documentation for Test::Unit.&lt;/a&gt; If you’re familiar with JUnit or NUnit, it’s an easy transition. Same interface. Same programming skill-set.&lt;/p&gt;


	&lt;p&gt;On the other hand, if you have a few weeks, check out RSpec. I can’t guarantee a good &lt;span class="caps"&gt;ROI&lt;/span&gt; on that time you spend, however.&lt;/p&gt;


	&lt;h2&gt;Standards make you focus on domain logic&lt;/h2&gt;


	&lt;p&gt;Ruby makes it easy to create DSLs. It makes it easy to create new testing libraries. That’s a wonderful testament to the language.&lt;/p&gt;


	&lt;p&gt;It doesn’t mean you have all the answers. It doesn’t mean you know better how to write a testing framework. “Tests” and “assertions” are fine. They have the added benefit of being a standard, and familiar for programmers coming from other languages.&lt;/p&gt;


	&lt;p&gt;Jeremy McNally’s new &lt;a href="http://github.com/jeremymcanally/context"&gt;context&lt;/a&gt; library is tiny, yet it is trying to be &lt;span class="caps"&gt;API&lt;/span&gt;-compatible with RSpec, shoulda, etc. This blows my mind. I’ve talked to Jeremy and I think he’s a great guy but I don’t understand this as a design goal at all. While it tries to avoid the eval macros, it’s making the same mistakes previously discussed regarding contexts. Hell, it’s &lt;strong&gt;called context&lt;/strong&gt;, which we should consider a test code smell.&lt;/p&gt;


	&lt;p&gt;All this energy on creating new DSLs for testing is energy wasted. Use the standard and get cracking on solving truly innovative problems (note: the smart grid is innovative; social networks are not).&lt;/p&gt;


	&lt;p&gt;Learn from our collective experience in the Rails community with &lt;span class="caps"&gt;REST&lt;/span&gt;: forget about coming up with great names for your controller actions. The interface for testing is well-defined in the xUnit family. Use the standard and focus on your real problems. We’re all spinning our wheels with these new testing syntaxes.&lt;/p&gt;


	&lt;h2&gt;Rails shows excellent judgment once again&lt;/h2&gt;


	&lt;p&gt;Okay, I’ll concede that there’s one problem with Test::Unit: snake_case:&lt;/p&gt;


&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td title="click to toggle" class="line_numbers"&gt;&lt;pre&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="r"&gt;def&lt;/span&gt; &lt;span class="fu"&gt;test_GET_to_index_finds_all_users_ordered&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;


	&lt;p&gt;That kind of blows. Rails core apparently agrees: check out &lt;a href="http://github.com/rails/rails/tree/master/activesupport/lib/active_support/test_case.rb"&gt;ActiveSupport::TestCase.test&lt;/a&gt;&lt;/p&gt;


	&lt;p&gt;For non-Rails projects, this can be simply:&lt;/p&gt;


&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td title="click to toggle" class="line_numbers"&gt;&lt;pre&gt;1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;6&lt;tt&gt;
&lt;/tt&gt;7&lt;tt&gt;
&lt;/tt&gt;8&lt;tt&gt;
&lt;/tt&gt;9&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;11&lt;tt&gt;
&lt;/tt&gt;12&lt;tt&gt;
&lt;/tt&gt;13&lt;tt&gt;
&lt;/tt&gt;14&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;15&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;16&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="r"&gt;class&lt;/span&gt; &lt;span class="cl"&gt;Test::Unit::TestCase&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;tt&gt;
&lt;/tt&gt;  &lt;span class="r"&gt;def&lt;/span&gt; &lt;span class="pc"&gt;self&lt;/span&gt;.test(name, &amp;amp;block)&lt;tt&gt;
&lt;/tt&gt;    test_name = &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;test_&lt;/span&gt;&lt;span class="il"&gt;&lt;span class="dl"&gt;#{&lt;/span&gt;name.gsub(&lt;span class="rx"&gt;&lt;span class="dl"&gt;/&lt;/span&gt;&lt;span class="ch"&gt;\s&lt;/span&gt;&lt;span class="k"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;/&lt;/span&gt;&lt;/span&gt;,&lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;_&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;)&lt;span class="dl"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;.to_sym&lt;tt&gt;
&lt;/tt&gt;    defined = instance_method(test_name) &lt;span class="r"&gt;rescue&lt;/span&gt; &lt;span class="pc"&gt;false&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    raise &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="il"&gt;&lt;span class="dl"&gt;#{&lt;/span&gt;test_name&lt;span class="dl"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="k"&gt; is already defined in &lt;/span&gt;&lt;span class="il"&gt;&lt;span class="dl"&gt;#{&lt;/span&gt;&lt;span class="pc"&gt;self&lt;/span&gt;&lt;span class="dl"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="r"&gt;if&lt;/span&gt; defined&lt;tt&gt;
&lt;/tt&gt;    &lt;span class="r"&gt;if&lt;/span&gt; block_given?&lt;tt&gt;
&lt;/tt&gt;      define_method(test_name, &amp;amp;block)&lt;tt&gt;
&lt;/tt&gt;    &lt;span class="r"&gt;else&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;      define_method(test_name) &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;        flunk &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;No implementation provided for &lt;/span&gt;&lt;span class="il"&gt;&lt;span class="dl"&gt;#{&lt;/span&gt;name&lt;span class="dl"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;      &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;tt&gt;
&lt;/tt&gt;&lt;span class="r"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;


	&lt;p&gt;Now our tests look like this:&lt;/p&gt;


&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td title="click to toggle" class="line_numbers"&gt;&lt;pre&gt;1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;6&lt;tt&gt;
&lt;/tt&gt;7&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;test &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;separate_invalids! creates invalid file for each model&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  nurse = &lt;span class="co"&gt;Nurse&lt;/span&gt;.new&lt;tt&gt;
&lt;/tt&gt;  nurse.separate_invalids!&lt;tt&gt;
&lt;/tt&gt;  assert_create_invalid_file_for &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;Job&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  assert_create_invalid_file_for &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;JobReport&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  assert_create_invalid_file_for &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;JobView&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;span class="r"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;


	&lt;p&gt;If you like that style (I think I do), Rails now gives this to you “for free.” &lt;strong&gt;Use the framework, use the standard.&lt;/strong&gt;&lt;/p&gt;


	&lt;h2&gt;Acceptance Test Driven Planning is still a baby&lt;/h2&gt;


	&lt;p&gt;RSpec’s &lt;a href="http://github.com/aslakhellesoy/cucumber"&gt;Cucumber&lt;/a&gt; has the alpha geeks excited. I’ve never used it so I won’t say too much about it except that I’m skeptical. I think any of us would be happy to add anything to our software toolboxes that help us deliver high quality apps faster. I don’t see Acceptance Test Driven Planning adding much value, however, at the expense of more overhead.&lt;/p&gt;


	&lt;p&gt;I’d love to hear “success stories” in the comments, though.&lt;/p&gt;
          </content>  <feedburner:origLink>http://giantrobots.thoughtbot.com/2008/11/7/a-critical-look-at-the-current-state-of-ruby-testing</feedburner:origLink></entry>
  <entry xml:base="http://giantrobots.thoughtbot.com/">
    <author>
      <name>Tammer Saleh</name>
    </author>
    <id>tag:giantrobots.thoughtbot.com,2008-11-06:7698</id>
    <published>2008-11-06T02:36:00Z</published>
    <updated>2008-11-06T02:39:04Z</updated>
    <link href="http://feeds.feedburner.com/~r/GiantRobotsSmashingIntoOtherGiantRobots/~3/443894589/on-the-flight-to-rubyconf-2008" rel="alternate" type="text/html" />
    <title>On the flight to RubyConf 2008</title>
<content type="html">
            &lt;p&gt;This is a bit last minute, but most of Thoughtbot (&lt;a href="http://jayunit.net"&gt;Jason Morrison&lt;/a&gt;, &lt;a href="http://joeferris.me"&gt;Joe Ferris&lt;/a&gt;, &lt;a href="http://mike-burns.com"&gt;Mike Burns&lt;/a&gt;, &lt;a href="http://thoughtbot.com/about/people#cpytel"&gt;Chad Pytel&lt;/a&gt;, &lt;a href="http://thoughtbot.com/about/people#mjankowski"&gt;Matt Jankowsi&lt;/a&gt; and &lt;a href="http://tammersaleh.com"&gt;myself&lt;/a&gt;) are on a flight to Orlando, Florida for &lt;a href="http://rubyconf.org"&gt;RubyConf 2008&lt;/a&gt;.  If you’ve got questions about Paperclip, Factory Girl, Shoulda or any of our other projects – or if you just want to get some drinks with some fairly personable individuals, then by all means: &lt;strong&gt;make your presence known!&lt;/strong&gt;&lt;/p&gt;


	&lt;p&gt;Also, I’ll be presenting on Friday at 11:50 on “Coding For Failure: &lt;em&gt;All you need to know for building rock solid applications (in 45 minutes)&lt;/em&gt;”.  I guarantee that it will have been the best presentation you’ll have seen on Friday at 11:15am.&lt;/p&gt;
          </content>  <feedburner:origLink>http://giantrobots.thoughtbot.com/2008/11/6/on-the-flight-to-rubyconf-2008</feedburner:origLink></entry>
  <entry xml:base="http://giantrobots.thoughtbot.com/">
    <author>
      <name>Kevin Burg</name>
    </author>
    <id>tag:giantrobots.thoughtbot.com,2008-10-31:7694</id>
    <published>2008-10-31T16:29:00Z</published>
    <updated>2008-10-31T19:30:29Z</updated>
    <category term="design" />
    <category term="mockup" />
    <category term="process" />
    <category term="video" />
    <link href="http://feeds.feedburner.com/~r/GiantRobotsSmashingIntoOtherGiantRobots/~3/438370273/design-evolution-weak-to-solid" rel="alternate" type="text/html" />
    <title>Design evolution - from weak to solid</title>
<content type="html">
            As a designer, it's possible to nail a design on the first try, but typically, there is an evolutionary process involved. In the case of a recent redesign of Folkstory.us, the process went longer than intended, but the initial mockup and final mockup bear enough resemblances to make for an interesting animated journey. The first mockup failed to knock any socks off whatsoever; however, as time progressed we came to have a solid and successful design. Watch below or click through to the &lt;a href="http://vimeo.com/1913025"&gt;Vimeo HD version&lt;/a&gt; to see the crisp details.  

&lt;br /&gt;
&lt;br /&gt;

&amp;lt;object height="383" width="681"&gt;	&amp;lt;param /&gt;	&amp;lt;param /&gt;	&amp;lt;param /&gt;	&amp;lt;embed src="http://vimeo.com/moogaloop.swf?clip_id=1913025&amp;amp;amp;server=vimeo.com&amp;amp;amp;show_title=0&amp;amp;amp;show_byline=0&amp;amp;amp;show_portrait=0&amp;amp;amp;color=00ADEF&amp;amp;amp;fullscreen=1" height="383" width="681"&gt;&amp;lt;/embed&gt;&amp;lt;/object&gt;&lt;br /&gt;&lt;a href="http://vimeo.com/1913025?pg=embed&amp;amp;amp;sec=1913025"&gt;Folkstory Revisions&lt;/a&gt; from &lt;a href="http://vimeo.com/user477064?pg=embed&amp;amp;amp;sec=1913025"&gt;Kevin Burg&lt;/a&gt; on &lt;a href="http://vimeo.com?pg=embed&amp;amp;amp;sec=1913025"&gt;Vimeo&lt;/a&gt;.
          </content>  <feedburner:origLink>http://giantrobots.thoughtbot.com/2008/10/31/design-evolution-weak-to-solid</feedburner:origLink></entry>
  <entry xml:base="http://giantrobots.thoughtbot.com/">
    <author>
      <name>Chad Pytel</name>
    </author>
    <id>tag:giantrobots.thoughtbot.com,2008-10-29:7682</id>
    <published>2008-10-29T01:00:00Z</published>
    <updated>2008-10-29T12:45:02Z</updated>
    <category term="git" />
    <category term="github" />
    <category term="plugins" />
    <link href="http://feeds.feedburner.com/~r/GiantRobotsSmashingIntoOtherGiantRobots/~3/435290370/we-ve-turned-our-subversion-server-off" rel="alternate" type="text/html" />
    <title>We've turned our subversion server off</title>
<content type="html">
            &lt;p&gt;As we &lt;a href="http://giantrobots.thoughtbot.com/2008/4/15/moving-to-github"&gt;announced quite a while ago&lt;/a&gt; we moved all of our plugins to github.  Since then, we’ve moved all of our client work (where we provide the source code repo) to github as well.&lt;/p&gt;


	&lt;p&gt;We had kept our subversion server online, with nothing being updated on it (all updates were in git), but earlier today we shut it down completely.  If, for some reason, you were still using the subversion instance of one of our plugins, you’ll want to get it from git now (you would have been using an outdated one anyway).&lt;/p&gt;


	&lt;p&gt;You can see all of the plugins on the &lt;a href="http://github.com/thoughtbot"&gt;thoughtbot github page&lt;/a&gt;, but here are some of the most popular.&lt;/p&gt;


	&lt;ul&gt;
	&lt;li&gt;&lt;a href="http://github.com/thoughtbot/shoulda"&gt;Shoulda&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="http://github.com/thoughtbot/paperclip"&gt;Paperclip&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="http://github.com/thoughtbot/factory_girl"&gt;factory_girl&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="http://github.com/thoughtbot/hoptoad_notifier"&gt;hoptoad_notifier&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="http://github.com/thoughtbot/squirrel"&gt;Squirrel&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="http://github.com/thoughtbot/jester"&gt;Jester&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="http://github.com/thoughtbot/suspenders/tree"&gt;suspenders&lt;/a&gt;&lt;/li&gt;
	&lt;/ul&gt;


	&lt;p&gt;While we’re on the subject of git and github, I’d like to mention that paperclip is the 18th &lt;a href="http://github.com/popular/watched"&gt;most watched&lt;/a&gt; project on github, while paperclip and shoulda are the 21st and 22nd &lt;a href="http://github.com/popular/forked"&gt;most forked projects&lt;/a&gt;.  Congrats to everyone involved in those projects, and thanks for making them successful.&lt;/p&gt;


	&lt;p&gt;Happy forking.&lt;/p&gt;
          </content>  <feedburner:origLink>http://giantrobots.thoughtbot.com/2008/10/29/we-ve-turned-our-subversion-server-off</feedburner:origLink></entry>
  <entry xml:base="http://giantrobots.thoughtbot.com/">
    <author>
      <name>Tammer Saleh</name>
    </author>
    <id>tag:giantrobots.thoughtbot.com,2008-10-25:7677</id>
    <published>2008-10-25T05:37:00Z</published>
    <updated>2008-10-25T05:37:57Z</updated>
    <category term="Business" />
    <link href="http://feeds.feedburner.com/~r/GiantRobotsSmashingIntoOtherGiantRobots/~3/431423937/hoptoad-downtime-sunday-at-midnight" rel="alternate" type="text/html" />
    <title>Hoptoad Downtime Sunday at Midnight</title>
<content type="html">
            &lt;p&gt;&lt;img src="http://giantrobots.thoughtbot.com/assets/2008/10/25/crawling_baby.jpg" alt="" /&gt;&lt;/p&gt;


	&lt;p&gt;Hoptoad has been growing like a little toddler – each set of shoes proving too small for the next.  In just ten months, our database has collected almost &lt;a href="http://hoptoadapp.com/welcome"&gt;7 million errors&lt;/a&gt;, and has grown to 73GB (that’s 19,136,512 words for you old-schoolers out there).&lt;/p&gt;


	&lt;p&gt;Because of this, we have to schedule a teensy weensy little &lt;strong&gt;&lt;span class="caps"&gt;DOWNTIME&lt;/span&gt;&lt;/strong&gt; this weekend on &lt;strong&gt;Sunday at midnight&lt;/strong&gt; for about half an hour while we move to a new database cluster.  We expect that ya’ll won’t even notice, but we want to make sure you’re aware just the same.&lt;/p&gt;


	&lt;p&gt;As part of this little announcement, we’d like to emphasize that the hosting Hoptoad has been receiving from &lt;a href="http://engineyard.com/"&gt;Engine Yard&lt;/a&gt; has been phenomenal.  They have been on top of any issue we might have had well before we knew about it, and they’ve been responsible and vigilant in every point of interaction.  If your livelihood depends on your Rails application staying alive, then put yourselves in their hands.  You won’t regret it.&lt;/p&gt;
          </content>  <feedburner:origLink>http://giantrobots.thoughtbot.com/2008/10/25/hoptoad-downtime-sunday-at-midnight</feedburner:origLink></entry>
  <entry xml:base="http://giantrobots.thoughtbot.com/">
    <author>
      <name>Chad Pytel</name>
    </author>
    <id>tag:giantrobots.thoughtbot.com,2008-10-23:7668</id>
    <published>2008-10-23T17:46:00Z</published>
    <updated>2008-10-23T17:46:10Z</updated>
    <category term="Design" />
    <category term="Development" />
    <category term="railsrumble" />
    <link href="http://feeds.feedburner.com/~r/GiantRobotsSmashingIntoOtherGiantRobots/~3/429865901/railsrumble-2008-entries" rel="alternate" type="text/html" />
    <title>Rails Rumble 2008 Entries</title>
<content type="html">
            &lt;p&gt;As we’ve hinted at in a few of our recent posts, we participated in this year’s &lt;a href="http://railsrumble.com"&gt;Rails Rumble&lt;/a&gt;.  Three teams had thoughtbot team members on them, and we had another team working in our office.  Since voting has now started, we encourage you to sign up to vote and check out all the apps.&lt;/p&gt;


	&lt;h3&gt;&lt;a href="http://wheresthemilk.at"&gt;Wheres the Milk At?&lt;/a&gt;&lt;/h3&gt;


	&lt;p&gt;A site that helps you find the cheapest place to buy groceries near you, based on your past buying habits.&lt;/p&gt;


	&lt;p&gt;&lt;a href="http://wheresthemilk.at"&gt;&lt;img src="http://giantrobots.thoughtbot.com/assets/2008/10/23/wheresthemilkat.png" alt="" /&gt;&lt;/a&gt;&lt;/p&gt;


	&lt;h3&gt;&lt;a href="http://bootleggers.r08.railsrumble.com/"&gt;Petticoat&lt;/a&gt;&lt;/h3&gt;


	&lt;p&gt;Pulls in tweets &amp; tubes based on search terms defined in channels.&lt;/p&gt;


	&lt;p&gt;&lt;a href="http://bootleggers.r08.railsrumble.com/"&gt;&lt;img src="http://giantrobots.thoughtbot.com/assets/2008/10/23/petticoat.png" alt="" /&gt;&lt;/a&gt;&lt;/p&gt;


	&lt;h3&gt;&lt;a href="http://jotlyapp.com"&gt;Jot.ly&lt;/a&gt;&lt;/h3&gt;


	&lt;p&gt;Dead simple blogging that sits nicely between micro-blogging and full blogging.&lt;/p&gt;


	&lt;p&gt;&lt;a href="http://jotlyapp.com"&gt;&lt;img src="http://giantrobots.thoughtbot.com/assets/2008/10/23/jotly.png" alt="" /&gt;&lt;/a&gt;&lt;/p&gt;


	&lt;p&gt;We weren’t just participants in the Rails Rumble though, we’re also &lt;a href="http://blog.railsrumble.com/prizes"&gt;a sponsor&lt;/a&gt;, and we &lt;a href="http://blog.railsrumble.com/workshare"&gt;offered up our Boston office&lt;/a&gt; for any developers in Boston to use for the weekend.  We provided food and drink throughout the weekend, and by the end had thoroughly abused the office to the point of desperately needing our cleaners to come.  Both the Wheres the Milk At team and the Petticoat team worked in the office, and so did the Flockup.com team.&lt;/p&gt;


	&lt;h3&gt;&lt;a href="http://flockup.com"&gt;Flockup&lt;/a&gt;&lt;/h3&gt;


	&lt;p&gt;Groups for twitter.&lt;/p&gt;


	&lt;p&gt;&lt;a href="http://flockup.com"&gt;&lt;img src="http://giantrobots.thoughtbot.com/assets/2008/10/23/flockup.png" alt="" /&gt;&lt;/a&gt;&lt;/p&gt;


	&lt;p&gt;Over the course of the weekend we consumed lots of donuts, bagels, pizzas, Chinese food, and more than a dozen hits of &lt;a href="http://www.drinkcocaine.com/default.php"&gt;cocaine&lt;/a&gt;.&lt;/p&gt;


	&lt;p&gt;We’d really appreciate you checking out all these apps and voting in the &lt;a href="http://railsrumble.com"&gt;Rails Rumble&lt;/a&gt;.&lt;/p&gt;
          </content>  <feedburner:origLink>http://giantrobots.thoughtbot.com/2008/10/23/railsrumble-2008-entries</feedburner:origLink></entry>
  <entry xml:base="http://giantrobots.thoughtbot.com/">
    <author>
      <name>Chad Pytel</name>
    </author>
    <id>tag:giantrobots.thoughtbot.com,2008-10-22:7659</id>
    <published>2008-10-22T15:41:00Z</published>
    <updated>2008-10-22T17:42:13Z</updated>
    <category term="Development" />
    <category term="metrics" />
    <category term="Rails" />
    <category term="rails" />
    <category term="rake stats" />
    <category term="rcov" />
    <category term="test coverage" />
    <link href="http://feeds.feedburner.com/~r/GiantRobotsSmashingIntoOtherGiantRobots/~3/428676553/test-metrics-in-your-rails-app-and-what-they-mean" rel="alternate" type="text/html" />
    <title>Simple Test Metrics in Your Rails App, and What They Mean</title>
<content type="html">
            &lt;p&gt;There are two, low barrier to entry ways to get some quick metrics about your application’s test code and the coverage it provides.  Of course there are others, but today we’re just going to focus on the two that are easiest to run and on what they mean: &lt;code&gt;rake stats&lt;/code&gt; and &lt;code&gt;rcov&lt;/code&gt;.&lt;/p&gt;


	&lt;p&gt;The first tool available to us comes built into Rails, and that’s &lt;code&gt;rake stats&lt;/code&gt;.&lt;/p&gt;


	&lt;h2&gt;rake stats&lt;/h2&gt;


	&lt;p&gt;If you haven’t used it before, &lt;code&gt;rake stats&lt;/code&gt;, when run, outputs a quick summary of the lines of code, lines of test code, number of classes, number of methods, the ratio of methods to classes, and the ratio of lines of code per method.&lt;/p&gt;


	&lt;p&gt;Lets take a look at the output from the application Joe, Mike, Micah, and myself just built for the Rails Rumble, &lt;a href="http://wheresthemilk.at"&gt;Where’s the Milk At?&lt;/a&gt;.&lt;/p&gt;


&lt;pre&gt;
+----------------------+-------+-------+---------+---------+-----+-------+
| Name                 | Lines |   LOC | Classes | Methods | M/C | LOC/M |
+----------------------+-------+-------+---------+---------+-----+-------+
| Controllers          |   176 |   149 |      10 |      18 |   1 |     6 |
| Helpers              |    38 |    35 |       0 |       4 |   0 |     6 |
| Models               |   183 |   147 |       5 |      20 |   4 |     5 |
| Libraries            |     0 |     0 |       0 |       0 |   0 |     0 |
| Integration tests    |     0 |     0 |       0 |       0 |   0 |     0 |
| Functional tests     |   855 |   686 |       9 |       3 |   0 |   226 |
| Unit tests           |   684 |   568 |       7 |       0 |   0 |     0 |
+----------------------+-------+-------+---------+---------+-----+-------+
| Total                |  1936 |  1585 |      31 |      45 |   1 |    33 |
+----------------------+-------+-------+---------+---------+-----+-------+
  Code LOC: 331     Test LOC: 1254     Code to Test Ratio: 1:3.8
&lt;/pre&gt;

	&lt;p&gt;Ok, when looking at the output from &lt;code&gt;rake stats&lt;/code&gt;, there are a few important bits of information that you should look at first, and that are all in the final summary line, in this case:&lt;/p&gt;


	&lt;ul&gt;
	&lt;li&gt;Lines of Code (Excluding test code): 331&lt;/li&gt;
		&lt;li&gt;Lines of Test Code: 1254&lt;/li&gt;
		&lt;li&gt;Code to Test Ratio: 1:3.8&lt;/li&gt;
	&lt;/ul&gt;


	&lt;p&gt;A Code to Test Ratio of 1 to 3.8 is somewhat ridiculous.  Its incredibly high, and when you see something like this, its important to ask &lt;em&gt;why?&lt;/em&gt;  That’s pretty much the entire usefulness of the output of &lt;code&gt;rake stats&lt;/code&gt; as a metric.  Here are some guidelines I’ve devised, based on the experience of looking at a bunch of applications I consider “well tested” and “poorly tested”.&lt;/p&gt;


	&lt;ul&gt;
	&lt;li&gt;Anything less than 1:1 the code probably lacks sufficient tests&lt;/li&gt;
		&lt;li&gt;Anything more than 1:2 is suspect to questioning, &lt;em&gt;but upon investigation could be found to be perfectly reasonable&lt;/em&gt;.&lt;/li&gt;
	&lt;/ul&gt;


	&lt;p&gt;There are a few other nice things in the output from &lt;code&gt;rake stats&lt;/code&gt; that are helpful for a birds eye view of the application.  For example, you can tell that we didn’t write integration tests, and our application has 5 models and 10 controllers.&lt;/p&gt;


	&lt;p&gt;Lets investigate why the 1:3.8 ratio we have in Where’s the Milk At.  Going in, and before doing any actual investigation, I have some initial hunches as to why the application has the ratio it does.  Those are&lt;/p&gt;


	&lt;ul&gt;
	&lt;li&gt;Given a rapid development schedule of 48 hours, we basically didn’t have any opportunity to refactor tests&lt;/li&gt;
		&lt;li&gt;Our shoulda_macros are being counted as &lt;span class="caps"&gt;LOTC&lt;/span&gt;&lt;/li&gt;
		&lt;li&gt;We have several complex named scopes that count as 1 to 3 lines of code, but have many more lines of test code&lt;/li&gt;
	&lt;/ul&gt;


	&lt;h3&gt;Given a rapid development schedule of 48 hours, we basically didn’t have any opportunity to refactor tests&lt;/h3&gt;


	&lt;p&gt;Refactoring tests, just like refactoring code is an essential part of real &lt;span class="caps"&gt;TDD&lt;/span&gt;.  Without taking this step, it’d only be natural that our tests would be repetitive, and the lines of test code would be increased.  It’s difficult to present a brief example, but here are some typical things that you’ll want to look for in your tests that would be candidates for refactoring&lt;/p&gt;


	&lt;ul&gt;
	&lt;li&gt;Duplicated setup code that can be moved into a common context&lt;/li&gt;
		&lt;li&gt;Multiple contexts that do the same thing&lt;/li&gt;
		&lt;li&gt;Unnecessary tests&lt;/li&gt;
		&lt;li&gt;Duplicated test code that can me moved into a macro&lt;/li&gt;
	&lt;/ul&gt;


	&lt;p&gt;Upon inspection of the Where’s the Milk At test code, I actually found very few, if any, instances of any of the above.  In fact, I found that we used extensive use of the macros shoulda provides, we wrote our application specific macros, such as &lt;code&gt;should_have_map&lt;/code&gt; and &lt;code&gt;should_display&lt;/code&gt;, and we used good practice of shared contexts.&lt;/p&gt;


	&lt;p&gt;So, I put this aside as a possible cause, but now that I’ve started to review the test code, I’ve started to develop some new ideas about our code to test ratio that I’ll come back to later on.&lt;/p&gt;


	&lt;h3&gt;Our shoulda_macros are being counted as &lt;span class="caps"&gt;LOTC&lt;/span&gt;&lt;/h3&gt;


	&lt;p&gt;We used several helpful shoulda test macros to speed up development.  My initial suspicion was that these macros were being counted as lines of test code.  After investigating, I was able to determine that rake stats &lt;em&gt;only&lt;/em&gt; looks in test/unit, test/functional, and test/integration, so this isn’t the case.  I put this aside for now, and pocket the info about how rake stats works internally for possible future use some time down the road.&lt;/p&gt;


	&lt;h3&gt;We have several complex named scopes&lt;/h3&gt;


	&lt;p&gt;The last of my initial assumptions about our ratio (the astute reader will notice I’m 0 for 2 now) is that we have several complex named scopes that are only 1 to 3 lines of code, but have many more lines of test code.  Upon inspection, this is clearly the case.  Lets take a look at an example.&lt;/p&gt;


	&lt;p&gt;We have a named scope which returns all of the Purchases that were made in a specific set of stores.  Here’s what it looks like:&lt;/p&gt;


&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td title="click to toggle" class="line_numbers"&gt;&lt;pre&gt;1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;named_scope &lt;span class="sy"&gt;:in_stores&lt;/span&gt;, lambda {|stores|&lt;tt&gt;
&lt;/tt&gt;  { &lt;span class="sy"&gt;:conditions&lt;/span&gt; =&amp;gt; [&lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;purchases.store_id IN(?)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;, stores] }&lt;tt&gt;
&lt;/tt&gt;}&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;


	&lt;p&gt;And here is the accompanying test (this test was pure &lt;span class="caps"&gt;TDD&lt;/span&gt;, the tests were written a little bit at a time before the named scope was actually written).&lt;/p&gt;


&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td title="click to toggle" class="line_numbers"&gt;&lt;pre&gt;1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;6&lt;tt&gt;
&lt;/tt&gt;7&lt;tt&gt;
&lt;/tt&gt;8&lt;tt&gt;
&lt;/tt&gt;9&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;11&lt;tt&gt;
&lt;/tt&gt;12&lt;tt&gt;
&lt;/tt&gt;13&lt;tt&gt;
&lt;/tt&gt;14&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;15&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;16&lt;tt&gt;
&lt;/tt&gt;17&lt;tt&gt;
&lt;/tt&gt;18&lt;tt&gt;
&lt;/tt&gt;19&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;20&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;21&lt;tt&gt;
&lt;/tt&gt;22&lt;tt&gt;
&lt;/tt&gt;23&lt;tt&gt;
&lt;/tt&gt;24&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;25&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;26&lt;tt&gt;
&lt;/tt&gt;27&lt;tt&gt;
&lt;/tt&gt;28&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;  context &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;looking for purchases in stores&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    setup &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;      &lt;span class="iv"&gt;@stores&lt;/span&gt; = [Factory(&lt;span class="sy"&gt;:store&lt;/span&gt;), Factory(&lt;span class="sy"&gt;:store&lt;/span&gt;)]&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;      &lt;span class="iv"&gt;@in_store_purchases&lt;/span&gt; = []&lt;tt&gt;
&lt;/tt&gt;      &lt;span class="iv"&gt;@stores&lt;/span&gt;.each &lt;span class="r"&gt;do&lt;/span&gt; |store|&lt;tt&gt;
&lt;/tt&gt;        &lt;span class="i"&gt;2&lt;/span&gt;.times &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;          &lt;span class="iv"&gt;@in_store_purchases&lt;/span&gt; &amp;lt;&amp;lt; Factory(&lt;span class="sy"&gt;:purchase&lt;/span&gt;, &lt;span class="sy"&gt;:store&lt;/span&gt; =&amp;gt; store)&lt;tt&gt;
&lt;/tt&gt;        &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;      &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;      Factory(&lt;span class="sy"&gt;:purchase&lt;/span&gt;) &lt;span class="c"&gt;# purchase at another store&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;      &lt;span class="iv"&gt;@result&lt;/span&gt; = &lt;span class="co"&gt;Purchase&lt;/span&gt;.in_stores(&lt;span class="iv"&gt;@stores&lt;/span&gt;)&lt;tt&gt;
&lt;/tt&gt;    &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;    should &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;not return any purchases for other stores&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;      assert_all &lt;span class="iv"&gt;@result&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt; |purchase|&lt;tt&gt;
&lt;/tt&gt;        &lt;span class="iv"&gt;@stores&lt;/span&gt;.include?(purchase.store)&lt;tt&gt;
&lt;/tt&gt;      &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;    should &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;return every purchase for the specified stores&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;      assert_all &lt;span class="iv"&gt;@in_store_purchases&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt; |purchase|&lt;tt&gt;
&lt;/tt&gt;        &lt;span class="iv"&gt;@result&lt;/span&gt;.include?(purchase)&lt;tt&gt;
&lt;/tt&gt;      &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;


	&lt;p&gt;You can see that for our 3 line named_scope, we have 23 lines of test code.  That’s a ratio of 1:8, and this is an example of one of the simpler named scopes in the the application (assert_all is an assertion we wrote).&lt;/p&gt;


	&lt;p&gt;Additionally, we could make this ratio slightly worse (or better, depending on how you’re looking at it) by putting the named scope all on one line, instead of 3.&lt;/p&gt;


	&lt;p&gt;There are quite a few of these finders and accompanying tests, and I feel confident after investigating that this is one of the reasons for the ratio.&lt;/p&gt;


	&lt;h3&gt;Other causes&lt;/h3&gt;


	&lt;p&gt;In reviewing the test code, I started to notice a few other things the contribute to the ratio.&lt;/p&gt;


	&lt;p&gt;Take the following test, for example:&lt;/p&gt;


&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td title="click to toggle" class="line_numbers"&gt;&lt;pre&gt;1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;6&lt;tt&gt;
&lt;/tt&gt;7&lt;tt&gt;
&lt;/tt&gt;8&lt;tt&gt;
&lt;/tt&gt;9&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;11&lt;tt&gt;
&lt;/tt&gt;12&lt;tt&gt;
&lt;/tt&gt;13&lt;tt&gt;
&lt;/tt&gt;14&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;15&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;16&lt;tt&gt;
&lt;/tt&gt;17&lt;tt&gt;
&lt;/tt&gt;18&lt;tt&gt;
&lt;/tt&gt;19&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;20&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;21&lt;tt&gt;
&lt;/tt&gt;22&lt;tt&gt;
&lt;/tt&gt;23&lt;tt&gt;
&lt;/tt&gt;24&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;25&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;26&lt;tt&gt;
&lt;/tt&gt;27&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;  logged_in_user_context &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    context &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;with at least one purchase&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;      setup &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;        &lt;span class="iv"&gt;@purchases&lt;/span&gt; = paginate([Factory(&lt;span class="sy"&gt;:purchase&lt;/span&gt;)])&lt;tt&gt;
&lt;/tt&gt;        &lt;span class="iv"&gt;@store&lt;/span&gt;     = &lt;span class="iv"&gt;@purchases&lt;/span&gt;.last.store&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;        &lt;span class="iv"&gt;@user&lt;/span&gt;.     stubs(&lt;span class="sy"&gt;:purchases&lt;/span&gt;).returns(&lt;span class="iv"&gt;@purchases&lt;/span&gt;)&lt;tt&gt;
&lt;/tt&gt;        &lt;span class="iv"&gt;@purchases&lt;/span&gt;.stubs(&lt;span class="sy"&gt;:latest&lt;/span&gt;).   returns(&lt;span class="iv"&gt;@purchases&lt;/span&gt;)&lt;tt&gt;
&lt;/tt&gt;        &lt;span class="iv"&gt;@purchases&lt;/span&gt;.stubs(&lt;span class="sy"&gt;:paginate&lt;/span&gt;). returns(&lt;span class="iv"&gt;@purchases&lt;/span&gt;)&lt;tt&gt;
&lt;/tt&gt;      &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;      context &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;on GET to index&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;        setup &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;          get &lt;span class="sy"&gt;:index&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;        &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;        before_should &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;find the user's purchases&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;          &lt;span class="iv"&gt;@user&lt;/span&gt;.expects(&lt;span class="sy"&gt;:purchases&lt;/span&gt;).with().returns(&lt;span class="iv"&gt;@purchases&lt;/span&gt;)&lt;tt&gt;
&lt;/tt&gt;        &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;        before_should &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;find the latest purchases&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;          &lt;span class="iv"&gt;@purchases&lt;/span&gt;.expects(&lt;span class="sy"&gt;:latest&lt;/span&gt;).with().returns(&lt;span class="iv"&gt;@purchases&lt;/span&gt;)&lt;tt&gt;
&lt;/tt&gt;        &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;        before_should &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;paginate the purchases&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;          &lt;span class="iv"&gt;@purchases&lt;/span&gt;.expects(&lt;span class="sy"&gt;:paginate&lt;/span&gt;).returns(&lt;span class="iv"&gt;@purchases&lt;/span&gt;)&lt;tt&gt;
&lt;/tt&gt;        &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;


	&lt;p&gt;When you use stubbing for tests, its best practice to write the stubs and then write expectations for what you’ve stubbed.  We’re doing this in the above code by putting the stubs in the setup (3 lines of test code) and then using shoulda’s &lt;code&gt;before_should&lt;/code&gt; to declare the expectations (9 lines of test code).  That’s 12 lines of test code for what is ultimately 1 line of code.&lt;/p&gt;


	&lt;p&gt;Now, there isn’t anything necessarily wrong with this, again, we’re only investigating causes of the ratio here.  But its something to note and perhaps consider for either test refactoring or to somehow incorporate in your test framework.&lt;/p&gt;


	&lt;p&gt;Finally, I also noticed a lots of tests like this:&lt;/p&gt;


&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td title="click to toggle" class="line_numbers"&gt;&lt;pre&gt;1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;6&lt;tt&gt;
&lt;/tt&gt;7&lt;tt&gt;
&lt;/tt&gt;8&lt;tt&gt;
&lt;/tt&gt;9&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;11&lt;tt&gt;
&lt;/tt&gt;12&lt;tt&gt;
&lt;/tt&gt;13&lt;tt&gt;
&lt;/tt&gt;14&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;15&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;16&lt;tt&gt;
&lt;/tt&gt;17&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;should &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;crown the best store&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  assert_select &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="il"&gt;&lt;span class="dl"&gt;#{&lt;/span&gt;assigns(&lt;span class="sy"&gt;:stores&lt;/span&gt;)[&lt;span class="i"&gt;0&lt;/span&gt;].name&lt;span class="dl"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    assert_select &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;span[class=crown]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;should &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;rerender the purchase form&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  assert_select_rjs &lt;span class="sy"&gt;:replace&lt;/span&gt;, &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;new_purchase&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    assert_select &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;#purchase_store_id[value=?]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="iv"&gt;@store&lt;/span&gt;.id&lt;tt&gt;
&lt;/tt&gt;    assert_match &lt;span class="iv"&gt;@focus_quantity&lt;/span&gt;, &lt;span class="iv"&gt;@response&lt;/span&gt;.body&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;should &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;remove the purchase from the list&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  assert_match &lt;span class="rx"&gt;&lt;span class="dl"&gt;/&lt;/span&gt;&lt;span class="k"&gt;new Effect.Fade&lt;/span&gt;&lt;span class="ch"&gt;\(&lt;/span&gt;&lt;span class="k"&gt;&amp;quot;&lt;/span&gt;&lt;span class="il"&gt;&lt;span class="dl"&gt;#{&lt;/span&gt;dom_id(&lt;span class="iv"&gt;@purchase&lt;/span&gt;)&lt;span class="dl"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="k"&gt;&amp;quot;&lt;/span&gt;&lt;span class="dl"&gt;/&lt;/span&gt;&lt;/span&gt;, &lt;tt&gt;
&lt;/tt&gt;               &lt;span class="iv"&gt;@response&lt;/span&gt;.body&lt;tt&gt;
&lt;/tt&gt;&lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;


	&lt;p&gt;In short, we’re testing the views, markup, javascript (some of it), and &lt;span class="caps"&gt;RJS&lt;/span&gt; – as we should be.  And we’re doing it quite extensively, there are 45 calls to assert_select and assert_select_rjs in the functional tests.  However, rake stats &lt;em&gt;doesn’t count the lines in the views&lt;/em&gt;.  If you consider that most of the calls to assert_select and its ilk will be surrounded by a &lt;code&gt;should&lt;/code&gt; and an &lt;code&gt;end&lt;/code&gt;, that’s 3 lines of test code, that aren’t showing up at all as lines of code at all in our &lt;code&gt;rake stats&lt;/code&gt;.&lt;/p&gt;


	&lt;p&gt;If we modify the &lt;code&gt;rake stats&lt;/code&gt; task to include the views (which we can’t seriously do without taking other things into account, like javascript, but bare with me here), here is the new output of rake stats:&lt;/p&gt;


&lt;pre&gt;
+----------------------+-------+-------+---------+---------+-----+-------+
| Name                 | Lines |   LOC | Classes | Methods | M/C | LOC/M |
+----------------------+-------+-------+---------+---------+-----+-------+
| Controllers          |   176 |   149 |      10 |      18 |   1 |     6 |
| Helpers              |    38 |    35 |       0 |       4 |   0 |     6 |
| Models               |   183 |   147 |       5 |      20 |   4 |     5 |
| Views                |   605 |   545 |       0 |       0 |   0 |     0 |
| Libraries            |     0 |     0 |       0 |       0 |   0 |     0 |
| Integration tests    |     0 |     0 |       0 |       0 |   0 |     0 |
| Functional tests     |   852 |   683 |       9 |       3 |   0 |   225 |
| Unit tests           |   684 |   568 |       7 |       0 |   0 |     0 |
+----------------------+-------+-------+---------+---------+-----+-------+
| Total                |  2538 |  2127 |      31 |      45 |   1 |    45 |
+----------------------+-------+-------+---------+---------+-----+-------+
  Code LOC: 876     Test LOC: 1251     Code to Test Ratio: 1:1.4
&lt;/pre&gt;

	&lt;p&gt;I’ve spent a lot of time talking about &lt;code&gt;rake stats&lt;/code&gt;, but here’s the rub.  &lt;strong&gt;It’s worthless to tell you the real important metric, how &lt;em&gt;good&lt;/em&gt; your test code is&lt;/strong&gt;.  Or, said differently, how much coverage your tests provide for your actual code.  You &lt;em&gt;really&lt;/em&gt; only want to use &lt;code&gt;rake stats&lt;/code&gt; for a high level assessment of your code and as one tool in the arsenal you’ll use for investigation in how to improve your tests.&lt;/p&gt;


	&lt;p&gt;The guidelines I outlined above are basically the extent of how you should use rake stats for &lt;em&gt;judging&lt;/em&gt; your test code.  And as I’ve illustrated here, your assumptions about your test code, and even my guidelines may be wrong or flexible.&lt;/p&gt;


	&lt;p&gt;In fact, based on what I’ve uncovered about the view &lt;span class="caps"&gt;LOC&lt;/span&gt; and the stub/expectations, I may begin to reevaluate my 1:2 guideline.&lt;/p&gt;


	&lt;p&gt;The second tool you can get up and running with easily, and one that is even more valuable than &lt;code&gt;rake stats&lt;/code&gt; is &lt;code&gt;rcov&lt;/code&gt;&lt;/p&gt;


	&lt;h2&gt;rcov&lt;/h2&gt;


	&lt;p&gt;rcov executes your tests and does the best job it can telling which lines of code were executed by your tests.  The theory being, that if the line of code is executed, then there was a test for it.  Rcov provides C0 coverage, so it cannot tell if two parts of a conditional were both hit, the line being executed means that that line had coverage (&lt;a href="http://eigenclass.org/hiki.rb?rcov#l15"&gt;See a full definition of C0 and the other types of test coverage measures here&lt;/a&gt;).&lt;/p&gt;


	&lt;p&gt;You should get the &lt;a href="http://github.com/spicycode/rcov/tree/master"&gt;latest rcov from github&lt;/a&gt;, it crashes less.  In order to easily run rcov on your rails app, you can use &lt;a href="http://github.com/thoughtbot/limerick_rake/tree/master/tasks/coverage.rake"&gt;this rake task&lt;/a&gt;, which is included in our plugin that provides standard tasks, &lt;a href="http://github.com/thoughtbot/limerick_rake"&gt;limerick_rake&lt;/a&gt;, which is in turn included in our Rails application template, &lt;a href="http://github.com/thoughtbot/suspenders"&gt;Suspenders&lt;/a&gt;.&lt;/p&gt;


	&lt;p&gt;Running rcov on Where’s the Milk At? provides the following information:&lt;/p&gt;


&lt;pre&gt;
+----------------------------------------------------+-------+-------+--------+
|                  File                              | Lines |  LOC  |  COV   |
+----------------------------------------------------+-------+-------+--------+
|app/controllers/application.rb                      |    14 |    11 | 100.0% |
|app/controllers/confirmations_controller.rb         |     3 |     3 | 100.0% |
|app/controllers/items_controller.rb                 |    15 |    11 | 100.0% |
|app/controllers/openid_controller.rb                |    27 |    25 | 100.0% |
|app/controllers/passwords_controller.rb             |     3 |     3 | 100.0% |
|app/controllers/purchases_controller.rb             |    48 |    40 | 100.0% |
|app/controllers/sessions_controller.rb              |     7 |     6 | 100.0% |
|app/controllers/stores_controller.rb                |    21 |    18 | 100.0% |
|app/controllers/users_controller.rb                 |    28 |    23 | 100.0% |
|app/helpers/application_helper.rb                   |    38 |    35 | 100.0% |
|app/models/item.rb                                  |    22 |    17 | 100.0% |
|app/models/purchase.rb                              |    55 |    43 | 100.0% |
|app/models/quantity.rb                              |    28 |    27 | 100.0% |
|app/models/store.rb                                 |    10 |     7 | 100.0% |
|app/models/user.rb                                  |    63 |    49 | 100.0% |
|app/models/user_mailer.rb                           |     5 |     4 | 100.0% |
+----------------------------------------------------+-------+-------+--------+
|Total                                               |   387 |   322 | 100.0% |
+----------------------------------------------------+-------+-------+--------+
100.0%   16 file(s)   387 Lines   322 LOC
&lt;/pre&gt;

	&lt;p&gt;This shows us that, according to rcov, 100% of the lines of code in our application were executed when our tests were run.  This is great, but as with most things, isn’t the whole story and should be taken with a grain of salt.  Here are some guidelines/principals you should take into consideration for rcov.&lt;/p&gt;


	&lt;ul&gt;
	&lt;li&gt;Like we discovered with our &lt;code&gt;rake stats&lt;/code&gt;, rcov doesn’t check coverage on the views (this includes javascript!), so its very possible to have 100% coverage and still have functionality that is uncovered.&lt;/li&gt;
		&lt;li&gt;Since rcov only provides C0 coverage reports, 100% doesn’t mean that you don’t have bugs or that you’re even perfectly tested.&lt;/li&gt;
		&lt;li&gt;If you’re doing real, actual, &lt;a href="http://smartic.us/2008/8/15/tatft-i-feel-a-revolution-coming-on"&gt;&lt;span class="caps"&gt;TATFT&lt;/span&gt;&lt;/a&gt; TDD, then reaching 100% coverage (as reported by rcov) should be a reachable goal; in fact, if you have less than 80% and you think you’ve been doing &lt;span class="caps"&gt;TDD&lt;/span&gt;, something is not right and you should investigate.&lt;/li&gt;
	&lt;/ul&gt;


	&lt;p&gt;The most important lesson we can take away from rcov is that its not perfect, but it provides a good benchmark.  When its not reporting 100%, you can click through and see exactly which lines of code were not executed by your tests.  So, in short, its great at identifying deficiencies in your test suite, but &lt;em&gt;should not&lt;/em&gt; be taken as a false safety net, thinking that with 90-100% coverage you’re all good because there can be big holes in your coverage and you’d still be reporting 100%.&lt;/p&gt;


	&lt;h3&gt;What All This Means&lt;/h3&gt;


	&lt;p&gt;Hopefully you’ve gotten a good idea of what to look for and how to use these two simple tools to investigate the quality of your tests.  The benchmarks and guidelines I’ve presented here are based on my experience developing over 30 rails applications and reviewing the different stats and coverage reports I’ve seen from them, but that doesn’t mean they are inflexible or infallible.&lt;/p&gt;


	&lt;p&gt;Also, these metrics, the tools, and other ones that exist out there are meant to assist, but not replace your role as a developer.  To correctly understand the problem domain and have confidence in the code itself and the test suite, and to realize the obvious fact that these tools do not analyze the logical correctness of anything you’ve done.&lt;/p&gt;


	&lt;p&gt;Here are the guidelines again, in summary.&lt;/p&gt;


	&lt;ul&gt;
	&lt;li&gt;Anything less than 1:1 code to test ratio from &lt;code&gt;rake stats&lt;/code&gt; probably lacks sufficient tests&lt;/li&gt;
		&lt;li&gt;Anything more than 1:2 is suspect to questioning, &lt;em&gt;but upon investigation could be found to be perfectly reasonable&lt;/em&gt;.&lt;/li&gt;
		&lt;li&gt;Both rcov and rake stats don’t check the views (this includes javascript!) so its very possible to have 100% coverage and still have functionality that is uncovered or to have a a very high code to test ratio.&lt;/li&gt;
		&lt;li&gt;Since rcov only provides C0 coverage reports, 100% doesn’t mean that you don’t have bugs or that you’re even perfectly tested.&lt;/li&gt;
		&lt;li&gt;If you’re doing real, actual, &lt;a href="http://smartic.us/2008/8/15/tatft-i-feel-a-revolution-coming-on"&gt;&lt;span class="caps"&gt;TATFT&lt;/span&gt;&lt;/a&gt; TDD, then reaching 100% coverage (as reported by rcov) should be a reachable goal; in fact, if you have less than 80% and you think you’ve been doing &lt;span class="caps"&gt;TDD&lt;/span&gt;, something is not right and you should investigate.&lt;/li&gt;
	&lt;/ul&gt;
          </content>  <feedburner:origLink>http://giantrobots.thoughtbot.com/2008/10/22/test-metrics-in-your-rails-app-and-what-they-mean</feedburner:origLink></entry>
  <entry xml:base="http://giantrobots.thoughtbot.com/">
    <author>
      <name>Mike Burns</name>
    </author>
    <id>tag:giantrobots.thoughtbot.com,2008-10-21:7656</id>
    <published>2008-10-21T20:30:00Z</published>
    <updated>2008-10-21T20:47:11Z</updated>
    <category term="Development" />
    <category term="caching" />
    <category term="contribution" />
    <category term="format" />
    <category term="patch" />
    <category term="rails" />
    <category term="Rails" />
    <category term="respond_to" />
    <link href="http://feeds.feedburner.com/~r/GiantRobotsSmashingIntoOtherGiantRobots/~3/427862230/the-accept-header-vs-caches_page" rel="alternate" type="text/html" />
    <title>The Accept: header vs. #caches_page</title>
<content type="html">
            &lt;p&gt;In this example we're going to have an XML &lt;abbr title="Application Programming Interface"&gt;API&lt;abbr&gt; on &lt;code&gt;FontsController#index&lt;/code&gt;. A &lt;code&gt;GET&lt;/code&gt; to &lt;code&gt;/fonts.xml&lt;/code&gt; will produce a list of every &lt;code&gt;Font&lt;/code&gt; in the database, along with all its information (name, thumbnail, a list of ligatures, price, license, and so on).&lt;/p&gt;

&lt;p&gt;This is a long list. Luckily it's just for the API consumers. The normal HTML people just request &lt;code&gt;/fonts&lt;/code&gt; and this gives them a paginated view of the lovely fonts on our system.&lt;/p&gt;

&lt;p&gt;So to speed it up we do some simple caching. In &lt;code&gt;FontsController&lt;/code&gt;, at the top, we add this:&lt;/p&gt;

&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td title="click to toggle" class="line_numbers"&gt;&lt;pre&gt;1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;caches_page &lt;span class="sy"&gt;:index&lt;/span&gt;, &lt;span class="sy"&gt;:if&lt;/span&gt; =&amp;gt; &lt;span class="co"&gt;Proc&lt;/span&gt;.new {|c|&lt;tt&gt;
&lt;/tt&gt;  c.request.format.xml?&lt;tt&gt;
&lt;/tt&gt;}&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;


&lt;p&gt;And magically requests to &lt;code&gt;/fonts.xml&lt;/code&gt; are cached to &lt;code&gt;public/fonts.xml&lt;/code&gt;. Lovely! Thanks, Rails!&lt;/p&gt;

&lt;h2&gt;The Problem&lt;/h2&gt;

&lt;p&gt;So what happens when someone requests &lt;code&gt;/fonts&lt;/code&gt; with an &lt;code&gt;Accept: text/xml&lt;/code&gt; header? You can try it like this:&lt;/p&gt;

&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td title="click to toggle" class="line_numbers"&gt;&lt;pre&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;curl -H 'Accept: text/xml' http://ihearthelvetica.local/fonts&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;


&lt;p&gt;&lt;img src="http://giantrobots.thoughtbot.com/assets/2008/10/21/no-xml.jpg" height="240" alt="No XML" width="320" /&gt;&lt;code&gt;FontsController#index&lt;/code&gt; uses &lt;code&gt;#respond_to&lt;/code&gt;, so it sends back the XML as requested. However, &lt;code&gt;#caches_page&lt;/code&gt; saves the XML to &lt;code&gt;public/fonts.html&lt;/code&gt;! Now when a user requests &lt;code&gt;/fonts&lt;/code&gt; from their Web browser, they're getting back a mess of XML!&lt;/p&gt;

&lt;p&gt;No good.&lt;/p&gt;

&lt;h2&gt;The Workaround&lt;/h2&gt;

&lt;p&gt;This is a problem deep in the Rails caching code. As a workaround, try this on for size:&lt;/p&gt;

&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td title="click to toggle" class="line_numbers"&gt;&lt;pre&gt;1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;6&lt;tt&gt;
&lt;/tt&gt;7&lt;tt&gt;
&lt;/tt&gt;8&lt;tt&gt;
&lt;/tt&gt;9&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;11&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="r"&gt;class&lt;/span&gt; &lt;span class="cl"&gt;ApplicationController&lt;/span&gt; &amp;lt; &lt;span class="co"&gt;ActionController&lt;/span&gt;::&lt;span class="co"&gt;Base&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  before_filter &lt;span class="sy"&gt;:fix_caching_extension_for_xml&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;private&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="r"&gt;def&lt;/span&gt; &lt;span class="fu"&gt;fix_caching_extension_for_xml&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    &lt;span class="r"&gt;if&lt;/span&gt; request.format.xml?&lt;tt&gt;
&lt;/tt&gt;      &lt;span class="co"&gt;ActionController&lt;/span&gt;::&lt;span class="co"&gt;Base&lt;/span&gt;.page_cache_extension = &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;.xml&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;span class="r"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;


&lt;p&gt;This manually sets the extension for XML requests to &lt;code&gt;.xml&lt;/code&gt;, so that it saves it to the right place.&lt;/p&gt;

&lt;h2&gt;The Fix&lt;/h2&gt;

&lt;p&gt;The other option is to fix this in Ruby on Rails itself. Download &lt;a href="http://rails.lighthouseapp.com/projects/8994/tickets/1244"&gt;the patch&lt;/a&gt; attached to the ticket I've opened and apply it to an edge version of Rails. The patch has tests and is more generalized, so if the workaround fails to solve your problem the patch might.&lt;/p&gt;

&lt;p&gt;Leave a comment on &lt;a href="http://rails.lighthouseapp.com/projects/8994/tickets/1244"&gt;the Lighthouse ticket&lt;/a&gt; if the patch works for you, or if you've encountered this problem. Together, we can.
          </content>  <feedburner:origLink>http://giantrobots.thoughtbot.com/2008/10/21/the-accept-header-vs-caches_page</feedburner:origLink></entry>
  <entry xml:base="http://giantrobots.thoughtbot.com/">
    <author>
      <name>Dan Croak</name>
    </author>
    <id>tag:giantrobots.thoughtbot.com,2008-10-21:7625</id>
    <published>2008-10-21T18:58:00Z</published>
    <updated>2008-10-22T19:58:57Z</updated>
    <category term="Development" />
    <category term="Technology" />
    <category term="clearance" />
    <category term="factory_girl" />
    <category term="limerick_rake" />
    <category term="rails template" />
    <category term="shoulda" />
    <category term="suspenders" />
    <link href="http://feeds.feedburner.com/~r/GiantRobotsSmashingIntoOtherGiantRobots/~3/427786119/suspenders" rel="alternate" type="text/html" />
    <title>Suspenders</title>
<content type="html">
            &lt;p&gt;Introducing &lt;a href="http://github.com/thoughtbot/suspenders"&gt;Suspenders&lt;/a&gt;, the thoughtbot Rails template.&lt;/p&gt;


	&lt;h2&gt;Install&lt;/h2&gt;


	&lt;p&gt;To create a new project, checkout &lt;a href="http://github.com/thoughtbot/suspenders"&gt;the github repository&lt;/a&gt; and run:&lt;/p&gt;


&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td title="click to toggle" class="line_numbers"&gt;&lt;pre&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;./script/create_project projectname&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;


	&lt;p&gt;This will create a project in ../projectname.  You should then follow the instructions on Github to upload that project there.  &lt;strong&gt;This script creates an entirely new git repository, and is not meant to be used against an existing repo&lt;/strong&gt;.&lt;/p&gt;


	&lt;p&gt;Changes to the template can be easily pulled it into your project via:&lt;/p&gt;


&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td title="click to toggle" class="line_numbers"&gt;&lt;pre&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;rake git:pull:suspenders&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;


	&lt;p&gt;This is funny, because you’re pulling your suspenders.&lt;/p&gt;


	&lt;h2&gt;About&lt;/h2&gt;


	&lt;p&gt;Suspenders was created for use at &lt;a href="http://thoughtbot.com"&gt;thoughtbot&lt;/a&gt; as a baseline application setup, with reasonable default plugins that the majority (if not all) of our applications used, as well as best-practice configuration options.&lt;/p&gt;


	&lt;p&gt;Thanks to various Boston.rb people and rails rumble people for attempting to use suspenders this past weekend and giving it it’s first non-thoughtbot-internal usage.&lt;/p&gt;


	&lt;p&gt;Suspenders currently includes Rails 2.1.1&lt;/p&gt;


	&lt;h2&gt;vendor/gems&lt;/h2&gt;


	&lt;p&gt;&lt;img src="http://media.tumblr.com/1TEAMALpseh5xzf0Jt6bcwSMo1_400.png" /&gt;&lt;/p&gt;


	&lt;ul&gt;
	&lt;li&gt;mislav-will_paginate&lt;/li&gt;
		&lt;li&gt;RedCloth&lt;/li&gt;
		&lt;li&gt;mocha&lt;/li&gt;
		&lt;li&gt;thoughtbot-factory_girl&lt;/li&gt;
		&lt;li&gt;thoughtbot-shoulda&lt;/li&gt;
		&lt;li&gt;quietbacktrace&lt;/li&gt;
	&lt;/ul&gt;


	&lt;h2&gt;vendor/plugins&lt;/h2&gt;


	&lt;ul&gt;
	&lt;li&gt;hoptoad_notifier&lt;/li&gt;
		&lt;li&gt;limerick_rake&lt;/li&gt;
		&lt;li&gt;mile_marker&lt;/li&gt;
		&lt;li&gt;squirrel&lt;/li&gt;
		&lt;li&gt;helper_test&lt;/li&gt;
	&lt;/ul&gt;


	&lt;h2&gt;config/initializers&lt;/h2&gt;


	&lt;ul&gt;
	&lt;li&gt;time_formats.rb (Two time formats are available by default, :short_date and :long_date)&lt;/li&gt;
		&lt;li&gt;action_mailer_configs.rb (We use &lt;span class="caps"&gt;SMTP&lt;/span&gt; by default in all applications)&lt;/li&gt;
		&lt;li&gt;hoptoad.rb (Get your &lt;span class="caps"&gt;API&lt;/span&gt; key at &lt;a href="http://hoptoadapp.com"&gt;http://hoptoadapp.com&lt;/a&gt;)&lt;/li&gt;
		&lt;li&gt;requires.rb (automatically requires everything in:)
	&lt;ul&gt;
	&lt;li&gt;lib/&lt;/li&gt;
		&lt;li&gt;lib/extensions&lt;/li&gt;
		&lt;li&gt;test/mocks/RAILS_ENV (Removed in Rails 2, we decided to keep it)&lt;/li&gt;
	&lt;/ul&gt;&lt;/li&gt;
	&lt;/ul&gt;


	&lt;h2&gt;Rake Tasks&lt;/h2&gt;


	&lt;p&gt;Rake tasks are contained in the limerick_rake gem.&lt;/p&gt;


	&lt;ul&gt;
	&lt;li&gt;bootstrap (Provides rake tasks for loading data into the database. These are used for an initial application dataset needed for production.)&lt;/li&gt;
		&lt;li&gt;capistrano (Standard capistrano deployment tasks)&lt;/li&gt;
	&lt;/ul&gt;


	&lt;h2&gt;Testing&lt;/h2&gt;


	&lt;p&gt;The basic test setup uses Test::Unit, Shoulda, factory_girl, and mocha, and includes some standard “shoulda macros” that we’ve used on various projects.&lt;/p&gt;


	&lt;p&gt;&lt;a href="http://thoughtbot.com/projects/factory_girl"&gt;Factory Girl&lt;/a&gt; is a fixture replacement library, following the factory pattern.  Place your factories in test/factories.rb.  The fixture directory has been removed, as fixtures are not used.&lt;/p&gt;


	&lt;p&gt;&lt;a href="http://thoughtbot.com/projects/shoulda"&gt;Shoulda&lt;/a&gt; is a pragmatic testing framework for &lt;span class="caps"&gt;TDD&lt;/span&gt; and &lt;span class="caps"&gt;BDD&lt;/span&gt; built on top of Test::Unit.  A number of additional testing macros are provided in test/shoulda_macros:&lt;/p&gt;


	&lt;h2&gt;Deployment&lt;/h2&gt;


	&lt;p&gt;Deployment is done using capistrano, and deploys to a mongrel cluster, running under Apache.&lt;/p&gt;


	&lt;p&gt;Rake tasks are provided for managing git branches which the different environments pull from for deploy.&lt;/p&gt;


To push the git master to git staging branch run:
&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td title="click to toggle" class="line_numbers"&gt;&lt;pre&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;rake git:push:staging&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;


To push the git staging branch to production branch run:
&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td title="click to toggle" class="line_numbers"&gt;&lt;pre&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;rake git:push:production&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;


Setup your deployment environment by running:
&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td title="click to toggle" class="line_numbers"&gt;&lt;pre&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;cap ENVIRONMENT deploy:setup&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;


	&lt;p&gt;You’ll be prompted for the environment’s database password&lt;/p&gt;


Deploy to the desired environment by running:
&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td title="click to toggle" class="line_numbers"&gt;&lt;pre&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;cap ENVIRONMENT deploy&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;


The default environment for deploy is staging, to deploy to staging, just run:
&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td title="click to toggle" class="line_numbers"&gt;&lt;pre&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;cap deploy&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;


	&lt;h2&gt;Mascot&lt;/h2&gt;


	&lt;p&gt;The official Suspenders mascot is &lt;a href="http://tinyurl.com/5cvltb"&gt;Suspenders Boy&lt;/a&gt;&lt;/p&gt;
          </content>  <feedburner:origLink>http://giantrobots.thoughtbot.com/2008/10/21/suspenders</feedburner:origLink></entry>
  <entry xml:base="http://giantrobots.thoughtbot.com/">
    <author>
      <name>Mike Burns</name>
    </author>
    <id>tag:giantrobots.thoughtbot.com,2008-10-17:7541</id>
    <published>2008-10-17T18:30:00Z</published>
    <updated>2008-10-17T18:31:57Z</updated>
    <category term="Development" />
    <category term="testing" />
    <link href="http://feeds.feedburner.com/~r/GiantRobotsSmashingIntoOtherGiantRobots/~3/423958022/non-test-code-is-trivial" rel="alternate" type="text/html" />
    <title>Non-test code is trivial</title>
<content type="html">
            &lt;p&gt;&lt;img src="http://giantrobots.thoughtbot.com/assets/2008/10/17/testing.JPG" height="219" alt="Testing! Do not disturb!" width="320" /&gt;&lt;/p&gt;

&lt;p&gt;I have heard&amp;mdash;and been in the middle of&amp;mdash;arguments which make the claim that the tests is the stupid, simple part and the "real code" is the hard part. One such person made the claim that interns should write the test code and "real programmers" should write code to make the tests pass.&lt;/p&gt;

&lt;p&gt;This is backwards.&lt;/p&gt;

&lt;p&gt;The tests are the program. Without the tests, the program does not work. Tests are not something that should be left for the inexperienced; &lt;strong&gt;tests are the hard part&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;To quote &lt;a href="http://cc2e.com/"&gt;Code Complete&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;Test cases are often as likely or more likely to contain errors than the code being testing (&lt;a href="http://www.worldcat.org/oclc/9044831"&gt;Weiland 1983&lt;/a&gt;, &lt;a href="http://www.worldcat.org/oclc/11785604"&gt;Jones 1986a&lt;/a&gt;, Johnson 1994 [Johnson, Mark. 1994. "Dr. Boris Beizer on Software Testing: An Interview"]). The reasons are easy to find&amp;mdash;especially when the developer writes the test case. Test cases tend to be created on the fly rather than through a careful design and construction process. They are often viewed as one-time tests and are developed with the care commensurate with something to be thrown away.&lt;/blockquote&gt;

&lt;p&gt;For example, the following test does not have nearly enough setup to be useful (&lt;code&gt;assigns(:posts)&lt;/code&gt; could be empty, causing this test to be something of a no-op). This is a common problem; sometimes it happens because it relies on fixtures that get lost in a refactoring, and sometimes it happens out of just not thinking hard enough. The non-test code behind this, of course, is part of the Rails scaffold and dead simple.&lt;/p&gt;

&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td title="click to toggle" class="line_numbers"&gt;&lt;pre&gt;1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;6&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;context &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;a GET to index&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  setup { get &lt;span class="sy"&gt;:index&lt;/span&gt; }&lt;tt&gt;
&lt;/tt&gt;  should &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;have a link for each post&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    assigns(&lt;span class="sy"&gt;:posts&lt;/span&gt;).each { |post| assert_select &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;a[href=?]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;, post_path(post) }&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;span class="r"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;


&lt;p&gt;The next set of tests could use a loop over &lt;code&gt;%w(index show edit)&lt;/code&gt; and &lt;code&gt;should_redirect_to&lt;/code&gt; to shorten it without any loss of knowledge (and could even make it more clear). This is a case of an accurate series of tests (for a one-line piece of code) that has become difficult to maintain because the developer failed to notice the pattern.&lt;/p&gt;

&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td title="click to toggle" class="line_numbers"&gt;&lt;pre&gt;1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;6&lt;tt&gt;
&lt;/tt&gt;7&lt;tt&gt;
&lt;/tt&gt;8&lt;tt&gt;
&lt;/tt&gt;9&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;11&lt;tt&gt;
&lt;/tt&gt;12&lt;tt&gt;
&lt;/tt&gt;13&lt;tt&gt;
&lt;/tt&gt;14&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;15&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;16&lt;tt&gt;
&lt;/tt&gt;17&lt;tt&gt;
&lt;/tt&gt;18&lt;tt&gt;
&lt;/tt&gt;19&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;20&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;21&lt;tt&gt;
&lt;/tt&gt;22&lt;tt&gt;
&lt;/tt&gt;23&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;context &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;logged out&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  setup { session[&lt;span class="sy"&gt;:user_id&lt;/span&gt;] = &lt;span class="pc"&gt;nil&lt;/span&gt; }&lt;tt&gt;
&lt;/tt&gt;  context &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;GET to index&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    setup { get &lt;span class="sy"&gt;:index&lt;/span&gt; }&lt;tt&gt;
&lt;/tt&gt;    should &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;redirect to the root_url&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;      assert_redirected_to root_url&lt;tt&gt;
&lt;/tt&gt;    &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;  context &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;GET to show&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    setup { get &lt;span class="sy"&gt;:show&lt;/span&gt; }&lt;tt&gt;
&lt;/tt&gt;    should &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;redirect to the root_url&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;      assert_redirected_to root_url&lt;tt&gt;
&lt;/tt&gt;    &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;  context &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;GET to edit&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    setup { get &lt;span class="sy"&gt;:edit&lt;/span&gt; }&lt;tt&gt;
&lt;/tt&gt;    should &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;redirect to the root_url&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;      assert_redirected_to root_url&lt;tt&gt;
&lt;/tt&gt;    &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;span class="r"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;


&lt;p&gt;It's interesting to note that the problem in the first example could be caused by refactoring, and the problem in the second example is caused by not refactoring. This is a fair point, and another indication of the difficulty in writing tests: when refactoring non-test code, anything you break is pointed out quickly by the tests; when refactoring test code, you need to make sure that it will continue to fail when needed, and continue to pass when needed.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://giantrobots.thoughtbot.com/assets/2008/10/16/sapporo-snow-festival-14-500x375.jpg" height="187" width="250" /&gt;&lt;/p&gt;

&lt;p&gt;Some tests are just so arcane or trivial that they would normally be overlooked, but if it really needs to be a specific way then it needs to be tested.&lt;/p&gt;

&lt;p&gt;For example, &lt;code&gt;ActiveRecord::Base#to_xml&lt;/code&gt; is a lovely part of Rails that is often used for part of the application's public API. If &lt;code&gt;#to_xml&lt;/code&gt; changes, many customers will be upset. Recently we had to override &lt;code&gt;#to_xml&lt;/code&gt; with lots of special-casing; while the special-casing did get tested, some of the more subtle parts of &lt;code&gt;#to_xml&lt;/code&gt; were ignored. Thus, this test was recently added in response to a bug report:&lt;/p&gt;

&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td title="click to toggle" class="line_numbers"&gt;&lt;pre&gt;1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;should &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;dasherize any element with underscores when sent #to_xml&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  xml = Factory(&lt;span class="sy"&gt;:message&lt;/span&gt;).to_xml&lt;tt&gt;
&lt;/tt&gt;  assert_no_match &lt;span class="rx"&gt;&lt;span class="dl"&gt;/&lt;/span&gt;&lt;span class="k"&gt;&amp;lt;&lt;/span&gt;&lt;span class="ch"&gt;\w&lt;/span&gt;&lt;span class="k"&gt;*_&lt;/span&gt;&lt;span class="ch"&gt;\w&lt;/span&gt;&lt;span class="k"&gt;*&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;/&lt;/span&gt;&lt;/span&gt;, xml&lt;tt&gt;
&lt;/tt&gt;&lt;span class="r"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;


&lt;p&gt;Some code needs a complex maze of tests. Advanced search is a common feature that requires careful thought to test all the options. The &lt;code&gt;Album.advanced_search&lt;/code&gt; method may be large and complicated, but the tests for it must be necessarily more so. No time for laziness or ignorance here; this test suite requires the knowledge of an advanced search expert, and the patience of a person who has a lot of patience.&lt;/p&gt;

&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td title="click to toggle" class="line_numbers"&gt;&lt;pre&gt;1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;6&lt;tt&gt;
&lt;/tt&gt;7&lt;tt&gt;
&lt;/tt&gt;8&lt;tt&gt;
&lt;/tt&gt;9&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;11&lt;tt&gt;
&lt;/tt&gt;12&lt;tt&gt;
&lt;/tt&gt;13&lt;tt&gt;
&lt;/tt&gt;14&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;15&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;16&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;context &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;when sent #advanced_search&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  setup { create_all_sorts_of_data }&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="s"&gt;&lt;span class="dl"&gt;%w(&lt;/span&gt;&lt;span class="k"&gt;producer artist mixing_engineer&lt;/span&gt;&lt;span class="dl"&gt;)&lt;/span&gt;&lt;/span&gt;.each &lt;span class="r"&gt;do&lt;/span&gt; |str_opt|&lt;tt&gt;
&lt;/tt&gt;    context &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;with the &lt;/span&gt;&lt;span class="il"&gt;&lt;span class="dl"&gt;#{&lt;/span&gt;str_opt&lt;span class="dl"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="k"&gt; option&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;      &lt;span class="c"&gt;# ...&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;  [&lt;span class="pc"&gt;true&lt;/span&gt;,&lt;span class="pc"&gt;false&lt;/span&gt;].each &lt;span class="r"&gt;do&lt;/span&gt; |include_compilation|&lt;tt&gt;
&lt;/tt&gt;    context &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;with :include_compilations option set to &lt;/span&gt;&lt;span class="il"&gt;&lt;span class="dl"&gt;#{&lt;/span&gt;include_compilation&lt;span class="dl"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;      &lt;span class="c"&gt;# ...&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="c"&gt;# ... and then permutations of these, too&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;span class="r"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;


&lt;p&gt;(While researching this post I found these two interesting links: &lt;a href="http://www.c2.com/cgi/wiki?BugsInTheTests"&gt;a WardsWiki page about bugs in tests&lt;/a&gt;, in which people argue over buggy tests, refactoring tests, and how this affects non-test code; and a paper titled &lt;a href="http://www.cwi.nl/~leon/papers/xp2001/xp2001.pdf"&gt;Refactoring Test Code&lt;/a&gt; [PDF], which discusses "code smells" relevant to testing and how best to refactor these.)&lt;/p&gt;

&lt;p&gt;Known fact: chicks are totally into dudes who write awesome tests.&lt;/p&gt;
          </content>  <feedburner:origLink>http://giantrobots.thoughtbot.com/2008/10/17/non-test-code-is-trivial</feedburner:origLink></entry>
  <entry xml:base="http://giantrobots.thoughtbot.com/">
    <author>
      <name>Matt Jankowski</name>
    </author>
    <id>tag:giantrobots.thoughtbot.com,2008-10-14:7612</id>
    <published>2008-10-14T00:34:00Z</published>
    <updated>2008-10-17T00:21:08Z</updated>
    <category term="Development" />
    <link href="http://feeds.feedburner.com/~r/GiantRobotsSmashingIntoOtherGiantRobots/~3/419992881/life-in-the-fast-lane" rel="alternate" type="text/html" />
    <title>Life in the fast lane</title>
<content type="html">
            &lt;p&gt;You ever write a named_scope and think “hey framework, I already wrote a schema – why are you bothering me with all this work?!”&lt;/p&gt;


	&lt;p&gt;&lt;img src="http://giantrobots.thoughtbot.com/assets/2008/10/8/1955-chevrolet-pace-car-1.jpg" alt="" /&gt;&lt;/p&gt;


	&lt;p&gt;What about those times when you’re sitting behind the wheel of your ride and the warning flag is up because Johnny gave Jimmy a little too hard of a bump around turn number three and you are left wondering just how fast you should go?  I mean sure you’re worried about Jimmy being ok and all, that sure was quite the spinout back there, but geez, this is the Quest For The Cup and your points total is not going to grow itself!  Well the latter situation has had a pacecar for a while – and now the first one does too.&lt;/p&gt;


	&lt;p&gt;&lt;strong&gt;Pacecar&lt;/strong&gt;&lt;/p&gt;


	&lt;p&gt;&lt;a href="http://github.com/thoughtbot/pacecar"&gt;Pacecar&lt;/a&gt; is a plugin for rails application which gives your ActiveRecord models a bunch of class methods based (mostly) on database introspection.  It looks at column names and types to generate named_scope methods at load time which can be used in your app and combined with other named_scopes as well.&lt;/p&gt;


	&lt;table&gt;
		&lt;tr&gt;
			&lt;td&gt;&amp;nbsp;&lt;/td&gt;
			&lt;td&gt;Pacecar (Automobile Racing)&lt;/td&gt;
			&lt;td&gt;Pacecar (ActiveRecord models)&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td&gt;Communicates driving speed limit to automobile racers&lt;/td&gt;
			&lt;td&gt;Yes&lt;/td&gt;
			&lt;td&gt;No&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td&gt;Provides named_scopes to ActiveRecord classes&lt;/td&gt;
			&lt;td&gt;No&lt;/td&gt;
			&lt;td&gt;Yes&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td&gt;Does the boring work for you so you can have fun&lt;/td&gt;
			&lt;td&gt;Yes&lt;/td&gt;
			&lt;td&gt;Yes&lt;/td&gt;
		&lt;/tr&gt;
	&lt;/table&gt;




	&lt;p&gt;&lt;strong&gt;Scenario&lt;/strong&gt;&lt;/p&gt;


	&lt;p&gt;Assume we have the following schema in a rails application…&lt;/p&gt;


&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td title="click to toggle" class="line_numbers"&gt;&lt;pre&gt;1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;6&lt;tt&gt;
&lt;/tt&gt;7&lt;tt&gt;
&lt;/tt&gt;8&lt;tt&gt;
&lt;/tt&gt;9&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;11&lt;tt&gt;
&lt;/tt&gt;12&lt;tt&gt;
&lt;/tt&gt;13&lt;tt&gt;
&lt;/tt&gt;14&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;15&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;16&lt;tt&gt;
&lt;/tt&gt;17&lt;tt&gt;
&lt;/tt&gt;18&lt;tt&gt;
&lt;/tt&gt;19&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;20&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;21&lt;tt&gt;
&lt;/tt&gt;22&lt;tt&gt;
&lt;/tt&gt;23&lt;tt&gt;
&lt;/tt&gt;24&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;25&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="r"&gt;class&lt;/span&gt; &lt;span class="cl"&gt;CreateSchema&lt;/span&gt; &amp;lt; &lt;span class="co"&gt;ActiveRecord&lt;/span&gt;::&lt;span class="co"&gt;Migration&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    &lt;span class="r"&gt;def&lt;/span&gt; &lt;span class="pc"&gt;self&lt;/span&gt;.up&lt;tt&gt;
&lt;/tt&gt;      create_table &lt;span class="sy"&gt;:users&lt;/span&gt;, &lt;span class="sy"&gt;:force&lt;/span&gt; =&amp;gt; &lt;span class="pc"&gt;true&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt; |t|&lt;tt&gt;
&lt;/tt&gt;        t.boolean &lt;span class="sy"&gt;:admin&lt;/span&gt;, &lt;span class="sy"&gt;:default&lt;/span&gt; =&amp;gt; &lt;span class="pc"&gt;false&lt;/span&gt;, &lt;span class="sy"&gt;:null&lt;/span&gt; =&amp;gt; &lt;span class="pc"&gt;false&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;        t.datetime &lt;span class="sy"&gt;:approved_at&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;        t.datetime &lt;span class="sy"&gt;:rejected_at&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;        t.string &lt;span class="sy"&gt;:first_name&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;        t.string &lt;span class="sy"&gt;:last_name&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;        t.text &lt;span class="sy"&gt;:description&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;        t.timestamps&lt;tt&gt;
&lt;/tt&gt;      &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;      create_table &lt;span class="sy"&gt;:posts&lt;/span&gt;, &lt;span class="sy"&gt;:force&lt;/span&gt; =&amp;gt; &lt;span class="pc"&gt;true&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt; |t|&lt;tt&gt;
&lt;/tt&gt;        t.string &lt;span class="sy"&gt;:owner_type&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;        t.integer &lt;span class="sy"&gt;:owner_id&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;        t.string &lt;span class="sy"&gt;:publication_state&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;        t.string &lt;span class="sy"&gt;:post_type&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;        t.timestamps&lt;tt&gt;
&lt;/tt&gt;      &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;      create_table &lt;span class="sy"&gt;:comments&lt;/span&gt;, &lt;span class="sy"&gt;:force&lt;/span&gt; =&amp;gt; &lt;span class="pc"&gt;true&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt; |t|&lt;tt&gt;
&lt;/tt&gt;        t.integer &lt;span class="sy"&gt;:user_id&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;        t.text &lt;span class="sy"&gt;:description&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;        t.timestamps&lt;tt&gt;
&lt;/tt&gt;      &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;


	&lt;p&gt;This is a fairly basic scenario – most applications are not this simple.  But, this is enough to get the point across, and the benefits really only grow as you add more tables and more models.  Here’s how we might model this data (the unfamiliar methods are coming from pacecar and will be explained shortly).&lt;/p&gt;


&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td title="click to toggle" class="line_numbers"&gt;&lt;pre&gt;1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;6&lt;tt&gt;
&lt;/tt&gt;7&lt;tt&gt;
&lt;/tt&gt;8&lt;tt&gt;
&lt;/tt&gt;9&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;11&lt;tt&gt;
&lt;/tt&gt;12&lt;tt&gt;
&lt;/tt&gt;13&lt;tt&gt;
&lt;/tt&gt;14&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;15&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;16&lt;tt&gt;
&lt;/tt&gt;17&lt;tt&gt;
&lt;/tt&gt;18&lt;tt&gt;
&lt;/tt&gt;19&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="r"&gt;class&lt;/span&gt; &lt;span class="cl"&gt;User&lt;/span&gt; &amp;lt; &lt;span class="co"&gt;ActiveRecord&lt;/span&gt;::&lt;span class="co"&gt;Base&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    has_many &lt;span class="sy"&gt;:posts&lt;/span&gt;, &lt;span class="sy"&gt;:as&lt;/span&gt; =&amp;gt; &lt;span class="sy"&gt;:owner&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    has_many &lt;span class="sy"&gt;:comments&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    scopes_ranking &lt;span class="sy"&gt;:comments&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="r"&gt;class&lt;/span&gt; &lt;span class="cl"&gt;Post&lt;/span&gt; &amp;lt; &lt;span class="co"&gt;ActiveRecord&lt;/span&gt;::&lt;span class="co"&gt;Base&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    &lt;span class="co"&gt;PUBLICATION_STATES&lt;/span&gt; = &lt;span class="s"&gt;&lt;span class="dl"&gt;%w(&lt;/span&gt;&lt;span class="k"&gt;Draft Submitted Rejected Accepted&lt;/span&gt;&lt;span class="dl"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    &lt;span class="co"&gt;TYPES&lt;/span&gt; = &lt;span class="s"&gt;&lt;span class="dl"&gt;%w(&lt;/span&gt;&lt;span class="k"&gt;Free Open Private Anonymous PostModern&lt;/span&gt;&lt;span class="dl"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    belongs_to &lt;span class="sy"&gt;:owner&lt;/span&gt;, &lt;span class="sy"&gt;:polymorphic&lt;/span&gt; =&amp;gt; &lt;span class="pc"&gt;true&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    scopes_state &lt;span class="sy"&gt;:publication_state&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    scopes_state &lt;span class="sy"&gt;:post_type&lt;/span&gt;, &lt;span class="sy"&gt;:with&lt;/span&gt; =&amp;gt; &lt;span class="co"&gt;TYPES&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    scopes_polymorph &lt;span class="sy"&gt;:owner&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="r"&gt;class&lt;/span&gt; &lt;span class="cl"&gt;Comment&lt;/span&gt; &amp;lt; &lt;span class="co"&gt;ActiveRecord&lt;/span&gt;::&lt;span class="co"&gt;Base&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    belongs_to &lt;span class="sy"&gt;:user&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;


	&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;&lt;/p&gt;


	&lt;p&gt;Ok, so you have a schema and you have some models.  Now, what named_scope do you need?  Here’s what you get “for free”, when the pacecar plugin is installed…&lt;/p&gt;


&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td title="click to toggle" class="line_numbers"&gt;&lt;pre&gt;1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;6&lt;tt&gt;
&lt;/tt&gt;7&lt;tt&gt;
&lt;/tt&gt;8&lt;tt&gt;
&lt;/tt&gt;9&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;11&lt;tt&gt;
&lt;/tt&gt;12&lt;tt&gt;
&lt;/tt&gt;13&lt;tt&gt;
&lt;/tt&gt;14&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;15&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;16&lt;tt&gt;
&lt;/tt&gt;17&lt;tt&gt;
&lt;/tt&gt;18&lt;tt&gt;
&lt;/tt&gt;19&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;20&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;21&lt;tt&gt;
&lt;/tt&gt;22&lt;tt&gt;
&lt;/tt&gt;23&lt;tt&gt;
&lt;/tt&gt;24&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;25&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;26&lt;tt&gt;
&lt;/tt&gt;27&lt;tt&gt;
&lt;/tt&gt;28&lt;tt&gt;
&lt;/tt&gt;29&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;30&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;31&lt;tt&gt;
&lt;/tt&gt;32&lt;tt&gt;
&lt;/tt&gt;33&lt;tt&gt;
&lt;/tt&gt;34&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;35&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;36&lt;tt&gt;
&lt;/tt&gt;37&lt;tt&gt;
&lt;/tt&gt;38&lt;tt&gt;
&lt;/tt&gt;39&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;40&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;41&lt;tt&gt;
&lt;/tt&gt;42&lt;tt&gt;
&lt;/tt&gt;43&lt;tt&gt;
&lt;/tt&gt;44&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;45&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;46&lt;tt&gt;
&lt;/tt&gt;47&lt;tt&gt;
&lt;/tt&gt;48&lt;tt&gt;
&lt;/tt&gt;49&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;50&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;51&lt;tt&gt;
&lt;/tt&gt;52&lt;tt&gt;
&lt;/tt&gt;53&lt;tt&gt;
&lt;/tt&gt;54&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;55&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;56&lt;tt&gt;
&lt;/tt&gt;57&lt;tt&gt;
&lt;/tt&gt;58&lt;tt&gt;
&lt;/tt&gt;59&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;60&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;61&lt;tt&gt;
&lt;/tt&gt;62&lt;tt&gt;
&lt;/tt&gt;63&lt;tt&gt;
&lt;/tt&gt;64&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;65&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;66&lt;tt&gt;
&lt;/tt&gt;67&lt;tt&gt;
&lt;/tt&gt;68&lt;tt&gt;
&lt;/tt&gt;69&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;70&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;71&lt;tt&gt;
&lt;/tt&gt;72&lt;tt&gt;
&lt;/tt&gt;73&lt;tt&gt;
&lt;/tt&gt;74&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;span class="c"&gt;#Records where approved_at is not null, or where it is null…&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="co"&gt;User&lt;/span&gt;.approved_at_present&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="co"&gt;User&lt;/span&gt;.approved_at_missing&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;span class="c"&gt;#Records where first_name is not null, or where it is null…&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="co"&gt;User&lt;/span&gt;.first_name_present&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="co"&gt;User&lt;/span&gt;.first_name_missing&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;span class="c"&gt;#Records ordered by first_name (default to ‘asc’, can specify to override)…&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="co"&gt;User&lt;/span&gt;.by_first_name&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="co"&gt;User&lt;/span&gt;.by_first_name(&lt;span class="sy"&gt;:asc&lt;/span&gt;)&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="co"&gt;User&lt;/span&gt;.by_first_name(&lt;span class="sy"&gt;:desc&lt;/span&gt;)&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;span class="c"&gt;#Records where an attribute matches a search term (column LIKE &amp;quot;%term%&amp;quot;)…&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="co"&gt;User&lt;/span&gt;.first_name_matches(&lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;)&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;span class="c"&gt;#Records where an attribute starts or ends with a search term…&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="co"&gt;User&lt;/span&gt;.first_name_starts_with(&lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;A&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;)&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="co"&gt;User&lt;/span&gt;.first_name_ends_with(&lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;)&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;span class="c"&gt;#Records where any non-state text or string column matches term…&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="co"&gt;User&lt;/span&gt;.search_for(&lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;)&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;span class="c"&gt;#Records where any of a list of columns match the term…&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="co"&gt;User&lt;/span&gt;.search_for &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="sy"&gt;:on&lt;/span&gt; =&amp;gt; [&lt;span class="sy"&gt;:first_name&lt;/span&gt;, &lt;span class="sy"&gt;:last_name&lt;/span&gt;]&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;span class="c"&gt;#Records where all of a list of columns match the term…&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="co"&gt;User&lt;/span&gt;.search_for &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="sy"&gt;:on&lt;/span&gt; =&amp;gt; [&lt;span class="sy"&gt;:first_name&lt;/span&gt;, &lt;span class="sy"&gt;:last_name&lt;/span&gt;], &lt;span class="sy"&gt;:require&lt;/span&gt; =&amp;gt; &lt;span class="sy"&gt;:all&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;span class="c"&gt;#Records that are all admins or non-admins…&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="co"&gt;User&lt;/span&gt;.admin&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="co"&gt;User&lt;/span&gt;.not_admin&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;span class="c"&gt;#Records approved before or after certain times…&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="co"&gt;User&lt;/span&gt;.approved_at_before(&lt;span class="i"&gt;5&lt;/span&gt;.days.ago)&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="co"&gt;User&lt;/span&gt;.approved_at_after(&lt;span class="i"&gt;4&lt;/span&gt;.weeks.ago)&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;span class="c"&gt;#Records with approved_at in the past or future…&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="co"&gt;User&lt;/span&gt;.approved_at_in_past&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="co"&gt;User&lt;/span&gt;.approved_at_in_future&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;span class="c"&gt;#Records with approved_at inside or outside of two times…&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="co"&gt;User&lt;/span&gt;.approved_at_inside(&lt;span class="i"&gt;10&lt;/span&gt;.days.ago, &lt;span class="i"&gt;1&lt;/span&gt;.day.ago)&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="co"&gt;User&lt;/span&gt;.approved_at_outside(&lt;span class="i"&gt;2&lt;/span&gt;.days.ago, &lt;span class="i"&gt;1&lt;/span&gt;.day.ago)&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;span class="c"&gt;#Records with certain year, month or day…&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="co"&gt;User&lt;/span&gt;.approved_at_in_year(&lt;span class="i"&gt;2000&lt;/span&gt;)&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="co"&gt;User&lt;/span&gt;.approved_at_in_month(&lt;span class="i"&gt;01&lt;/span&gt;)&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="co"&gt;User&lt;/span&gt;.approved_at_in_day(&lt;span class="i"&gt;01&lt;/span&gt;)&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;span class="c"&gt;#Records with a duration (time delta between two columns) of, &lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;span class="c"&gt;#over or under a certain number of days…&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="co"&gt;User&lt;/span&gt;.with_duration_of(&lt;span class="i"&gt;14&lt;/span&gt;, &lt;span class="sy"&gt;:approved_at&lt;/span&gt;, &lt;span class="sy"&gt;:rejected_at&lt;/span&gt;)&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="co"&gt;User&lt;/span&gt;.with_duration_over(&lt;span class="i"&gt;14&lt;/span&gt;, &lt;span class="sy"&gt;:approved_at&lt;/span&gt;, &lt;span class="sy"&gt;:rejected_at&lt;/span&gt;)&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="co"&gt;User&lt;/span&gt;.with_duration_under(&lt;span class="i"&gt;14&lt;/span&gt;, &lt;span class="sy"&gt;:approved_at&lt;/span&gt;, &lt;span class="sy"&gt;:rejected_at&lt;/span&gt;)&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;span class="c"&gt;#First x records…&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="co"&gt;User&lt;/span&gt;.limited(&lt;span class="i"&gt;10&lt;/span&gt;)&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;


	&lt;p&gt;And by using those #scopes_* class methods in the models, we also get…&lt;/p&gt;


&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td title="click to toggle" class="line_numbers"&gt;&lt;pre&gt;1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;6&lt;tt&gt;
&lt;/tt&gt;7&lt;tt&gt;
&lt;/tt&gt;8&lt;tt&gt;
&lt;/tt&gt;9&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;11&lt;tt&gt;
&lt;/tt&gt;12&lt;tt&gt;
&lt;/tt&gt;13&lt;tt&gt;
&lt;/tt&gt;14&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;span class="c"&gt;#Records which have an owner_type of User…&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="co"&gt;Post&lt;/span&gt;.for_owner_type(&lt;span class="co"&gt;User&lt;/span&gt;)&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;span class="c"&gt;#Records with the most and least associated records…&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="co"&gt;User&lt;/span&gt;.maximum_comments&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="co"&gt;User&lt;/span&gt;.minimum_comments&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;span class="c"&gt;#Records which are in a particular state, or not in a state…&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="co"&gt;Post&lt;/span&gt;.publication_state_draft&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="co"&gt;Post&lt;/span&gt;.post_type_not_open&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;


	&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt;


	&lt;p&gt;To get the latest pacecar straight from git as a rails plugin, you can do..&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;    ruby script/plugin install git://github.com/thoughtbot/pacecar.git&lt;/code&gt;&lt;/pre&gt;

	&lt;p&gt;Alternately you can use the gem version from github…&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;    gem sources -a http://gems.github.com
    sudo gem install thoughtbot-pacecar&lt;/code&gt;&lt;/pre&gt;

	&lt;p&gt;..and then add a line like this to your config/environment.rb…&lt;/p&gt;


&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td title="click to toggle" class="line_numbers"&gt;&lt;pre&gt;1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;config.gem &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;thoughtbot-pacecar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;tt&gt;
&lt;/tt&gt;  &lt;span class="sy"&gt;:lib&lt;/span&gt; =&amp;gt; &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;pacecar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;,&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="sy"&gt;:version&lt;/span&gt; =&amp;gt; &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;&amp;gt;= 1.0.0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;,&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="sy"&gt;:source&lt;/span&gt; =&amp;gt; &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;http://gems.github.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;


	&lt;p&gt;After installing pacecar with either of these methods you will be up and running with all the “for free” methods, and you’ll then be able to add in the class method calls for enabling the Polymorph, State and Ranking use cases.&lt;/p&gt;


	&lt;p&gt;&lt;strong&gt;Sample usage&lt;/strong&gt;&lt;/p&gt;


	&lt;p&gt;“Hey dev team, can you tell us how many users are active but dont have bios?”&lt;/p&gt;


&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td title="click to toggle" class="line_numbers"&gt;&lt;pre&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="co"&gt;User&lt;/span&gt;.bio_missing.active.count&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;


	&lt;p&gt;“How many events have we had that last longer than a week?”&lt;/p&gt;


&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td title="click to toggle" class="line_numbers"&gt;&lt;pre&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="co"&gt;Event&lt;/span&gt;.with_duration_over(&lt;span class="i"&gt;7&lt;/span&gt;, &lt;span class="sy"&gt;:starts_at&lt;/span&gt;, &lt;span class="sy"&gt;:ends_at&lt;/span&gt;).count&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;


	&lt;p&gt;“Can I see the titles and authors of all the blog posts that we are scheduled to post in the future?”&lt;/p&gt;


&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td title="click to toggle" class="line_numbers"&gt;&lt;pre&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="co"&gt;Post&lt;/span&gt;.published_at_in_future.collect { |p| &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="il"&gt;&lt;span class="dl"&gt;#{&lt;/span&gt;p.title&lt;span class="dl"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="k"&gt; &lt;/span&gt;&lt;span class="il"&gt;&lt;span class="dl"&gt;#{&lt;/span&gt;p.user.name&lt;span class="dl"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; }&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;


	&lt;p&gt;&lt;strong&gt;Word of caution&lt;/strong&gt;&lt;/p&gt;


	&lt;p&gt;Pacecar does a decent amount of method generation at load time – so if you’re opposed to “having lots of methods” you should be aware of that.  You should also do an audit of the class methods you already have in place &lt;strong&gt;before&lt;/strong&gt; installing pacecar, and make sure you’re not overwriting any of your own methods (named scopes or otherwise).  Also, if you’re philosophically opposed to method generation … this does that.&lt;/p&gt;
          </content>  <feedburner:origLink>http://giantrobots.thoughtbot.com/2008/10/14/life-in-the-fast-lane</feedburner:origLink></entry>
</feed>
