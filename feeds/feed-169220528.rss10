<?xml version="1.0" encoding="ISO-8859-1"?>

<rdf:RDF
 xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
 xmlns="http://purl.org/rss/1.0/"
 xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
 xmlns:taxo="http://purl.org/rss/1.0/modules/taxonomy/"
 xmlns:dc="http://purl.org/dc/elements/1.1/"
 xmlns:syn="http://purl.org/rss/1.0/modules/syndication/"
 xmlns:admin="http://webns.net/mvcb/"
>

<channel rdf:about="http://use.perl.org/~Ovid/journal/">
<title>Ovid's Journal</title>
<link>http://use.perl.org/~Ovid/journal/</link>
<description>Ovid's use Perl Journal</description>
<dc:language>en-us</dc:language>
<dc:rights>use Perl; is Copyright 1998-2006, Chris Nandor. Stories, comments, journals, and other submissions posted on use Perl; are Copyright their respective owners.</dc:rights>
<dc:date>2008-12-12T18:02:27+00:00</dc:date>
<dc:publisher>pudge</dc:publisher>
<dc:creator>pudge@perl.org</dc:creator>
<dc:subject>Technology</dc:subject>
<syn:updatePeriod>hourly</syn:updatePeriod>
<syn:updateFrequency>1</syn:updateFrequency>
<syn:updateBase>1970-01-01T00:00+00:00</syn:updateBase>
<items>
 <rdf:Seq>
  <rdf:li rdf:resource="http://use.perl.org/~Ovid/journal/38079?from=rss" />
  <rdf:li rdf:resource="http://use.perl.org/~Ovid/journal/38069?from=rss" />
  <rdf:li rdf:resource="http://use.perl.org/~Ovid/journal/38061?from=rss" />
  <rdf:li rdf:resource="http://use.perl.org/~Ovid/journal/38051?from=rss" />
  <rdf:li rdf:resource="http://use.perl.org/~Ovid/journal/38048?from=rss" />
  <rdf:li rdf:resource="http://use.perl.org/~Ovid/journal/38032?from=rss" />
  <rdf:li rdf:resource="http://use.perl.org/~Ovid/journal/38018?from=rss" />
  <rdf:li rdf:resource="http://use.perl.org/~Ovid/journal/38010?from=rss" />
  <rdf:li rdf:resource="http://use.perl.org/~Ovid/journal/38009?from=rss" />
  <rdf:li rdf:resource="http://use.perl.org/~Ovid/journal/37992?from=rss" />
  <rdf:li rdf:resource="http://use.perl.org/~Ovid/journal/37975?from=rss" />
  <rdf:li rdf:resource="http://use.perl.org/~Ovid/journal/37966?from=rss" />
  <rdf:li rdf:resource="http://use.perl.org/~Ovid/journal/37965?from=rss" />
  <rdf:li rdf:resource="http://use.perl.org/~Ovid/journal/37960?from=rss" />
  <rdf:li rdf:resource="http://use.perl.org/~Ovid/journal/37957?from=rss" />
  <rdf:li rdf:resource="http://use.perl.org/~Ovid/journal/37949?from=rss" />
  <rdf:li rdf:resource="http://use.perl.org/~Ovid/journal/37930?from=rss" />
  <rdf:li rdf:resource="http://use.perl.org/~Ovid/journal/37929?from=rss" />
  <rdf:li rdf:resource="http://use.perl.org/~Ovid/journal/37920?from=rss" />
  <rdf:li rdf:resource="http://use.perl.org/~Ovid/journal/37912?from=rss" />
  <rdf:li rdf:resource="http://use.perl.org/~Ovid/journal/37911?from=rss" />
  <rdf:li rdf:resource="http://use.perl.org/~Ovid/journal/37896?from=rss" />
  <rdf:li rdf:resource="http://use.perl.org/~Ovid/journal/37863?from=rss" />
  <rdf:li rdf:resource="http://use.perl.org/~Ovid/journal/37844?from=rss" />
  <rdf:li rdf:resource="http://use.perl.org/~Ovid/journal/37823?from=rss" />
  <rdf:li rdf:resource="http://use.perl.org/~Ovid/journal/37822?from=rss" />
  <rdf:li rdf:resource="http://use.perl.org/~Ovid/journal/37817?from=rss" />
  <rdf:li rdf:resource="http://use.perl.org/~Ovid/journal/37809?from=rss" />
  <rdf:li rdf:resource="http://use.perl.org/~Ovid/journal/37808?from=rss" />
  <rdf:li rdf:resource="http://use.perl.org/~Ovid/journal/37797?from=rss" />
 </rdf:Seq>
</items>
<image rdf:resource="http://use.perl.org/images/topics/useperl.gif" />
</channel>

<image rdf:about="http://use.perl.org/images/topics/useperl.gif">
<title>Ovid's Journal</title>
<url>http://use.perl.org/images/topics/useperl.gif</url>
<link>http://use.perl.org/~Ovid/journal/</link>
</image>

<item rdf:about="http://use.perl.org/~Ovid/journal/38079?from=rss">
<title>for file in @frack!</title>
<link>http://use.perl.org/~Ovid/journal/38079?from=rss</link>
<description>&lt;p&gt;If I write &lt;tt&gt;for my $file in (@files) {&lt;nobr&gt; &lt;wbr&gt;&lt;/nobr&gt;... }&lt;/tt&gt; one more time, I'm gonna scream.  That's all.&lt;/p&gt;&lt;p&gt;IT'S STUCK IN MY FINGERS. MY FINGERS ARE SCREAMING!&lt;/p&gt;&lt;p&gt;Do you have any "non-perlisms" that you can't help but type?&lt;/p&gt;</description>
<dc:creator>Ovid</dc:creator>
<dc:date>2008-12-12T10:17:53+00:00</dc:date>
<dc:subject>journal</dc:subject>
</item>

<item rdf:about="http://use.perl.org/~Ovid/journal/38069?from=rss">
<title>Overhead of Saving Tests</title>
<link>http://use.perl.org/~Ovid/journal/38069?from=rss</link>
<description>&lt;p&gt;My first pass results on a running &lt;a href="http://github.com/Ovid/app--prove--history/tree/master"&gt;App::Prove::History&lt;/a&gt; on a moderate sized test suite (with deliberate failures) are pleasantly surprising.&lt;/p&gt;&lt;p&gt;Without saving state via &lt;tt&gt;App::Prove::History&lt;/tt&gt;:&lt;/p&gt;&lt;blockquote&gt;&lt;div&gt;&lt;p&gt; &lt;tt&gt;Test Summary Report&lt;br&gt;-------------------&lt;br&gt;t/aggregate.t&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(Wstat: 2304 Tests: 7781 Failed: 9)&lt;br&gt;&amp;nbsp; Failed tests:&amp;nbsp; 2967, 2973, 2979, 2990, 5610, 5623, 5625&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 5793-5794&lt;br&gt;&amp;nbsp; TODO passed:&amp;nbsp; &amp;nbsp;5553, 5681, 5736, 5749&lt;br&gt;&amp;nbsp; Non-zero exit status: 9&lt;br&gt;t/xml_fixtures_validate.t&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(Wstat: 17664 Tests: 342 Failed: 69)&lt;br&gt;&amp;nbsp; Failed tests:&amp;nbsp; 7-8, 10-13, 16-19, 27-35, 38, 40-49, 56-59&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 63, 65, 70, 72, 74, 77, 90, 92, 94, 97-109&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 173, 191, 226, 254, 280-287, 341&lt;br&gt;&amp;nbsp; Non-zero exit status: 69&lt;br&gt;Files=28, Tests=9201, 496 wallclock secs ( 1.97 usr&amp;nbsp; 0.23 sys + 386.81 cusr 16.08 csys = 405.09 CPU)&lt;br&gt;Result: FAIL&lt;/tt&gt;&lt;/p&gt;&lt;/div&gt; &lt;/blockquote&gt;&lt;p&gt;With saving state:&lt;/p&gt;&lt;blockquote&gt;&lt;div&gt;&lt;p&gt; &lt;tt&gt;Test Summary Report&lt;br&gt;-------------------&lt;br&gt;t/xml_fixtures_validate.t&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(Wstat: 17664 Tests: 342 Failed: 69)&lt;br&gt;&amp;nbsp; Failed tests:&amp;nbsp; 7-8, 10-13, 16-19, 27-35, 38, 40-49, 56-59&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 63, 65, 70, 72, 74, 77, 90, 92, 94, 97-109&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 173, 191, 226, 254, 280-287, 341&lt;br&gt;&amp;nbsp; Non-zero exit status: 69&lt;br&gt;t/aggregate.t&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(Wstat: 2304 Tests: 7781 Failed: 9)&lt;br&gt;&amp;nbsp; Failed tests:&amp;nbsp; 2967, 2973, 2979, 2990, 5610, 5623, 5625&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 5793-5794&lt;br&gt;&amp;nbsp; TODO passed:&amp;nbsp; &amp;nbsp;5553, 5681, 5736, 5749&lt;br&gt;&amp;nbsp; Non-zero exit status: 9&lt;br&gt;Files=28, Tests=9201, 506 wallclock secs ( 2.03 usr&amp;nbsp; 0.27 sys + 390.21 cusr 16.26 csys = 408.77 CPU)&lt;br&gt;Result: FAIL&lt;/tt&gt;&lt;/p&gt;&lt;/div&gt; &lt;/blockquote&gt;&lt;p&gt;496 wallclock seconds versus 506 wallclock seconds.  I expect that my decision to keep everything lightweight and simple probably helped here, but I'm surprised that there's not more of a performance hit.  In fact, without a few more test runs, a 2% slowdown might just be a fluke (even though there has to be &lt;em&gt;some&lt;/em&gt; performance hit).&lt;/p&gt;</description>
<dc:creator>Ovid</dc:creator>
<dc:date>2008-12-11T10:26:17+00:00</dc:date>
<dc:subject>journal</dc:subject>
</item>

<item rdf:about="http://use.perl.org/~Ovid/journal/38061?from=rss">
<title>The Big Bucket of FAIL (or is it?)</title>
<link>http://use.perl.org/~Ovid/journal/38061?from=rss</link>
<description>&lt;p&gt;I lied to chromatic, I think.  A long time ago, when we were talking about the new version of TAP, he was concerned that many of the new features we were adding on would be not needed and therefore should not be added.  I assured him that the new features would be optional and not change the meaning of core TAP.&lt;/p&gt;&lt;p&gt;I find myself sitting here, staring at my feet, wondering if I'm a bald-faced liar ("bald-faced"?).&lt;/p&gt;&lt;p&gt;So what, precisely, is a test failure?  Is the following a failure?&lt;/p&gt;&lt;blockquote&gt;&lt;div&gt;&lt;p&gt; &lt;tt&gt;1..1&lt;br&gt;ok 1 - Whee!&amp;nbsp; We pass!&lt;/tt&gt;&lt;/p&gt;&lt;/div&gt; &lt;/blockquote&gt;&lt;p&gt;Of course not.  You have one test.  It passes.&lt;/p&gt;&lt;p&gt;Um, not so fast there, cowboy.  Now look at the following snippet of code.&lt;/p&gt;&lt;blockquote&gt;&lt;div&gt;&lt;p&gt; &lt;tt&gt;END {&lt;br&gt;&amp;nbsp; &amp;nbsp; unlink $highly_sensitive_data&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; or die "You are soooooo fired, dude.";&lt;br&gt;}&lt;/tt&gt;&lt;/p&gt;&lt;/div&gt; &lt;/blockquote&gt;&lt;p&gt;Yes, you can test that, but you probably didn't.  If the code dies (from the &lt;tt&gt;TAP::Parser&lt;/tt&gt; perspective, if it exits with a non-zero exit status), then we consider that the test failed.&lt;/p&gt;&lt;p&gt;Um, not so fast there, cowboy.&lt;/p&gt;&lt;p&gt;Apparently, some languages don't give us control over the exit status (I don't know which ones, but it's a bug report we received), so we've been forced to implement a &lt;tt&gt;$parser-&amp;gt;ignore_exit&lt;/tt&gt; method.&lt;/p&gt;&lt;p&gt;But there's also the wait status of the process.  That can be non-zero, indicating a failure.  We recently fixed a bug with that.  I found it while testing Rakudo and Alex Vandiver fixed it (it's in the upcoming 3.15 release.  No PI for you!).  Failure is tricky.&lt;/p&gt;&lt;p&gt;So pure TAP doesn't quite indicate if tests failed or not.  Or they do, but they don't indicate if the whole test program is considered a pass.&lt;/p&gt;&lt;p&gt;And just to make it more difficult, consider this:&lt;/p&gt;&lt;blockquote&gt;&lt;div&gt;&lt;p&gt; &lt;tt&gt;1..4&lt;br&gt;ok 1&lt;br&gt;ok&lt;br&gt;ok 2&lt;br&gt;ok 3&lt;/tt&gt;&lt;/p&gt;&lt;/div&gt; &lt;/blockquote&gt;&lt;p&gt;It's perfectly legal to omit the test number, but it's not legal to have gaps.  That's a parse error and is considered to be a failure, even if all tests have passed.  This is because we can't trust that output (what does it mean?).  Same thing happens if you omit the plan.&lt;/p&gt;&lt;p&gt;As a result, a proper "test program failed" method should look something like this:&lt;/p&gt;&lt;blockquote&gt;&lt;div&gt;&lt;p&gt; &lt;tt&gt;sub failed {&lt;br&gt;&amp;nbsp; &amp;nbsp; my $self = shift;&lt;br&gt;&amp;nbsp; &amp;nbsp; return&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;$self-&amp;gt;failed&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; || $self-&amp;gt;parse_errors&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; || ( !$self-&amp;gt;ignore_exit &amp;amp;&amp;amp; ( $self-&amp;gt;wait || $self-&amp;gt;exit ) );&lt;br&gt;}&lt;/tt&gt;&lt;/p&gt;&lt;/div&gt; &lt;/blockquote&gt;&lt;p&gt;Thus, pure TAP doesn't quite indicate if a test failed, but it might if we add diagnostics, but that means I lied to chromatic.  Damn.&lt;/p&gt;&lt;p&gt;As for my &lt;tt&gt;App::Prove::History&lt;/tt&gt; code, this means you have to do this to see which test programs have failed:&lt;/p&gt;&lt;blockquote&gt;&lt;div&gt;&lt;p&gt; &lt;tt&gt;SELECT r.suite_id, n.name, failed, exit, wait&lt;br&gt;FROM&amp;nbsp; &amp;nbsp;test_result r, test_name n&lt;br&gt;WHERE&amp;nbsp; r.test_name_id = n.id&lt;br&gt;&amp;nbsp; AND&amp;nbsp; (&lt;br&gt;&amp;nbsp; &amp;nbsp; r.failed &amp;gt; 0&lt;br&gt;&amp;nbsp; &amp;nbsp; OR&lt;br&gt;&amp;nbsp; &amp;nbsp; r.exit != 0&lt;br&gt;&amp;nbsp; &amp;nbsp; OR&lt;br&gt;&amp;nbsp; &amp;nbsp; r.wait != 0&lt;br&gt;);&lt;/tt&gt;&lt;/p&gt;&lt;/div&gt; &lt;/blockquote&gt;&lt;p&gt;A bit clumsy, no?  And I don't even include the 'ignore_exit' bit, though I might have to later.&lt;/p&gt;&lt;p&gt;I'm thinking about a tiny denormalization here, but in reality, I'll probably slap a view over this and see how that works.&lt;/p&gt;&lt;p&gt;Pop quiz:  is the following a failure?  Why or why not?  Is the existing behavior wrong?&lt;/p&gt;&lt;blockquote&gt;&lt;div&gt;&lt;p&gt; &lt;tt&gt;1..3&lt;br&gt;ok 1 - Booting&lt;br&gt;ok 2 - Got dem boots!&lt;br&gt;ok 3 - We have foobar # TODO Waiting on foobar shipment&lt;/tt&gt;&lt;/p&gt;&lt;/div&gt; &lt;/blockquote&gt;</description>
<dc:creator>Ovid</dc:creator>
<dc:date>2008-12-10T16:21:04+00:00</dc:date>
<dc:subject>journal</dc:subject>
</item>

<item rdf:about="http://use.perl.org/~Ovid/journal/38051?from=rss">
<title>App::Prove::History</title>
<link>http://use.perl.org/~Ovid/journal/38051?from=rss</link>
<description>&lt;p&gt;A new development version of &lt;a href="http://github.com/Ovid/app--prove--history/tree/master"&gt;App::Prove::History&lt;/a&gt; is available on github.  You can check it out with:&lt;/p&gt;&lt;blockquote&gt;&lt;div&gt;&lt;p&gt; &lt;tt&gt;git clone git://github.com/Ovid/app--prove--history.git&lt;/tt&gt;&lt;/p&gt;&lt;/div&gt; &lt;/blockquote&gt;&lt;p&gt;It depends on the development version of &lt;tt&gt;Test::Harness&lt;/tt&gt;, available at:&lt;/p&gt;&lt;blockquote&gt;&lt;div&gt;&lt;p&gt; &lt;tt&gt;svn co http://svn.hexten.net/tapx/trunk test_harness&lt;/tt&gt;&lt;/p&gt;&lt;/div&gt; &lt;/blockquote&gt;&lt;p&gt;The schema information is now documented in &lt;tt&gt;App::Prove::History::Builder&lt;/tt&gt;.  I've documented all tables (only 3) and what each field stores.  If you know &lt;tt&gt;TAP::Parser&lt;/tt&gt;, it should be straightforward.  The main table everyone should care about:&lt;/p&gt;&lt;blockquote&gt;&lt;div&gt;&lt;p&gt; &lt;tt&gt;&amp;nbsp; "test_result"&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; CREATE TABLE IF NOT EXISTS test_result (&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; id&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;INTEGER PRIMARY KEY,&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; suite_id&amp;nbsp; &amp;nbsp; &amp;nbsp;INTEGER NOT NULL,&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; test_name_id INTEGER NOT NULL,&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; passed&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;INTEGER NOT NULL,&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; failed&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;INTEGER NOT NULL,&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; todo&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;INTEGER NOT NULL,&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; todo_passed&amp;nbsp; INTEGER NOT NULL,&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; skipped&amp;nbsp; &amp;nbsp; &amp;nbsp; INTEGER NOT NULL,&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; planned&amp;nbsp; &amp;nbsp; &amp;nbsp; INTEGER NOT NULL,&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; tests_run&amp;nbsp; &amp;nbsp; INTEGER NOT NULL,&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; exit&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;INTEGER NOT NULL,&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; wait&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;INTEGER NOT NULL,&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; run_time&amp;nbsp; &amp;nbsp; &amp;nbsp;REAL&amp;nbsp; &amp;nbsp; NOT NULL&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; );&lt;br&gt; &lt;br&gt;&amp;nbsp; &amp;nbsp; * "suite_id"&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; A reference to "suite.id"&lt;br&gt; &lt;br&gt;&amp;nbsp; &amp;nbsp; * "test_name_id"&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; A reference to "test_name.id"&lt;br&gt; &lt;br&gt;&amp;nbsp; &amp;nbsp; * "passed"&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; The number of tests which passed.&lt;br&gt; &lt;br&gt;&amp;nbsp; &amp;nbsp; * "failed"&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; The number of tests which failed.&lt;br&gt; &lt;br&gt;&amp;nbsp; &amp;nbsp; * "todo"&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; The number of TODO tests.&lt;br&gt; &lt;br&gt;&amp;nbsp; &amp;nbsp; * "todo_passed"&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; The number of TODO tests which unexpectedly succeeded.&lt;br&gt; &lt;br&gt;&amp;nbsp; &amp;nbsp; * "skipped"&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; The number of tests skipped.&lt;br&gt; &lt;br&gt;&amp;nbsp; &amp;nbsp; * "planned"&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; The number of tests planned.&lt;br&gt; &lt;br&gt;&amp;nbsp; &amp;nbsp; * "tests_run"&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; The number of tests run.&lt;br&gt; &lt;br&gt;&amp;nbsp; &amp;nbsp; * "exit"&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; The exit status of the test.&lt;br&gt; &lt;br&gt;&amp;nbsp; &amp;nbsp; * "wait"&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; The wait status of the test.&lt;br&gt; &lt;br&gt;&amp;nbsp; &amp;nbsp; * "run_time"&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; The time in seconds it tooks the test program to run. If Time::HiRes&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; is installed, it will have a high resolution time.&lt;/tt&gt;&lt;/p&gt;&lt;/div&gt; &lt;/blockquote&gt;&lt;p&gt;I &lt;em&gt;think&lt;/em&gt; that my current plan is to only shove this data into an SQLite database and not provide any wrappers or anything for it.  If someone wants some DBIx::Class interface or to shove this into MySQL or PostGresql, they can do that separately.  This should keep this package lightweight and allow me to focus on getting the data people want rather than supplying all of the bells and whistles.&lt;/p&gt;</description>
<dc:creator>Ovid</dc:creator>
<dc:date>2008-12-09T11:42:52+00:00</dc:date>
<dc:subject>journal</dc:subject>
</item>

<item rdf:about="http://use.perl.org/~Ovid/journal/38048?from=rss">
<title>Running Tests In Multiple Languages</title>
<link>http://use.perl.org/~Ovid/journal/38048?from=rss</link>
<description>&lt;p&gt;Recently on the TAP development list, the question of running tests in multiple languages came up.  The example was PHP and Perl, but I'll show Ruby and Perl as I don't have PHP installed on this machine.&lt;/p&gt;&lt;p&gt;First, create the following Ruby program (adjusting the shebang line to taste):&lt;/p&gt;&lt;blockquote&gt;&lt;div&gt;&lt;p&gt; &lt;tt&gt;#!/usr/bin/env ruby -w&lt;br&gt; &lt;br&gt;'hello?'&lt;br&gt; &lt;br&gt;puts '1..2';&lt;br&gt;puts 'ok 1 - ruby 1';&lt;br&gt;puts 'ok 2 - ruby 2';&lt;/tt&gt;&lt;/p&gt;&lt;/div&gt; &lt;/blockquote&gt;&lt;p&gt;Now run that with the &lt;tt&gt;prove&lt;/tt&gt; utility which ships with &lt;a href="http://search.cpan.org/dist/Test-Harness/"&gt;Test::Harness&lt;/a&gt;.&lt;/p&gt;&lt;blockquote&gt;&lt;div&gt;&lt;p&gt; &lt;tt&gt;prove -v test.rb&lt;br&gt;test.rb&lt;nobr&gt; &lt;wbr&gt;&lt;/nobr&gt;..&lt;br&gt;1..2&lt;br&gt;ok 1 - ruby 1&lt;br&gt;ok 2 - ruby 2&lt;br&gt;test.rb:3: warning: unused literal ignored&lt;br&gt;ok&lt;br&gt;All tests successful.&lt;br&gt;Files=1, Tests=2,&amp;nbsp; 0 wallclock secs ( 0.03 usr&amp;nbsp; 0.01 sys +&amp;nbsp; 0.00 cusr&amp;nbsp; 0.01 csys =&amp;nbsp; 0.05 CPU)&lt;br&gt;Result: PASS&lt;/tt&gt;&lt;/p&gt;&lt;/div&gt; &lt;/blockquote&gt;&lt;p&gt;Note that we're really running Ruby code, even with a Ruby error message.  How does that work?  You can run &lt;tt&gt;perl test.rb&lt;/tt&gt; and you'll see that when Perl encounters the shebang line, it's smart enough to DWIM!  This means that if you have shebang lines, &lt;tt&gt;prove&lt;/tt&gt; will DWIM also.  So, let's assume that our Ruby tests end in&lt;nobr&gt; &lt;wbr&gt;&lt;/nobr&gt;.rbt, our PHP tests end in&lt;nobr&gt; &lt;wbr&gt;&lt;/nobr&gt;.phpt and Perl tests end in&lt;nobr&gt; &lt;wbr&gt;&lt;/nobr&gt;.t:&lt;/p&gt;&lt;blockquote&gt;&lt;div&gt;&lt;p&gt; &lt;tt&gt;alias myprove='find t/ -name '*.t' -or '*.phpt' -or '*.rbt' | prove -&lt;/tt&gt;&lt;/p&gt;&lt;/div&gt; &lt;/blockquote&gt;&lt;p&gt;Then just run &lt;tt&gt;myprove&lt;/tt&gt; and you can run test suites written in multiple languages.  (You can do this with tests without shebang lines, but that's another post).&lt;/p&gt;&lt;p&gt;Note that you can't just use &lt;tt&gt;xargs&lt;/tt&gt; here.  I had originally suggested that, but Andy Lester pointed out to me that this would invoke &lt;tt&gt;prove&lt;/tt&gt; multiple times.  A colleague of mine explained to me that &lt;tt&gt;xargs&lt;/tt&gt; will cause this behavior if the generated list is too large -- as often happens with a &lt;tt&gt;find&lt;/tt&gt; command.&lt;/p&gt;</description>
<dc:creator>Ovid</dc:creator>
<dc:date>2008-12-08T11:23:14+00:00</dc:date>
<dc:subject>journal</dc:subject>
</item>

<item rdf:about="http://use.perl.org/~Ovid/journal/38032?from=rss">
<title>Saving Test Runs</title>
<link>http://use.perl.org/~Ovid/journal/38032?from=rss</link>
<description>&lt;p&gt;I don't have the new version up on Github yet, but &lt;a href="http://github.com/Ovid/app--prove--history/tree/master"&gt;App::Prove::History&lt;/a&gt; is coming along nicely.  I've committed a few changes to &lt;a href="http://search.cpan.org/dist/Test-Harness/"&gt;Test::Harness&lt;/a&gt; to make this work (primarily to pass a &lt;tt&gt;TAP::Parser&lt;/tt&gt; instance along), so even if I post to Github, you wouldn't be able to test it without checking the latest &lt;tt&gt;Test::Harness&lt;/tt&gt; out of Subversion.&lt;/p&gt;&lt;p&gt;I hope to have it on Github this weekend, but it won't go to the CPAN until there is an official &lt;tt&gt;Test::Harness&lt;/tt&gt; release supporting the features I need (something I've not been pressing for because stability of &lt;tt&gt;Test::Harness&lt;/tt&gt; is far more important than my work, but maybe a developer release is in order).&lt;/p&gt;&lt;p&gt;One problem I've already been hit with repeatedly is the evolving underlying schema.  I have several changes in mind, but I won't allow this to hold up an alpha release.  I think what I need to do is use &lt;a href="http://search.cpan.org/dist/DBIx-Migration/"&gt;DBIx::Migration&lt;/a&gt; to handle the changes, make it easier to specify an alternate database (PostgresQL or MySQL instead of SQLIte, for example), and maybe write some "cookbook" examples of how to upgrade a database without losing data.  Still, making this code properly database independent might mean switching to an ORM and I'm reluctant to add that overhead to test runs.&lt;/p&gt;&lt;p&gt;I also need to write some cookbook examples of SQL to read the database from as I haven't provided a clear API for it.  I've now documented the schema, but I may need to provide views and deprecation schedules to handle the schema evolution.  It's one thing to provide code for the massses.  It's another thing to provide data.&lt;/p&gt;</description>
<dc:creator>Ovid</dc:creator>
<dc:date>2008-12-05T09:46:59+00:00</dc:date>
<dc:subject>journal</dc:subject>
</item>

<item rdf:about="http://use.perl.org/~Ovid/journal/38018?from=rss">
<title>Perl 5 Programmers Are Dying</title>
<link>http://use.perl.org/~Ovid/journal/38018?from=rss</link>
<description>&lt;p&gt;If I didn't grab your attention with my &lt;a href="http://use.perl.org/~Ovid/journal/38010"&gt;Perl 5 Is Dying&lt;/a&gt; post, allow me to follow up.&lt;/p&gt;&lt;p&gt;First, to reiterate my main point:  if only Perl programmers know that Perl isn't dead, it's dead.&lt;/p&gt;&lt;p&gt;Or maybe those of a political bent might appreciate the observation that for many people, perception trumps reality.  Seriously, perception trumps reality.  If decision makes &lt;em&gt;perceive&lt;/em&gt; that Perl is dead, we can all laugh quietly at their idiocy.  After all, some COBOL programmers are still laughing.&lt;/p&gt;&lt;p&gt;Got that?  Really?  Seems to me a few people either missed that point or dispute it.  Fair enough.  Now sit back and relax.&lt;/p&gt;&lt;p&gt;When I was living in Portland working for a company called 'OnSite Technology', we had trouble hiring Perl programmers.  We had no trouble &lt;em&gt;finding&lt;/em&gt; Perl programmers.  They were a dime a dozen.  People write a couple of admin scripts in Perl and they put Perl on their CV.  Now don't get me wrong, I have Java on my CV, but I would never &lt;em&gt;dream&lt;/em&gt; of sitting down for a Java interview without their knowing up front that my knowledge is pre 1.5 and I don't know any of the modern tools.  It's only there because I want employers to know that I have some exposure to it, not that I think I know it.&lt;/p&gt;&lt;p&gt;Now, maybe I'm just being naive, but somehow people with Perl on their CV think they can do this job, but they can't.  Not even close.  At OnSite we struggled so hard to find programmers that we hired one of our programmers from California and another one from Idaho (or was that Iowa?  I forget).  Two-thirds of our Perl programmers were from out of state because that's what we had to do to keep our company going.&lt;/p&gt;&lt;p&gt;It's not just Portland.  In the "dying" thread, &lt;a href="http://use.perl.org/comments.pl?sid=41735&amp;amp;cid=66169"&gt;mock complained about companies in Victoria and Vancouver having trouble hiring Perl programmers&lt;/a&gt;.  We're having the same problem here in London.  My brother (the Java programmer, not &lt;a href="http://www.vimeo.com/1424008"&gt;the one banned from Portugal&lt;/a&gt;) tells me that he can't find Perl programmers but Java guys are a dime a dozen.  Here at the BBC, I've been told that lack of &lt;em&gt;competent&lt;/em&gt; Perl programmers has been one of the reasons we've considered moving away from Perl.  Many employers I've spoken with in London tell me the same sad story.  In fact, it's bad enough that Dave Cross picked up a Simon Cozens' project and offered a free Perl class at the BBC.  We might even do this again.&lt;/p&gt;&lt;p&gt;Oddly, I hear that Python has a similar problem (I wouldn't know), but that Ruby and PHP don't.  While this is still all anecdotal evidence, when employers tell me that they can find developers for languages which are not Perl, I find that interesting.  And maybe they're wrong, but like the whole "Perl 5 Is Dying" meme, it's still a problem.&lt;/p&gt;&lt;p&gt;So, you've got a great product idea and need to start a new team.  You've heard that Perl is really quick to develop in, but you hear that Perl is dead and you can't find any Perl programmers.  Hmm&lt;nobr&gt; &lt;wbr&gt;&lt;/nobr&gt;...&lt;/p&gt;&lt;p&gt;We can point to &lt;a href="http://www.indeed.com/jobtrends?q=c%2C+java%2C+python%2C+perl%2C+ruby%2C+c%2B%2B%2C+c%23%2C+.net&amp;amp;l="&gt;Perl's rather flat job trends&lt;/a&gt; and claim we're not dying, but others can point out that we're not growing.  Of course, other languages have flat job trends, but they're also not fighting the bad PR we are.  We can &lt;a href="http://www.indeed.com/jobtrends?q=python%2C+perl%2C+ruby%2C+php&amp;amp;l=&amp;amp;relative=1"&gt;compare relative job growth in our direct competitors&lt;/a&gt; and see that we're dead last.  I suppose we can wait until the pain really sets in (and I know that some will), but then it will be too late.&lt;/p&gt;&lt;p&gt;Publish articles.  Publish articles in places which aren't typically Perl-centric.  Blog about Perl.  If you have a Perl-related site, try and make it look modern, not like some throwback to the 90s.  If you don't have the skill for that (I certainly don't), ask for help.  If your bosses say "Perl is dying", politely correct them with information, not faith.&lt;/p&gt;&lt;p&gt;And if your bosses counter with "we can't find good Perl programmers", well, I ain't got no advice for you there.  If the decision makers &lt;em&gt;and&lt;/em&gt; new programmers decide that Perl is dead, then we know where we're going.  It's a vicious cycle we have to break.  In the past few years, dynamic languages have been carving their own niche, but Perl's not well-represented there even though many of them learned their hard won lessons from us.&lt;/p&gt;&lt;p&gt; &lt;a href="http://use.perl.org/~chromatic/journal/38016"&gt;Do&lt;/a&gt; &lt;a href="http://use.perl.org/~gabor/journal/38011"&gt;something&lt;/a&gt;.&lt;/p&gt;</description>
<dc:creator>Ovid</dc:creator>
<dc:date>2008-12-04T10:54:38+00:00</dc:date>
<dc:subject>journal</dc:subject>
</item>

<item rdf:about="http://use.perl.org/~Ovid/journal/38010?from=rss">
<title>Perl 5 Is Dying</title>
<link>http://use.perl.org/~Ovid/journal/38010?from=rss</link>
<description>&lt;p&gt;Take a look at the &lt;a href="http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html"&gt;November 2008 TIOBE index top ten&lt;/a&gt;:&lt;/p&gt;&lt;blockquote&gt;&lt;div&gt;&lt;p&gt; &lt;tt&gt;&amp;nbsp; Position&amp;nbsp; &amp;nbsp;Position&amp;nbsp; &amp;nbsp;Programming&amp;nbsp; &amp;nbsp; &amp;nbsp;Ratings&amp;nbsp; &amp;nbsp;Delta Nov&lt;br&gt;&amp;nbsp; Nov 2008&amp;nbsp; &amp;nbsp;Nov 2007&amp;nbsp; &amp;nbsp;Language&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Nov 2008&amp;nbsp; 2007&lt;br&gt;&amp;nbsp; 1&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 1&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Java&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 20.299%&amp;nbsp; &amp;nbsp;-0.24%&lt;br&gt;&amp;nbsp; 2&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 2&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; C&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;15.276%&amp;nbsp; &amp;nbsp;+1.31%&lt;br&gt;&amp;nbsp; 3&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 4&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; C++&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;10.357%&amp;nbsp; &amp;nbsp;+1.61%&lt;br&gt;&amp;nbsp; 4&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 3&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; (Visual) Basic&amp;nbsp; &amp;nbsp;9.270%&amp;nbsp; &amp;nbsp;-0.96%&lt;br&gt;&amp;nbsp; 5&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 5&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; PHP&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 8.940%&amp;nbsp; &amp;nbsp;+0.25%&lt;br&gt;&amp;nbsp; 6&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 7&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Python&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;5.140%&amp;nbsp; &amp;nbsp;+0.91%&lt;br&gt;&amp;nbsp; 7&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 8&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; C#&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;4.026%&amp;nbsp; &amp;nbsp;+0.11%&lt;br&gt;&amp;nbsp; 8&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 11&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;Delphi&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;4.006%&amp;nbsp; &amp;nbsp;+1.55%&lt;br&gt;&amp;nbsp; 9&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 6&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Perl&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;3.876%&amp;nbsp; &amp;nbsp;-0.86%&lt;br&gt;&amp;nbsp; 10&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;10&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;JavaScript&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;2.925%&amp;nbsp; &amp;nbsp; 0.00%&lt;/tt&gt;&lt;/p&gt;&lt;/div&gt; &lt;/blockquote&gt;&lt;p&gt;Yes, I know TIOBE has some issues.  If you think it can be dismissed because of that, you're part of the problem.&lt;/p&gt;&lt;p&gt;Perl comes in after &lt;em&gt;Delphi&lt;/em&gt;?  We've still a ways to go before being knocked out of the top ten, but we have an *excellent* chance of this happening in the next year.  Last year I seem to recall mentioning on the TPF steering committee list that Perl had been in the top ten of this list for years and was likely to remain that way.  We were number six on the list and we weren't going &lt;em&gt;anywhere&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;I was wrong.  Now I realize that there are those who think this is a non-issue and &lt;a href="http://blog.timbunce.org/2008/07/30/perl-myths-oscon-2008/"&gt;Tim Bunce&lt;/a&gt; has been doing a great job of fighting the FUD because he has the temerity to (gasp) use &lt;em&gt;data&lt;/em&gt;.  However, that's not enough.&lt;/p&gt;&lt;p&gt;Perl is in danger of falling out of TIOBE's Top Ten for the first time in its history and that's going to make news.  And regardless of our biases, we &lt;em&gt;all&lt;/em&gt; know of managers/programmers/venture capitalists who are happy to decide based on headlines rather than real data.  Here at the BBC, it's no secret that there was serious talk amongst management and some programmers about completely eliminating Perl internally.  We couldn't, partially for the same reason insurance companies and banks can't get rid of COBOL.  The fact that Java is not a substitute for Perl has helped.  The fact that Ruby on Rails doesn't scale has helped.  When a scalable substitute with available developers (you Seaside fanatics put your hands down) crops up, Perl could be in trouble here -- aside from that pesky COBOL syndrome.&lt;/p&gt;&lt;p&gt;IE is facing stiff competition from Firefox because once Microsoft beat Netscape, they rested on their laurels.  Hell, once Microsoft beat Apple and thought Apple would stay down, Microsoft stopped developing IE for the Mac!  Java was facing stiff competition from C# because they rested on their laurels.  C# being Microsoft-only is the only reason Java is still so strong, but even this has brought much needed changes to Java.  Perl is facing stiff competition for the &lt;em&gt;exact same reason&lt;/em&gt; that Microsoft and Sun are.  Because we failed to innovate, we're now playing catch up -- just like IE and Java.  5.10, and perhaps 5.12, are too little, too late.  I believe that outside of the COBOL syndrome, Perl 5 is in danger of having no serious long-term future.&lt;/p&gt;&lt;p&gt;When 5.12 hits we have a chance of winning programmers back, but the language has so much baggage -- both technical and social -- that I don't think it will win anyone back.  We're losing because we didn't need marketing when we were the duct tape of the internet and now we sneer at it.  We're losing because we rested on our laurels and scoffed at the up-and-comers.  We're losing because older programmers ignored the concerns of the younger programmers.  We're losing for the same reason that there are &lt;em&gt;still&lt;/em&gt; people who object to images on Web pages, much less Flash and Javascript.&lt;/p&gt;&lt;p&gt;The technical world is evolving and we're fighting tooth-and-nail to not evolve (anyone remember seeing people sneer at the "REST fad"?).  Perl 6 might save us.  I don't think Perl 5 can, but remember, it's just a pile of code.  What I'm really saying is that the Perl community &lt;em&gt;as it currently exists&lt;/em&gt; cannot save Perl 5.  We're reinventing the language.  We need to reinvent the community.&lt;/p&gt;</description>
<dc:creator>Ovid</dc:creator>
<dc:date>2008-12-03T11:09:05+00:00</dc:date>
<dc:subject>journal</dc:subject>
</item>

<item rdf:about="http://use.perl.org/~Ovid/journal/38009?from=rss">
<title>Feedback about use.perl would be nice</title>
<link>http://use.perl.org/~Ovid/journal/38009?from=rss</link>
<description>&lt;p&gt; &lt;a href="http://use.perl.org/~andy.sh/journal/38005"&gt;Might I suggest you read this post about use.perl&lt;/a&gt;?  Having a rich, vibrant community which is partying like it's 1999 isn't doing us any favors.  May I even suggest that comments be made there and not here?&lt;/p&gt;</description>
<dc:creator>Ovid</dc:creator>
<dc:date>2008-12-03T10:13:40+00:00</dc:date>
<dc:subject>journal</dc:subject>
</item>

<item rdf:about="http://use.perl.org/~Ovid/journal/37992?from=rss">
<title>Rotten Ravioli Code</title>
<link>http://use.perl.org/~Ovid/journal/37992?from=rss</link>
<description>&lt;p&gt;In &lt;a href="http://use.perl.org/~Ovid/journal/37975"&gt;my last post&lt;/a&gt;, I was talking about the tendency of OO programmers to develop overly complex systems.  Aristotle pointed out that I was talking about &lt;a href="http://c2.com/cgi/wiki?RavioliCode"&gt;ravioli code&lt;/a&gt;.  I've never heard the term before, but it seems perfectly appropriate, particularly given some code I'm trying to understand right now.  Before I get there, let's have a look at one of the comments in the "ravioli code" discussion:&lt;/p&gt;&lt;blockquote&gt;&lt;div&gt;&lt;p&gt;Although it often does, I don't think RavioliCode always means that something needs fixing. In OO programming, there seems to be a trade-off between "easy to change" code and "easy to understand at first glance" code. You can try to maximize ease-of-change, then do your best to make the code understandable; or you can try to maximize understandability. I do the former. --StanSilver&lt;/p&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;p&gt;Ease of change instead of understandability?  Pardon me for quibbling, but what we're looking for is the elusive "maintainability":  that combination of ease of change and understandability that hits the sweet spot we all argue over.  A blanket favoring of "ease of change" is a disaster.  If something is really easy to change but hard to understand, is it not, by definition, easy to misunderstand?  Thus, those easy changes might be dead wrong, a problem I've found in some code I'm working on right now.  I don't &lt;em&gt;think&lt;/em&gt; this is what StanSilver is arguing for, but if we're go for ease of change and &lt;em&gt;then&lt;/em&gt; understandability, we all know what happens to developers who say "yeah, I'll get around to that".&lt;/p&gt;&lt;blockquote&gt;&lt;div&gt;&lt;p&gt; &lt;tt&gt;$ ack 'XXX|TODO'&amp;nbsp; lib/ t/ aggtests/ docs/ --all | wc -l&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;267&lt;/tt&gt;&lt;/p&gt;&lt;/div&gt; &lt;/blockquote&gt;&lt;p&gt;So, turning to the code I'm working on right now, I've decided to try and understand it.  Here's a (loose) inheritance heirarchy.&lt;/p&gt;&lt;blockquote&gt;&lt;div&gt;&lt;p&gt; &lt;tt&gt;A&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;A&lt;br&gt;|&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;|&lt;br&gt;B&amp;nbsp; &amp;nbsp; A&amp;nbsp; &amp;nbsp; B&lt;br&gt;|&amp;nbsp; &amp;nbsp; |&amp;nbsp; &amp;nbsp; |&lt;br&gt;C&amp;nbsp; &amp;nbsp; D&amp;nbsp; &amp;nbsp; E&lt;br&gt; \&amp;nbsp; &amp;nbsp;|&amp;nbsp; &amp;nbsp;/&lt;br&gt;&amp;nbsp; &amp;nbsp;--F--&lt;/tt&gt;&lt;/p&gt;&lt;/div&gt; &lt;/blockquote&gt;&lt;p&gt;(use.perl is messing with that format a bit)&lt;/p&gt;&lt;p&gt;Given that I need to instantiate F, notice anything problematic there?  And yes, B does override stuff in A, so you had better hope that:&lt;/p&gt;&lt;ul&gt;
  &lt;li&gt;You order your inheritance correctly&lt;/li&gt;&lt;li&gt;... based upon your MRO (method resolution order)&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;And do C, D and E have any identically named methods?  We're not calling "next::method" much internally, but even if we did, this level of complexity helps to illustrate why some languages simply outlaw multiple inheritance:  it's too dangerous to abuse.&lt;/p&gt;&lt;p&gt;By the way, it's worse than that diagram implies.  The hierarchy ignores that various &lt;em&gt;subroutines&lt;/em&gt; are exported into some classes (subs, not methods) and we have three traits loaded into F.  After working like mad to understand the various classes involved, I ran some tests with an instance of "F".  I used the debugger to dump out the method and it identifies 144 methods on the F object.  These methods are from nine packages.  What it &lt;em&gt;doesn't&lt;/em&gt; do is show you how the traits often "wrap" the methods to alter their behavior.  It also doesn't show which of those methods are documented as being overridden.  It also doesn't show which overriding methods should not have their parent called.  It also doesn't show which overriding methods &lt;em&gt;should&lt;/em&gt; have their parents called.  It also doesn't show which methods just crept in there by accident just because the hierarchy is so complicated.&lt;/p&gt;&lt;p&gt;Now if you'll excuse me, I need to go find some aspirin.&lt;/p&gt;</description>
<dc:creator>Ovid</dc:creator>
<dc:date>2008-12-01T10:23:19+00:00</dc:date>
<dc:subject>journal</dc:subject>
</item>

<item rdf:about="http://use.perl.org/~Ovid/journal/37975?from=rss">
<title>More Frustration With the State of OO</title>
<link>http://use.perl.org/~Ovid/journal/37975?from=rss</link>
<description>&lt;p&gt;From &lt;a href="http://www.advogato.org/article/83.html"&gt;Encapsulation, Inheritance and the Platypus effect&lt;/a&gt;:&lt;/p&gt;&lt;blockquote&gt;&lt;div&gt;&lt;p&gt;It's common practice to develop extensive in-house class libraries. However, when one examines the code in a typical class library, one finds a lot of excess generality and functionality which not only makes the code inefficient, but cluttered and hard to read, or even to debug.&lt;/p&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;p&gt;The article itself is short, clear, and helps to make clear that OO code is often a dangerous beast.  Please read it before continuing.&lt;/p&gt;&lt;p&gt;I find myself growing more disenchanted with OO as I go along because programmers are simply abusing it.  One key thing that Schwern likes to remind us is that &lt;a href="http://use.perl.org/~schwern/journal/36704"&gt;code should be skimmable&lt;/a&gt;.  I really, really wish more programmers would understand this.  I often go into projects and find that I cannot make heads or tails of their code not just because the work is complicated, but multiple levels of "abstraction" and "refactoring" have rendered code impenetrable.&lt;/p&gt;&lt;p&gt;Frankly, I'm not a stupid programmer, but I confess that there are many programmers who do a better job understanding complex systems than I do.  Part of that is because we don't try hard enough to make our code understood.  What I like to cleanly write the code the programmer's likely to look at first and then if there are gory bits, hide them lower down.  The programmer who really needs to know will dig down, but at the higher level, well-named variables and functions, even if they take a bit longer to write out, are a win.  Consider, for example, my &lt;a href="http://search.cpan.org/dist/Test-Kit/"&gt;Test::Kit&lt;/a&gt; module.  This module let's you list several test classes in an import list and compose all of them together and export their test functions en masse to your namespace.  This makes it easy to build custom testing modules.  There are complicated bits, but here's the import method:&lt;/p&gt;&lt;blockquote&gt;&lt;div&gt;&lt;p&gt; &lt;tt&gt;sub import {&lt;br&gt;&amp;nbsp; &amp;nbsp; my $class = shift;&lt;br&gt; &lt;br&gt;&amp;nbsp; &amp;nbsp; my $callpack = caller(1);&lt;br&gt; &lt;br&gt;&amp;nbsp; &amp;nbsp; my $basic_functions = namespace::clean-&amp;gt;get_functions($class);&lt;br&gt; &lt;br&gt;&amp;nbsp; &amp;nbsp; my ( $packages, $features ) = $class-&amp;gt;_packages_and_features(@_);&lt;br&gt;&amp;nbsp; &amp;nbsp; $class-&amp;gt;_setup_import($features);&lt;br&gt; &lt;br&gt;&amp;nbsp; &amp;nbsp; foreach my $package ( keys %$packages ) {&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; my $internal_package = "Test::Kit::_INTERNAL_::$package";&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; eval "package $internal_package; use $package;";&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if ( my $error = $@ ) {&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Carp::croak("Cannot require $package:&amp;nbsp; $error");&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br&gt; &lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $class-&amp;gt;_register_new_functions(&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $callpack,&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $basic_functions,&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $packages-&amp;gt;{$package},&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $package,&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $internal_package,&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; );&lt;br&gt;&amp;nbsp; &amp;nbsp; }&lt;br&gt;&amp;nbsp; &amp;nbsp; $class-&amp;gt;_validate_functions($callpack);&lt;br&gt;&amp;nbsp; &amp;nbsp; $class-&amp;gt;_export_to($callpack);&lt;br&gt; &lt;br&gt;&amp;nbsp; &amp;nbsp; {&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; # Otherwise, "local $TODO" won't work for caller.&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; no strict 'refs';&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; our $TODO;&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; *{"$callpack\::TODO"} = \$TODO;&lt;br&gt;&amp;nbsp; &amp;nbsp; }&lt;br&gt;&amp;nbsp; &amp;nbsp; return 1;&lt;br&gt;}&lt;/tt&gt;&lt;/p&gt;&lt;/div&gt; &lt;/blockquote&gt;&lt;p&gt;That's not perfect (&lt;tt&gt;_register_new_functions&lt;/tt&gt; is particularly heinous), but at the high level, I made it easy to read because you need to understand the logic flow.  And this is alpha code that I just threw together.  You could contrast this with a class I was trying to understand the other day which had a bunch of Moose attributes declared, a couple of methods, inherited from &lt;em&gt;three different classes&lt;/em&gt; and used &lt;em&gt;two roles&lt;/em&gt;!  You couldn't tell what the class did.  The multiple inheritance (each of the parent classes in turn inherited from other things) and the two roles made it a mess to try and figure out where any functionality was.  It's stuff like this which leads programmers to write articles like the one I linked to.&lt;/p&gt;&lt;p&gt;This style of coding is pervasive enough that I am beginning to think that OO encourages it.  Take, for example, Mason and Template Toolkit.  I've used both extensively, but Mason, while being lovely and powerful, makes it seductively easy to push application/business logic into the view layer (sorry Dave!).  It makes this so easy that every shop I've worked at which makes extensive use of Mason has problems with this.  I don't see those problems nearly as often with Template Toolkit.&lt;/p&gt;&lt;p&gt;So is OO, like Mason, a fantastic idea which nonetheless is so easy to abuse that it ultimately leads to more problems than it solves?  I won't say this is true, but I suspect it.  Unfortunately, so many have simply assumed the superiority of OO that trying to gain any traction here will be difficult, at best.&lt;/p&gt;&lt;p&gt;And for the record, &lt;a href="http://use.perl.org/~Ovid/journal/7531"&gt;I started whingeing about whether OO sucks back in 2002&lt;/a&gt;.&lt;/p&gt;</description>
<dc:creator>Ovid</dc:creator>
<dc:date>2008-11-29T21:58:16+00:00</dc:date>
<dc:subject>journal</dc:subject>
</item>

<item rdf:about="http://use.perl.org/~Ovid/journal/37966?from=rss">
<title>Vim:  source control diffs</title>
<link>http://use.perl.org/~Ovid/journal/37966?from=rss</link>
<description>&lt;p&gt;Quite often I want to get a diff of the file I'm working on, but as usual, I hate leaving my editor for something I script.  So I first wrote this simple Perl program (adjust to taste):&lt;/p&gt;&lt;blockquote&gt;&lt;div&gt;&lt;p&gt; &lt;tt&gt;#!/usr/bin/env perl&lt;br&gt; &lt;br&gt;use strict;&lt;br&gt;use warnings;&lt;br&gt; &lt;br&gt;my $file = shift || die "You must supply a filename to $0";&lt;br&gt; &lt;br&gt;unless ( -f $file ) {&lt;br&gt;&amp;nbsp; &amp;nbsp; die "File ($file) does not exist";&lt;br&gt;}&lt;br&gt; &lt;br&gt;my @log = qx(svn log "$file" --stop-on-copy);&lt;br&gt;my $branch_name = branch_name();&lt;br&gt; &lt;br&gt;my $pipe = qr/[[:space:]]+\|[[:space:]]+/;&lt;br&gt; &lt;br&gt;splice @log, 0, 3;&amp;nbsp; &amp;nbsp;# discard first revision&lt;br&gt;while (local $_ = shift @log) {&lt;br&gt;&amp;nbsp; &amp;nbsp; next unless&lt;nobr&gt; &lt;wbr&gt;&lt;/nobr&gt;/\Ar([[:digit:]]+)$pipe([[:word:]]+)$pipe(\S+)\s+\S+/;&lt;br&gt;&amp;nbsp; &amp;nbsp; my ( $revision, $user, $datetime ) = ( $1, $2, $3 );&lt;br&gt;&amp;nbsp; &amp;nbsp; print "$revision - $user - $datetime - ";&lt;br&gt;&amp;nbsp; &amp;nbsp; shift @log;&lt;br&gt;&amp;nbsp; &amp;nbsp; my $message = shift @log;&lt;br&gt; &lt;br&gt;&amp;nbsp; &amp;nbsp; # we often prefix commit messages with "$branch_name: "&lt;br&gt;&amp;nbsp; &amp;nbsp; $message =~ s/^\s*$branch_name(?::\s*)?//;&amp;nbsp; # trim it if it's there&lt;br&gt;&amp;nbsp; &amp;nbsp; print $message;&lt;br&gt;}&lt;br&gt; &lt;br&gt;sub branch_name {&lt;br&gt;&amp;nbsp; &amp;nbsp; chomp(my @svn_info = qx(svn info&lt;nobr&gt; &lt;wbr&gt;&lt;/nobr&gt;.));&lt;br&gt;&amp;nbsp; &amp;nbsp; my ($branch_name) = $svn_info[1] =~ m{/([^/]+)\z};&lt;br&gt;&amp;nbsp; &amp;nbsp; return $branch_name;&lt;br&gt;}&lt;/tt&gt;&lt;/p&gt;&lt;/div&gt; &lt;/blockquote&gt;&lt;p&gt;That produces a summarized output of the subversion log history:&lt;/p&gt;&lt;blockquote&gt;&lt;div&gt;&lt;p&gt; &lt;tt&gt;13015 - ovid - 2008-11-28 - Made changes to the fixture and test file&lt;br&gt;13014 - jplindstom - 2008-11-28 - Made a change to the Assert Result Test&lt;br&gt;13012 - danquayle - 2008-11-28 - Fixed misspeeling&lt;/tt&gt;&lt;/p&gt;&lt;/div&gt; &lt;/blockquote&gt;&lt;p&gt;And this vim function:&lt;/p&gt;&lt;blockquote&gt;&lt;div&gt;&lt;p&gt; &lt;tt&gt;function! SourceDiff()&lt;br&gt;&amp;nbsp; &amp;nbsp; let filename = bufname("%")&lt;br&gt;&amp;nbsp; &amp;nbsp; let command&amp;nbsp; = 'perl script/svn_revisions.pl "'.filename.'"'&lt;br&gt;&amp;nbsp; &amp;nbsp; let result&amp;nbsp; &amp;nbsp;= split( system(command), "\n" )&lt;br&gt; &lt;br&gt;&amp;nbsp; &amp;nbsp; if empty(result)&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; echomsg("No past revisions for " . filename)&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return&lt;br&gt;&amp;nbsp; &amp;nbsp; endif&lt;br&gt; &lt;br&gt;&amp;nbsp; &amp;nbsp; " get the list of files&lt;br&gt;&amp;nbsp; &amp;nbsp; let revision = PickFromList('revision', result)&lt;br&gt; &lt;br&gt;&amp;nbsp; &amp;nbsp; if strlen(revision)&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; let items = split(revision, " ")&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; execute '!svn diff -r' . items[0] . ' "' . filename&lt;nobr&gt; &lt;wbr&gt;&lt;/nobr&gt;.'" | less'&lt;br&gt;&amp;nbsp; &amp;nbsp; endif&lt;br&gt;endfunction&lt;/tt&gt;&lt;/p&gt;&lt;/div&gt; &lt;/blockquote&gt;&lt;p&gt;(Note that this relies on my &lt;a href="http://use.perl.org/~Ovid/journal/36929"&gt;PickFromList&lt;/a&gt; function)&lt;/p&gt;&lt;p&gt;When I bind that to a key (or keystroke), it gives me output like this:&lt;/p&gt;&lt;blockquote&gt;&lt;div&gt;&lt;p&gt; &lt;tt&gt;Choose a revision:&lt;br&gt;1: 13015 - ovid - 2008-11-28 - Made changes to the fixture and test file&lt;br&gt;2: 13014 - jplindstom - 2008-11-28 - Made a change to the Assert Result Test&lt;br&gt;3: 13012 - danquayle - 2008-11-28 - Fixed misspeeling&lt;/tt&gt;&lt;/p&gt;&lt;/div&gt; &lt;/blockquote&gt;&lt;p&gt;I hit the appropriate number of the revision I want to diff against, and &lt;em&gt;voila&lt;/em&gt;, a quick subversion diff in my vim session.&lt;/p&gt;</description>
<dc:creator>Ovid</dc:creator>
<dc:date>2008-11-28T15:51:56+00:00</dc:date>
<dc:subject>journal</dc:subject>
</item>

<item rdf:about="http://use.perl.org/~Ovid/journal/37965?from=rss">
<title>Tabular Code Formatting and No Editor Support</title>
<link>http://use.perl.org/~Ovid/journal/37965?from=rss</link>
<description>&lt;p&gt;There are times that I want to format my code in a tabular format.  Recently we're struggling with some of our RelaxNG compact schemas for our REST XML because we have something like this:&lt;/p&gt;&lt;blockquote&gt;&lt;div&gt;&lt;p&gt; &lt;tt&gt;promo-element = element promo {&lt;br&gt;&amp;nbsp; &amp;nbsp; ids-group?,&lt;br&gt;&amp;nbsp; &amp;nbsp; promo-body,&lt;br&gt;&amp;nbsp; &amp;nbsp; links-element?&lt;br&gt;&amp;nbsp; }&lt;/tt&gt;&lt;/p&gt;&lt;/div&gt; &lt;/blockquote&gt;&lt;p&gt;Note how everything but the &lt;tt&gt;promo-body&lt;/tt&gt; is optional?  The ids are forbidden in a POST, but required for PUT and GET.  The &lt;tt&gt;links-element&lt;/tt&gt;, however, is required for GET but forbidden on POST and PUT (actually, we allow them and ignore them).&lt;/p&gt;&lt;p&gt;So really, we want three definitions here.&lt;/p&gt;&lt;blockquote&gt;&lt;div&gt;&lt;p&gt; &lt;tt&gt;GET-promo-element = element promo {&lt;br&gt;&amp;nbsp; &amp;nbsp; ids-group?,&lt;br&gt;&amp;nbsp; &amp;nbsp; promo-body,&lt;br&gt;&amp;nbsp; &amp;nbsp; links-element?&lt;br&gt;}&lt;br&gt; &lt;br&gt;POST-promo-element = element promo {&lt;br&gt;&amp;nbsp; &amp;nbsp; promo-body,&lt;br&gt;}&lt;br&gt; &lt;br&gt;PUT-promo-element = element promo {&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;ids-group,&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;promo-body,&lt;br&gt;}&lt;/tt&gt;&lt;/p&gt;&lt;/div&gt; &lt;/blockquote&gt;&lt;p&gt;This doesn't look too bad, but take a look at our series element:&lt;/p&gt;&lt;blockquote&gt;&lt;div&gt;&lt;p&gt; &lt;tt&gt;series-element = element series {&lt;br&gt;&amp;nbsp; &amp;nbsp; pid-addressable-attr-group?,&lt;br&gt;&amp;nbsp; &amp;nbsp; revision-attributes-group,&lt;br&gt;&amp;nbsp; &amp;nbsp; collection-attr-group,&lt;br&gt;&amp;nbsp; &amp;nbsp; crid-group?,&lt;br&gt;&amp;nbsp; &amp;nbsp; ids-group?,&lt;br&gt;&amp;nbsp; &amp;nbsp; relations-group,&lt;br&gt;&amp;nbsp; &amp;nbsp; title-description-group,&lt;br&gt;&amp;nbsp; &amp;nbsp; master-brand-group?,&lt;br&gt;&amp;nbsp; &amp;nbsp; related-element?,&lt;br&gt;&amp;nbsp; &amp;nbsp; genres-group?,&lt;br&gt;&amp;nbsp; &amp;nbsp; formats-group?,&lt;br&gt;&amp;nbsp; &amp;nbsp; stack-element,&lt;br&gt;&amp;nbsp; &amp;nbsp; promotions-group?,&lt;br&gt;&amp;nbsp; &amp;nbsp; warnings-group?,&lt;br&gt;&amp;nbsp; &amp;nbsp; links-element?&lt;br&gt;}&lt;/tt&gt;&lt;/p&gt;&lt;/div&gt; &lt;/blockquote&gt;&lt;p&gt;Imagine taking the above and laying it out vertically in three separate definitions and knowing it's going to grow over time.  Seeing what's related to what could get confusing (it would be much worse to have this duplicated information spread across multiple files.&lt;/p&gt;&lt;p&gt;That's why it would be nice to implement this:&lt;/p&gt;&lt;blockquote&gt;&lt;div&gt;&lt;p&gt; &lt;tt&gt;GET-promo-element =&amp;nbsp; -&amp;nbsp; POST-promo-element = -&amp;nbsp; PUT-promo-element =&lt;br&gt;&amp;nbsp; element promo {&amp;nbsp; &amp;nbsp; -&amp;nbsp; &amp;nbsp; element promo {&amp;nbsp; &amp;nbsp; -&amp;nbsp; &amp;nbsp; element promo {&lt;br&gt;&amp;nbsp; &amp;nbsp; ids-group,&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;-&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;-&amp;nbsp; &amp;nbsp; &amp;nbsp;ids-group,&lt;br&gt;&amp;nbsp; &amp;nbsp; promo-body,&amp;nbsp; &amp;nbsp; &amp;nbsp; -&amp;nbsp; &amp;nbsp; &amp;nbsp;promo-body,&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;-&amp;nbsp; &amp;nbsp; &amp;nbsp;promo-body,&lt;br&gt;&amp;nbsp; &amp;nbsp; links-element&amp;nbsp; &amp;nbsp; -&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;-&amp;nbsp; &amp;nbsp; &amp;nbsp;links-element?&lt;br&gt;&amp;nbsp; }&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; - }&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;- }&lt;/tt&gt;&lt;/p&gt;&lt;/div&gt; &lt;/blockquote&gt;&lt;p&gt;Everything lines up nicely, it's easy to see how things relate, and it's completely invalid RelaxNG -- until you split those three columns.  Editing it would be a pain, though.  Editors work vertically, not horizontally (vim has some interesting support here, but it's clumsy).&lt;/p&gt;</description>
<dc:creator>Ovid</dc:creator>
<dc:date>2008-11-28T14:12:24+00:00</dc:date>
<dc:subject>journal</dc:subject>
</item>

<item rdf:about="http://use.perl.org/~Ovid/journal/37960?from=rss">
<title>Test::Most 0.20_02</title>
<link>http://use.perl.org/~Ovid/journal/37960?from=rss</link>
<description>&lt;p&gt;I've released a new developer version of &lt;a href="http://search.cpan.org/dist/Test-Most/"&gt;Test::Most&lt;/a&gt;, 0.20_02.  This offers &lt;a href="http://use.perl.org/~Ovid/journal/37929"&gt;the feature I was promising a few days ago&lt;/a&gt;:&lt;/p&gt;&lt;blockquote&gt;&lt;div&gt;&lt;p&gt; &lt;tt&gt;use Test::Most 'no_plan';&lt;br&gt; &lt;br&gt;ok 1;&lt;br&gt;my ( $foo, @bar ) = qw( this is a list );&lt;br&gt;show $foo, \@bar;&lt;br&gt;__END__&lt;br&gt;# $foo = 'this';&lt;br&gt;# @bar = (&lt;br&gt;#&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 'is',&lt;br&gt;#&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 'a',&lt;br&gt;#&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 'list'&lt;br&gt;#&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; );&lt;/tt&gt;&lt;/p&gt;&lt;/div&gt; &lt;/blockquote&gt;&lt;p&gt;Yup.  You get variable names now.  If you do testing, let me know if you like this.&lt;/p&gt;&lt;p&gt;It only displays lexicals (I haven't figured out the best way of getting the names of globals yet) and won't show 'containers', something &lt;a href="http://search.cpan.org/dist/Data-Dumper-Simple/"&gt;Data::Dumper::Simple&lt;/a&gt; handles quite nicely:&lt;/p&gt;&lt;blockquote&gt;&lt;div&gt;&lt;p&gt; &lt;tt&gt;$ perl -MData::Dumper::Simple -le 'print Dumper($ENV{PAGER})'&lt;br&gt;$ENV{PAGER} = 'less';&lt;/tt&gt;&lt;/p&gt;&lt;/div&gt; &lt;/blockquote&gt;&lt;p&gt;I suppose I could try an option where you specifically ask for &lt;tt&gt;Data::Dumper::Simple&lt;/tt&gt; behavior instead of &lt;tt&gt;Data::Dumper::Names&lt;/tt&gt;, but the former uses a source filter and the latter does not.  That's why I want Perl 6 now.  I can do this much more easily, no filters required&lt;nobr&gt; &lt;wbr&gt;&lt;/nobr&gt;:/&lt;/p&gt;</description>
<dc:creator>Ovid</dc:creator>
<dc:date>2008-11-27T15:02:51+00:00</dc:date>
<dc:subject>journal</dc:subject>
</item>

<item rdf:about="http://use.perl.org/~Ovid/journal/37957?from=rss">
<title>Happy Accidents in Testing</title>
<link>http://use.perl.org/~Ovid/journal/37957?from=rss</link>
<description>&lt;p&gt;Due to some issues in &lt;tt&gt;Test::Builder&lt;/tt&gt;, &lt;a href="http://search.cpan.org/dist/Test-Most/"&gt;Test::Most&lt;/a&gt;'s "die on failure" option has a curious behavior which was a right pain to work around, but basically means that we don't really die on failure.  We can't because we'd lose our diagnostic information.  Instead, we die when the next test is run or when the test run is finished.  It's generally transparent to the end-user, but that causes a problem:&lt;/p&gt;&lt;blockquote&gt;&lt;div&gt;&lt;p&gt; &lt;tt&gt;use Test::Most qw/die no_plan/;&lt;br&gt; &lt;br&gt;# this triggers the die&lt;br&gt;ok 0;&lt;br&gt; &lt;br&gt;# but these arguments are evaluated first&lt;br&gt;is factorial(2000), $some_big_assed_number;&lt;/tt&gt;&lt;/p&gt;&lt;/div&gt; &lt;/blockquote&gt;&lt;p&gt;Basically, we have to continue running until the next test.  If there's expensive computation or something which changes the state of our system, the we may have to wait or have the system's state different from the state in which the failure occurred.  This is really annoying and problematic.  It does, however, add one tiny little benefit:&lt;/p&gt;&lt;blockquote&gt;&lt;div&gt;&lt;p&gt; &lt;tt&gt;ok $false&lt;br&gt;&amp;nbsp; or explain $some_data;&lt;/tt&gt;&lt;/p&gt;&lt;/div&gt; &lt;/blockquote&gt;&lt;p&gt;That "or show $some_data" still triggers due to this bug, thus allowing us extra diagnostic information.  It's a tiny saving grace, but a nice one nonetheless (and also lets us easily implement clean up code).&lt;/p&gt;&lt;p&gt;Note that Schwern is fixing the issue in Test::Builder 2.0.&lt;/p&gt;</description>
<dc:creator>Ovid</dc:creator>
<dc:date>2008-11-27T13:41:32+00:00</dc:date>
<dc:subject>journal</dc:subject>
</item>

<item rdf:about="http://use.perl.org/~Ovid/journal/37949?from=rss">
<title>How many test harnesses are too many?</title>
<link>http://use.perl.org/~Ovid/journal/37949?from=rss</link>
<description>&lt;p&gt;Before I start, let's agree on what a test harness is, taken from &lt;a href="http://en.wikipedia.org/wiki/Test_harness"&gt;the Wikipedia description of test harnesses&lt;/a&gt;:&lt;/p&gt;&lt;blockquote&gt;&lt;div&gt;&lt;p&gt;In software testing, a test harness or automated test framework is a collection of software and test data configured to test a program unit by running it under varying conditions and monitoring its behavior and outputs. It has two main parts: the Test execution engine and the Test script repository.&lt;/p&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;p&gt;While I know I have a tendency to disagree with people about definitions of things, I think this is a definition that we can, if not agree on, at least not violently disagree on.&lt;/p&gt;&lt;p&gt;Based on this definition, we have four test harnesses in use here at work, three of which, curiously, were written by me.  Those three, not coincidentally, were written to address serious limitations in Perl's testing infrastructure.  Christopher Humphries commented to me on Twitter that four harnesses seems like a red flag and he's right!  Unfortunately, this is where we're at and the following explains why.&lt;/p&gt;&lt;p&gt;Here they are:&lt;/p&gt;&lt;ol&gt;
 &lt;li&gt;A custom acceptance test harness, conceptually similar to &lt;tt&gt;Test::Aggregate&lt;/tt&gt;.&lt;/li&gt;&lt;li&gt; &lt;a href="http://search.cpan.org/dist/Test-Harness/"&gt;Test::Harness&lt;/a&gt; &lt;/li&gt;&lt;li&gt; &lt;a href="http://search.cpan.org/dist/Test-Aggregate/"&gt;Test::Aggregate&lt;/a&gt; &lt;/li&gt;&lt;li&gt;A bash script to wrap all of them (more on this in a moment).&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Number one, the acceptance test harness, is the only one not written to address limitations of Perl's infrastructure, though it suffers from a huge limitation:  we have no nested TAP.  This is a custom harness which runs a bunch of YAML documents as declarative acceptance tests against our web API (the author of that system is toying releasing it to the CPAN).  I wrote a custom harness for this to aggregate these tests, but other than that, the credit for this one isn't mine.&lt;/p&gt;&lt;p&gt;Number two is &lt;tt&gt;Test::Harness&lt;/tt&gt;.  Though the 3.x version was originally written by me, it's maintained by Andy Armstrong and a few others (thank goodness.  You'd all be pretty upset if I held the keys to this car).  I actually wrote that as a parsing experiment, but once I realized what I had, I started to scratch all of my &lt;tt&gt;Test::Harness&lt;/tt&gt; itches until Andy Lester came forward and told me to run with it.  (To be fair, Andy Armstrong and Eric Wilhelm rewrote large portions of it to the extent that I can barely lay claim to it any more.)&lt;/p&gt;&lt;p&gt;Number three, &lt;tt&gt;Test::Aggregate&lt;/tt&gt;, is a study in refactoring and scope creep.  This is driven in part by its heavy use internally and by the fact that &lt;a href="http://search.cpan.org/src/MRAMBERG/Catalyst-Runtime-5.8000_03/Makefile.PL"&gt;the dev branch of Catalyst is now using it&lt;/a&gt;.  I've been adding more and more features simply because we need them and I don't know of any way to avoid this, but this is really shaping up to be a large, serious harness.  Hence, much of my work in refactoring the awful internals.&lt;/p&gt;&lt;p&gt;I'm actually frustrated by this because it's heavily dependent on &lt;tt&gt;Test::Builder&lt;/tt&gt; internals.  It's gotten so bad that &lt;a href="http://search.cpan.org/dist/Test-Aggregate/lib/Test/Aggregate/Builder.pm"&gt;I now have a module just for overriding those internals&lt;/a&gt;.  It's fragile and if Schwern makes big changes, I'm sunk.  However, it generally &lt;em&gt;doubles&lt;/em&gt; the speed of your test suite.  Some people report faster savings.&lt;/p&gt;&lt;p&gt;The final harness is the bash script which manages all of the others.  It's not a very good bash script because I'm not good at bash and to be fair, it only tenuously fits the definition of "test harness", but a test harness doesn't have to be large and I need this one because two of my test harnesses aggregate tests and since we don't nested TAP, this bash script pulls their data and summarizes some of it for me.  And for the curious, here it is:&lt;/p&gt;&lt;blockquote&gt;&lt;div&gt;&lt;p&gt; &lt;tt&gt;#!/usr/bin/env bash&lt;br&gt; &lt;br&gt;summary=0&lt;br&gt; &lt;br&gt;results=".runtests.txt"&lt;br&gt;fast=0&lt;br&gt;failures=0&lt;br&gt; &lt;br&gt;while [ $# -gt 0 ]; do&lt;br&gt;&amp;nbsp; case $1 in&lt;br&gt;&amp;nbsp; &amp;nbsp; -s)&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; summary=1&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; shift 1&lt;br&gt;&amp;nbsp; &amp;nbsp;&lt;nobr&gt; &lt;wbr&gt;&lt;/nobr&gt;;;&lt;br&gt; &lt;br&gt;&amp;nbsp; &amp;nbsp; -f)&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; fast=1&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; shift 1&lt;br&gt;&amp;nbsp; &amp;nbsp;&lt;nobr&gt; &lt;wbr&gt;&lt;/nobr&gt;;;&lt;br&gt; &lt;br&gt;&amp;nbsp; &amp;nbsp; -F)&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; failures=1&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; shift 1&lt;br&gt;&amp;nbsp; &amp;nbsp;&lt;nobr&gt; &lt;wbr&gt;&lt;/nobr&gt;;;&lt;br&gt; &lt;br&gt;&amp;nbsp; &amp;nbsp; -[h?])&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; echo&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; echo "Usage: runtests [-h|-s|-f|-F]"&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; echo&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; echo "&amp;nbsp; &amp;nbsp; -s: Do not run tests. Print summary results from last run"&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; echo "&amp;nbsp; &amp;nbsp; -f: Sets FAST_TESTS environment variable to true"&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; echo "&amp;nbsp; &amp;nbsp; -F: Only show failing tests from last run. Useful with \$EDITOR \$(bin/runtests -F)"&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; echo "&amp;nbsp; &amp;nbsp; -h: Diplay this information and exit"&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; echo&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; echo "Rebuild database, run the tests and print summary results."&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; echo&lt;br&gt; &lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; exit&lt;br&gt;&amp;nbsp; &amp;nbsp;&lt;nobr&gt; &lt;wbr&gt;&lt;/nobr&gt;;;&lt;br&gt;&amp;nbsp; esac&lt;br&gt;done&lt;br&gt; &lt;br&gt;# set default exit status to success&lt;br&gt;STATUS=0&lt;br&gt; &lt;br&gt;if [ $failures -eq 1 ]; then&lt;br&gt;&amp;nbsp; &amp;nbsp; if [ -f $results ]; then&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; cat $results |awk '/not ok/ {print $5}'|grep 'yml$'&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; cat $results |awk '/not ok/ {print $5}'|grep '\.t$'&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; perl -ne '$found ||=&lt;nobr&gt; &lt;wbr&gt;&lt;/nobr&gt;/^Test Summary/ and m{^(t/\S+)} and !/acceptance|aggregate|pod/ and print $1,$/' &amp;lt; $results&lt;br&gt;&amp;nbsp; &amp;nbsp; else&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; echo No previous test run found.&lt;br&gt;&amp;nbsp; &amp;nbsp; fi&lt;br&gt; &lt;br&gt;&amp;nbsp; &amp;nbsp; exit&lt;br&gt;fi&lt;br&gt; &lt;br&gt;date&lt;br&gt;if [ $summary -ne 1 ]; then&lt;br&gt;&amp;nbsp; &amp;nbsp; # always archive the current test results&lt;br&gt;&amp;nbsp; &amp;nbsp; if [ -f $results ]; then&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; mv $results "$results.prev"&lt;br&gt;&amp;nbsp; &amp;nbsp; fi&lt;br&gt; &lt;br&gt;&amp;nbsp; &amp;nbsp; time perl bin/pips_db.pl --recreate_test_db \&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;amp;&amp;amp; FAST_TESTS=$fast prove -r --state=hot,fast,save --timer t 2&amp;gt;&amp;amp;1 | tee $results&lt;br&gt; &lt;br&gt;&amp;nbsp; &amp;nbsp; # capture exit status of test run&lt;br&gt;&amp;nbsp; &amp;nbsp; STATUS=$?&lt;br&gt;fi&lt;br&gt; &lt;br&gt;if [ -f $results ]; then&lt;br&gt;&amp;nbsp; &amp;nbsp; perl script/analyze_tests.pl&lt;br&gt;&amp;nbsp; &amp;nbsp; echo&lt;br&gt;&amp;nbsp; &amp;nbsp; echo Failed acceptance tests:&lt;br&gt;&amp;nbsp; &amp;nbsp; echo&lt;br&gt;&amp;nbsp; &amp;nbsp; cat $results |awk '/not ok/ {print $5}'|grep 'yml$'|sed -e 's/^/&amp;nbsp; &amp;nbsp;&lt;nobr&gt; &lt;wbr&gt;&lt;/nobr&gt;/'&lt;br&gt;&amp;nbsp; &amp;nbsp; echo&lt;br&gt;&amp;nbsp; &amp;nbsp; echo Failed aggregate tests:&lt;br&gt;&amp;nbsp; &amp;nbsp; echo&lt;br&gt;&amp;nbsp; &amp;nbsp; cat $results |awk '/not ok/ {print $5}'|grep '\.t$'|sed -e 's/^/&amp;nbsp; &amp;nbsp;&lt;nobr&gt; &lt;wbr&gt;&lt;/nobr&gt;/'&lt;br&gt;&amp;nbsp; &amp;nbsp; echo&lt;br&gt;&amp;nbsp; &amp;nbsp; perl -ne '$found ||=&lt;nobr&gt; &lt;wbr&gt;&lt;/nobr&gt;/^Test Summary/ and print' &amp;lt; $results&lt;br&gt;else&lt;br&gt;&amp;nbsp; &amp;nbsp; echo No previous test run found.&lt;br&gt;fi&lt;br&gt; &lt;br&gt;exit $STATUS&lt;/tt&gt;&lt;/p&gt;&lt;/div&gt; &lt;/blockquote&gt;&lt;p&gt;Note that it relies on the &lt;a href="http://search.cpan.org/src/ANDYA/Test-Harness-3.14/examples/analyze_tests.pl"&gt;analyst_tests.pl&lt;/a&gt; program from the &lt;a href="http://search.cpan.org/src/ANDYA/Test-Harness-3.14/examples/"&gt;Test::Harness examples/ directory&lt;/a&gt;.  It gives me output similar to this:&lt;/p&gt;&lt;blockquote&gt;&lt;div&gt;&lt;p&gt; &lt;tt&gt;$ bin/runtests -s&lt;br&gt;Wed Nov 26 09:40:14 GMT 2008&lt;br&gt;Number of test programs: 28&lt;br&gt;Total runtime approximately 15 minutes 32 seconds&lt;br&gt; &lt;br&gt;Ten slowest tests:&lt;br&gt;+---------+--------------------------------------------------------+&lt;br&gt;| Time&amp;nbsp; &amp;nbsp; | Test&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;|&lt;br&gt;+---------+--------------------------------------------------------+&lt;br&gt;| 13m 41s | t/aggregate.t&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; |&lt;br&gt;| 0m 23s&amp;nbsp; | t/test_class_tests.t&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;|&lt;br&gt;| 0m 9s&amp;nbsp; &amp;nbsp;| t/update_tva.t&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;|&lt;br&gt;| 0m 7s&amp;nbsp; &amp;nbsp;| t/change_events.t&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; |&lt;br&gt;| 0m 6s&amp;nbsp; &amp;nbsp;| t/cache_keys.t&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;|&lt;br&gt;| 0m 6s&amp;nbsp; &amp;nbsp;| t/unit/migration.t&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;|&lt;br&gt;| 0m 6s&amp;nbsp; &amp;nbsp;| t/acceptance/master_brand/master_brand_without_image.t |&lt;br&gt;| 0m 6s&amp;nbsp; &amp;nbsp;| t/is_rest_post.t&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;|&lt;br&gt;| 0m 4s&amp;nbsp; &amp;nbsp;| t/schema_populate.t&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; |&lt;br&gt;| 0m 4s&amp;nbsp; &amp;nbsp;| t/unit/migration/promotions_pid-dump_delete.t&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; |&lt;br&gt;+---------+--------------------------------------------------------+&lt;br&gt; &lt;br&gt;Faile d acceptance tests:&lt;br&gt; &lt;br&gt;Failed aggregate tests:&lt;br&gt; &lt;br&gt;&amp;nbsp; &amp;nbsp; aggtests/pips3/importer-change_events.t&lt;br&gt; &lt;br&gt;Test Summary Report&lt;br&gt;-------------------&lt;br&gt;t/aggregate.t&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(Wstat: 512 Tests: 10038 Failed: 2)&lt;br&gt;&amp;nbsp; Failed tests:&amp;nbsp; 2105, 2147&lt;br&gt;&amp;nbsp; TODO passed:&amp;nbsp; &amp;nbsp;5614, 5706, 5741, 5796, 5809&lt;br&gt;&amp;nbsp; Non-zero exit status: 2&lt;br&gt;Files=27, Tests=20880, 3496 wallclock secs ( 5.12 usr&amp;nbsp; 0.47 sys + 2168.69 cusr 81.80 csys = 2256.08 CPU)&lt;br&gt;Result: FAIL&lt;/tt&gt;&lt;/p&gt;&lt;/div&gt; &lt;/blockquote&gt;&lt;p&gt;Note that this is the summary of our fast test run.  The full test suite takes twice as long.&lt;/p&gt;&lt;p&gt;Once we have nested TAP, I can at least make the bash wrapper go away.  I don't think I'll be able to eliminate the others.&lt;/p&gt;&lt;p&gt;Side note:  this bash script allows me to use the following alias to automatically edit all failed tests:&lt;/p&gt;&lt;blockquote&gt;&lt;div&gt;&lt;p&gt; &lt;tt&gt;alias edit_failed='${EDITOR:-vim} $(bin/runtests -F)'&lt;/tt&gt;&lt;/p&gt;&lt;/div&gt; &lt;/blockquote&gt;</description>
<dc:creator>Ovid</dc:creator>
<dc:date>2008-11-26T09:43:49+00:00</dc:date>
<dc:subject>journal</dc:subject>
</item>

<item rdf:about="http://use.perl.org/~Ovid/journal/37930?from=rss">
<title>Stupidly Clever Code</title>
<link>http://use.perl.org/~Ovid/journal/37930?from=rss</link>
<description>&lt;p&gt;When pairing with another programmer, I wrote some code which he described as "clever".  Here it is.&lt;/p&gt;&lt;blockquote&gt;&lt;div&gt;&lt;p&gt; &lt;tt&gt;sub xpc_namespaces {&lt;br&gt;&amp;nbsp; &amp;nbsp; my $self&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;= shift;&lt;br&gt;&amp;nbsp; &amp;nbsp; my $values&amp;nbsp; &amp;nbsp; &amp;nbsp;= $self-&amp;gt;{xpc_namespaces};&lt;br&gt;&amp;nbsp; &amp;nbsp; my %namespaces = map { reverse %$_ } values %$values;&lt;br&gt;&amp;nbsp; &amp;nbsp; return \%namespaces;&lt;br&gt;}&lt;/tt&gt;&lt;/p&gt;&lt;/div&gt; &lt;/blockquote&gt;&lt;p&gt;If someone refers to my code as "clever", I should consider that a code smell and look for a better way of writing it.  I know what that code does and why it does it, but I think that's because I wrote it.&lt;/p&gt;&lt;p&gt;I noticed the useless variable, so I thought about tightening it, but realized the logical conclusion was this:&lt;/p&gt;&lt;blockquote&gt;&lt;div&gt;&lt;p&gt; &lt;tt&gt;sub xpc_namespaces {&lt;br&gt;&amp;nbsp; &amp;nbsp; { map { reverse %$_ } values %{ shift-&amp;gt;{xpc_namespaces} } };&lt;br&gt;}&lt;/tt&gt;&lt;/p&gt;&lt;/div&gt; &lt;/blockquote&gt;&lt;p&gt;That's just, well, wrong.  Because of the structure of our XML, it's guaranteed we won't have collisions, but it's still an atrocity.  Unless you have no choice, code should be written for programmers, not computers (SICP for the win!).&lt;/p&gt;</description>
<dc:creator>Ovid</dc:creator>
<dc:date>2008-11-24T14:03:13+00:00</dc:date>
<dc:subject>journal</dc:subject>
</item>

<item rdf:about="http://use.perl.org/~Ovid/journal/37929?from=rss">
<title>Test::Most::explain: need steroid advice</title>
<link>http://use.perl.org/~Ovid/journal/37929?from=rss</link>
<description>&lt;p&gt;Summary:  my local version of &lt;a href="http://search.cpan.org/dist/Test-Most/"&gt;Test::Most&lt;/a&gt; can do this (note the variable names!), but I am pondering the interface:&lt;/p&gt;&lt;blockquote&gt;&lt;div&gt;&lt;p&gt; &lt;tt&gt;use Test::Most 'no_plan';&lt;br&gt; &lt;br&gt;ok 1;&lt;br&gt;my ( $foo, @bar ) = qw( this is a list );&lt;br&gt;explain $foo, \@bar;&lt;br&gt;__END__&lt;br&gt;# $foo = 'this';&lt;br&gt;# @bar = (&lt;br&gt;#&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 'is',&lt;br&gt;#&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 'a',&lt;br&gt;#&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 'list'&lt;br&gt;#&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; );&lt;/tt&gt;&lt;/p&gt;&lt;/div&gt; &lt;/blockquote&gt;&lt;p&gt;For years, people have struggled with tests with the following:&lt;/p&gt;&lt;blockquote&gt;&lt;div&gt;&lt;p&gt; &lt;tt&gt;diag $foo&lt;/tt&gt;&lt;/p&gt;&lt;/div&gt; &lt;/blockquote&gt;&lt;p&gt;And then they've cursed when they've seen the result:&lt;/p&gt;&lt;blockquote&gt;&lt;div&gt;&lt;p&gt; &lt;tt&gt;# HASH(0x80631d0)&lt;/tt&gt;&lt;/p&gt;&lt;/div&gt; &lt;/blockquote&gt;&lt;p&gt;So they remember to call &lt;tt&gt;Data::Dumper&lt;/tt&gt; or something similar:&lt;/p&gt;&lt;blockquote&gt;&lt;div&gt;&lt;p&gt; &lt;tt&gt;use Data::Dumper;&lt;br&gt;diag Dumper($foo);&lt;br&gt;__END__&lt;br&gt;$VAR1 = {&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 'foo' =&amp;gt; 'bar'&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; };&lt;/tt&gt;&lt;/p&gt;&lt;/div&gt; &lt;/blockquote&gt;&lt;p&gt;Of course, that's ugly formatting and grunt work that the programmer doesn't want to do.  So I added the &lt;tt&gt;explain()&lt;/tt&gt; function to &lt;a href="http://search.cpan.org/dist/Test-Most/"&gt;Test::Most&lt;/a&gt;.  If it sees a reference, it calls Dumper for you:&lt;/p&gt;&lt;blockquote&gt;&lt;div&gt;&lt;p&gt; &lt;tt&gt;use Test::Most 'no_plan';&lt;br&gt;explain $foo;&lt;br&gt;__END__&lt;br&gt;{&lt;br&gt;&amp;nbsp; &amp;nbsp; 'foo' =&amp;gt; 'bar'&lt;br&gt;};&lt;/tt&gt;&lt;/p&gt;&lt;/div&gt; &lt;/blockquote&gt;&lt;p&gt;We've also done away with that annoying &lt;tt&gt;$VAR1&lt;/tt&gt;, but I always thought that was ugly, so I did away with it.  Perhaps I shouldn't, but there you go.&lt;/p&gt;&lt;p&gt;It's worth noting that I tried to add &lt;tt&gt;explain()&lt;/tt&gt; to &lt;a href="http://search.cpan.org/dist/Test-Simple/"&gt;Test::More&lt;/a&gt;, but Schwern vetoed the Dumper/diag combination.  It's now the relatively broken:&lt;/p&gt;&lt;blockquote&gt;&lt;div&gt;&lt;p&gt; &lt;tt&gt;diag explain $foo;&lt;/tt&gt;&lt;/p&gt;&lt;/div&gt; &lt;/blockquote&gt;&lt;p&gt;That's why I still support &lt;tt&gt;explain()&lt;/tt&gt; in &lt;tt&gt;Test::Most&lt;/tt&gt;.  However, this also means that I can have fun with this.  My current idea is to put the &lt;tt&gt;$VAR1&lt;/tt&gt; back in there, but with a twist:  if you don't have &lt;a href="http://search.cpan.org/dist/Data-Dumper-Names"&gt;Data::Dumper::Names&lt;/a&gt;, you see the old &lt;tt&gt;explain()&lt;/tt&gt; behavior.  However, if you &lt;em&gt;do&lt;/em&gt; have it installed you can see the variable names:&lt;/p&gt;&lt;blockquote&gt;&lt;div&gt;&lt;p&gt; &lt;tt&gt;use Test::Most 'no_plan';&lt;br&gt; &lt;br&gt;ok 1;&lt;br&gt;my ( $foo, @bar ) = qw( this is a list );&lt;br&gt;explain $foo, \@bar;&lt;br&gt;__END__&lt;br&gt;# $foo = 'this';&lt;br&gt;# @bar = (&lt;br&gt;#&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 'is',&lt;br&gt;#&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 'a',&lt;br&gt;#&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 'list'&lt;br&gt;#&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; );&lt;/tt&gt;&lt;/p&gt;&lt;/div&gt; &lt;/blockquote&gt;&lt;p&gt;Now that, I think, is major juju coolness.  It also turned out quite handy when I was sprinkling&lt;nobr&gt; &lt;wbr&gt;&lt;/nobr&gt;&lt;tt&gt;::explain()&lt;/tt&gt; statements in a module, trying to work out what was broken.  The variables had different names, but carried similar values, making it hard to see which was which.  This made it trivial.&lt;/p&gt;&lt;p&gt;Unfortunately, this necessitates a couple of changes.  First, &lt;tt&gt;Data::Dumper::Names&lt;/tt&gt; needs to be told how far up the call stack to look.  Currently it only looks up one level, the simplistic, but ugly fix is to allow something like this:&lt;/p&gt;&lt;blockquote&gt;&lt;div&gt;&lt;p&gt; &lt;tt&gt;sub explain {&lt;br&gt;&amp;nbsp; &amp;nbsp; return unless $ENV{TEST_VERBOSE};&lt;br&gt;&amp;nbsp; &amp;nbsp; if ($DATA_DUMPER_NAMES_INSTALLED) {&lt;br&gt; &lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; # Ugly!&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; local $Data::Dumper::Names::UpLevel = 2;&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; diag(Data::Dumper::Names::Dumper(@_));&lt;br&gt;&amp;nbsp; &amp;nbsp; }&lt;br&gt;&amp;nbsp; &amp;nbsp; else {&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; # normal behavior&lt;br&gt;&amp;nbsp; &amp;nbsp; }&lt;br&gt;}&lt;/tt&gt;&lt;/p&gt;&lt;/div&gt; &lt;/blockquote&gt;&lt;p&gt;The other issue is the interface to &lt;tt&gt;Test::Most&lt;/tt&gt;.  Just how much magic should I pack into one function?  Maybe I should make another function, &lt;tt&gt;show&lt;/tt&gt;, which has this behavior?  This is incredibly useful, but I'd like to figure out the best interface here and this could be tricky.&lt;/p&gt;&lt;p&gt;Side note:  this trick wouldn't work easily with &lt;tt&gt;Data::Dumper::Simple&lt;/tt&gt; as Simple uses a source filter and I shouldn't be applying that to your code unless you ask. However, &lt;tt&gt;Data::Dumper::Simple&lt;/tt&gt; does a couple of tricks that &lt;tt&gt;Data::Dumper::Names&lt;/tt&gt; cannot.  First, it doesn't require a backslash in front of arrays and hashes.  Second, it would correctly report the names with this:&lt;/p&gt;&lt;blockquote&gt;&lt;div&gt;&lt;p&gt; &lt;tt&gt;print Dumper($foo[3]);&lt;/tt&gt;&lt;/p&gt;&lt;/div&gt; &lt;/blockquote&gt;&lt;p&gt; &lt;tt&gt;Data::Dumper::Names&lt;/tt&gt; can't figure out the container for that variable, so it gets reported as &lt;tt&gt;$VAR1&lt;/tt&gt;.  If there's a way around that, I'd love to hear it&lt;nobr&gt; &lt;wbr&gt;&lt;/nobr&gt;:)&lt;/p&gt;&lt;p&gt; &lt;strong&gt;Update&lt;/strong&gt;:  the main problem I'm finding with this approach:&lt;/p&gt;&lt;blockquote&gt;&lt;div&gt;&lt;p&gt; &lt;tt&gt;explain "Check that users can be loaded";&lt;br&gt;__END__&lt;br&gt;# $VAR1 = 'Check that users can be loaded';&lt;/tt&gt;&lt;/p&gt;&lt;/div&gt; &lt;/blockquote&gt;&lt;p&gt;That's not what I want and could get tricky.  I think a separate &lt;tt&gt;show()&lt;/tt&gt; function would be better after all (though I could get crazy and if the variable is readonly and I can't determine the variable name, I could omit the &lt;tt&gt;$VAR1&lt;/tt&gt;.  Madness I tell you.  Madness!)&lt;/p&gt;</description>
<dc:creator>Ovid</dc:creator>
<dc:date>2008-11-24T10:32:00+00:00</dc:date>
<dc:subject>journal</dc:subject>
</item>

<item rdf:about="http://use.perl.org/~Ovid/journal/37920?from=rss">
<title>Redland Help</title>
<link>http://use.perl.org/~Ovid/journal/37920?from=rss</link>
<description>&lt;p&gt;Does anyone know anything about &lt;a href="http://search.cpan.org/dist/Redland/"&gt;Redland&lt;/a&gt;?  It looks like it would be fantastic, but &lt;a href="http://www.cpantesters.org/show/Redland.html#Redland-1.0.5.4"&gt;fails virtually every install&lt;/a&gt;.  I've now received instructions for how to install it for OS X, but these are manual instructions and not good for general use.  I've contacted the author (he's also the author of the Redland C library) and hope to hear from him, but if anyone can offer suggestions, that would be great.&lt;/p&gt;</description>
<dc:creator>Ovid</dc:creator>
<dc:date>2008-11-21T10:30:26+00:00</dc:date>
<dc:subject>journal</dc:subject>
</item>

<item rdf:about="http://use.perl.org/~Ovid/journal/37912?from=rss">
<title>Oh god, please, no.</title>
<link>http://use.perl.org/~Ovid/journal/37912?from=rss</link>
<description>&lt;p&gt;Struggling all day with Gutenberg.  Someone (not naming them as I don't have permission) sent me code to let me use &lt;a href="http://search.cpan.org/~djbeckett/Redland-1.0.5.4/"&gt;Redland&lt;/a&gt; for my RDF parsing and it looks lovely.  Too bad &lt;a href="http://www.cpantesters.org/show/Redland.html#Redland-1.0.5.4"&gt;Redland doesn't compile for anyone&lt;/a&gt;.  Didn't compile for me, either.&lt;/p&gt;&lt;p&gt;I put this aside for a bit and tried parsing result pages.&lt;/p&gt;&lt;p&gt;Tried to use the &lt;a href="http://search.cpan.org/dist/Web-Scraper/"&gt;Web::Scraper&lt;/a&gt; module to at least pull results from Web pages, but I'm too stupid to figure out its syntax.  Learning a new API, CSS selectors and battling strange "don't know what to do with undef" errors proved too much.  Embarrassing.&lt;/p&gt;&lt;p&gt;I thought to use &lt;a href="http://search.cpan.org/dist/HTML-TableParser/"&gt;HTML::TableParser&lt;/a&gt; for some stuff, but that doesn't seem to let me at the attributes I need.&lt;/p&gt;&lt;p&gt;I thought XPath would be good, but it's not well-formed XML.  Someone mentioned to me that there might be an XPath module which might have an option which might let you parse malformed XML.  I didn't follow up on that.&lt;/p&gt;&lt;p&gt;I finally switch to my &lt;a href="http://search.cpan.org/dist/HTML-TokeParser-Simple/"&gt;HTML::TokeParser::Simple&lt;/a&gt; module for this.  It's not a good fit for this problem.  No, scratch that.  It's a bad fit for this problem, but it worked.  Then I turned back to search.  For this, I used &lt;a href="http://search.cpan.org/dist/WWW-Mechanize"&gt;WWW::Mechanize&lt;/a&gt;.  Notice anything, um, &lt;em&gt;crap&lt;/em&gt; about these damned results?&lt;/p&gt;&lt;blockquote&gt;&lt;div&gt;&lt;p&gt; &lt;tt&gt;sub search {&lt;br&gt;&amp;nbsp; &amp;nbsp; my $self = shift;&lt;br&gt;&amp;nbsp; &amp;nbsp; my $mech = WWW::Mechanize-&amp;gt;new(&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; agent&amp;nbsp; &amp;nbsp; &amp;nbsp;=&amp;gt; 'App::Gutenberg (perl)',&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; autocheck =&amp;gt; 1,&lt;br&gt;&amp;nbsp; &amp;nbsp; );&lt;br&gt; &lt;br&gt;&amp;nbsp; &amp;nbsp; $mech-&amp;gt;get(App::Gutenberg-&amp;gt;search_url);&lt;br&gt; &lt;br&gt;&amp;nbsp; &amp;nbsp; $mech-&amp;gt;submit_form(&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; form_number =&amp;gt; 1,&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; fields&amp;nbsp; &amp;nbsp; &amp;nbsp; =&amp;gt; {&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 'author' =&amp;gt; ($self-&amp;gt;author || ''),&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 'title'&amp;nbsp; =&amp;gt; ($self-&amp;gt;title&amp;nbsp; || ''),&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br&gt;&amp;nbsp; &amp;nbsp; );&lt;br&gt; &lt;br&gt;&amp;nbsp; &amp;nbsp; my $uri = $mech-&amp;gt;uri;&lt;br&gt;&amp;nbsp; &amp;nbsp; if ( $uri =~&lt;nobr&gt; &lt;wbr&gt;&lt;/nobr&gt;/#([[:word:]]+)\z/ ) {&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; # you have got to&lt;br&gt;&amp;nbsp; &amp;nbsp; }&lt;br&gt;&amp;nbsp; &amp;nbsp; else {&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; # be kidding me&lt;br&gt;&amp;nbsp; &amp;nbsp; }&lt;br&gt;}&lt;/tt&gt;&lt;/p&gt;&lt;/div&gt; &lt;/blockquote&gt;&lt;p&gt;If that URL matches, you're indexing into a list of &amp;lt;li&amp;gt; elements.  Otherwise, you're parsing a table.  Either way, it's a right pain to get the data you want.  Oh, and it's subtly different sets of data and the criteria for why it would be one type of result or another is unclear.&lt;/p&gt;&lt;p&gt;This is why I want to see REST for just about anything today.  It's simple.  It's straightforward.  It doesn't make me cry.  Now I know why you don't see Perl command line clients for Gutenberg.  Everything I'm writing is so damned fragile it will break if you look at it funny.  *sniff*&lt;/p&gt;&lt;p&gt; &lt;strong&gt;Update:&lt;/strong&gt;  it looks like any search with an author will return a list, but all other searches (only tested the basic form) return tables.&lt;/p&gt;</description>
<dc:creator>Ovid</dc:creator>
<dc:date>2008-11-20T16:46:00+00:00</dc:date>
<dc:subject>journal</dc:subject>
</item>

<item rdf:about="http://use.perl.org/~Ovid/journal/37911?from=rss">
<title>Gutenberg RDF</title>
<link>http://use.perl.org/~Ovid/journal/37911?from=rss</link>
<description>&lt;p&gt; &lt;a href="http://use.perl.org/~Ovid/journal/37863"&gt;Gutenberg's complete and total lack of an API is killing me&lt;/a&gt;.  I decided to play with this today, only to find that I can't even parse the core RDF file.  Well, ok, so they have an API.  RDF::Core::Model::Parser is too slow to parse it.  I'll have to rip it apart and shove it in a database.  I liked inkdroid's suggestion of of SRU, but that requires a 'net connection.  I want a resource I can grab and use offline.  For the time being, though, I'll have to rely on some 'net connection for searching.  Still, SRU eventually just directed me back to the Gutenberg Web pages and that forces me to scrape the HTML.  Since I have to do that anyway, I'll skip SRU and go straight to the Gutenberg site.&lt;/p&gt;</description>
<dc:creator>Ovid</dc:creator>
<dc:date>2008-11-20T10:33:10+00:00</dc:date>
<dc:subject>journal</dc:subject>
</item>

<item rdf:about="http://use.perl.org/~Ovid/journal/37896?from=rss">
<title>Test::Most::Exception - Important, But You Won't Need It</title>
<link>http://use.perl.org/~Ovid/journal/37896?from=rss</link>
<description>&lt;p&gt;Recently I uploaded the new &lt;a href="http://search.cpan.org/dist/Test-Most/"&gt;Test::Most&lt;/a&gt;.  From the end user perspective, the only real change (aside from being a touch easier to install), is that if you ask it to die when a test fails, it no longer just dies.  Instead, it throws a &lt;a href="http://search.cpan.org/dist/Test-Most/lib/Test/Most/Exception.pm"&gt;Test::Most::Exception&lt;/a&gt;.  The vast majority of people will never, ever need this feature.  However, our test suite gets a bit tricky at times and we do things like this:&lt;/p&gt;&lt;blockquote&gt;&lt;div&gt;&lt;p&gt; &lt;tt&gt;foreach my $test (@tests) {&lt;br&gt;&amp;nbsp; &amp;nbsp; my $tests_finished = eval { $test-&amp;gt;run };&lt;br&gt;&amp;nbsp; &amp;nbsp; if ( my $error = $@ ) {&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; report_error( $test, $error );&lt;br&gt;&amp;nbsp; &amp;nbsp; }&lt;br&gt;&amp;nbsp; &amp;nbsp; else {&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;nobr&gt; &lt;wbr&gt;&lt;/nobr&gt;...&lt;br&gt;&amp;nbsp; &amp;nbsp; }&lt;br&gt;}&lt;/tt&gt;&lt;/p&gt;&lt;/div&gt; &lt;/blockquote&gt;&lt;p&gt;Internally, the way we report failures depends very much upon whether or not the tests halted because &lt;tt&gt;Test::Most&lt;/tt&gt; was told to halt on failures, or whether they really died.  Now I can just do this in the &lt;tt&gt;&amp;amp;report_error&lt;/tt&gt; sub:&lt;/p&gt;&lt;blockquote&gt;&lt;div&gt;&lt;p&gt; &lt;tt&gt;if ( eval { $error-&amp;gt;isa('Test::Most::Exception') } ) {&lt;nobr&gt; &lt;wbr&gt;&lt;/nobr&gt;... }&lt;/tt&gt;&lt;/p&gt;&lt;/div&gt; &lt;/blockquote&gt;&lt;p&gt;And much grief is saved.&lt;/p&gt;&lt;p&gt;In other news, I've been asked to add timing data to &lt;a href="http://search.cpan.org/dist/Test-Aggregate/"&gt;Test::Aggregate&lt;/a&gt; and I've thought that &lt;tt&gt;prove&lt;/tt&gt;'s state mechanism should possibly be extended to capture aggregated state information.  In other words, while I didn't really intend to, I'm writing yet another new test harness.  You would think I've learned my lesson after writing the new &lt;a href="http://search.cpan.org/dist/Test-Harness/"&gt;Test::Harness&lt;/a&gt; (also by accident, I might add).&lt;/p&gt;&lt;p&gt;And yes, I've toyed with colored test output for it&lt;nobr&gt; &lt;wbr&gt;&lt;/nobr&gt;...&lt;/p&gt;</description>
<dc:creator>Ovid</dc:creator>
<dc:date>2008-11-17T15:29:24+00:00</dc:date>
<dc:subject>journal</dc:subject>
</item>

<item rdf:about="http://use.perl.org/~Ovid/journal/37863?from=rss">
<title>Gutenberg API</title>
<link>http://use.perl.org/~Ovid/journal/37863?from=rss</link>
<description>&lt;p&gt;As far as I can tell from reading the archives and checking their Web site, &lt;a href="http://www.gutenberg.org/"&gt;Project Gutenberg&lt;/a&gt; does not appear to have an API.  The closed I've found is an &lt;a href="http://www.gutenberg.org/wiki/Gutenberg:Feeds"&gt;RSS feed and an RDF document&lt;/a&gt;.  These don't really constitute and API, but the latter can be parsed for adding to an SQLite database.  Still trying to figure this out, though.  Trying to grab one version of their catalog in RDF format:&lt;/p&gt;&lt;blockquote&gt;&lt;div&gt;&lt;p&gt; &lt;tt&gt;gutenberg $ tar -xjf catalog.rdf.bz2&lt;br&gt;tar: This does not look like a tar archive&lt;br&gt;tar: Skipping to next header&lt;br&gt;tar: Archive contains obsolescent base-64 headers&lt;br&gt;tar: Error exit delayed from previous errors&lt;/tt&gt;&lt;/p&gt;&lt;/div&gt; &lt;/blockquote&gt;&lt;p&gt;I was able to unzip their&lt;nobr&gt; &lt;wbr&gt;&lt;/nobr&gt;.zip version of the same file, but I was disappointed to learn that their &lt;a href="http://www.gutenberg.org/feeds/examples/"&gt;Perl examples&lt;/a&gt; are rather old and no longer appear to properly parse the data.&lt;/p&gt;&lt;p&gt;But why would you care?  Because I think I want to make this happen:&lt;/p&gt;&lt;blockquote&gt;&lt;div&gt;&lt;p&gt; &lt;tt&gt;gutenberg --read "Art of War"&lt;/tt&gt;&lt;/p&gt;&lt;/div&gt; &lt;/blockquote&gt;&lt;p&gt;You know, sometimes I worry about posting neat ideas to use.perl for fear that someone would jump the gun and &lt;em&gt;Just Do It&lt;/em&gt;.  I realize now that this is foolish for two reasons.  First, they &lt;em&gt;Won't Just Do It&lt;/em&gt;.  Second, if they did, I'd be happy just to have the project done&lt;nobr&gt; &lt;wbr&gt;&lt;/nobr&gt;:)&lt;/p&gt;&lt;p&gt;Suggestions welcome.  There needs to be an easy way to update the database, track what a user has read, allow them to "bookmark" a book (or better yet, "annotate" a document"), etc.  I've never used an eReader.  I never gave a damn about them, really, because I like the feeling of a book in my hands.  Still, this seems worthwhile.&lt;/p&gt;</description>
<dc:creator>Ovid</dc:creator>
<dc:date>2008-11-12T10:39:02+00:00</dc:date>
<dc:subject>journal</dc:subject>
</item>

<item rdf:about="http://use.perl.org/~Ovid/journal/37844?from=rss">
<title>MacBook Pros and Cons</title>
<link>http://use.perl.org/~Ovid/journal/37844?from=rss</link>
<description>&lt;p&gt;Despite earlier protestations that I was getting fed up with Apple and may use Linux on my next Laptop, I broke down and, um, bought the new MacBook Pro 15".  I'm ridiculously happy with it (no problems with connectivity this time!), except for one thing:&lt;/p&gt;&lt;p&gt; &lt;strong&gt; &lt;a href="http://homepage.mac.com/jtyzack/.Pictures/screenshots/UKkeyboardlayout.jpg"&gt;Why the hell did you screw up the keyboard, Apple?!?!?!&lt;/a&gt; &lt;/strong&gt; &lt;/p&gt;&lt;p&gt;(The above pic is not really the keyboard, but it's pretty darned close)&lt;/p&gt;&lt;p&gt;I mean, the keyboard feels great and I love the fact that it lights up in the dark, but that's about it.  Everything else seems to suck.&lt;/p&gt;&lt;p&gt;My first indication that I was going to have a problem was when I kept hitting the backslash, '\' instead of the "Enter" key.  Apparently, on the European version of their keyboard, Apple thought it would be funny to introduce an extra-slim version of the enter key, one that's ridiculously easy to miss while typing.  Thanks Apple!&lt;/p&gt;&lt;p&gt;Some of the keys just don't make sense to me.  For example, I can now type the plus-minus sign (&amp;#177;) and the section symbol (&amp;#167;).  While that's all well and good, unless you want a 573 key keyboard, sooner or later you have to give something up.  What did they think was a fair trade-off?  Hmm, where's the octothorpe/hash symbol (#)?&lt;/p&gt;&lt;p&gt;Excuse me?  On a BSD based system they left off the hash symbol?  I know various European keyboards push this symbol all over the place (it's shift-3 on US keyboards), so I hunted and hunted over my keyboard, convinced that I had missed it.  Nope!  It's not there.&lt;/p&gt;&lt;p&gt;I finally had to hit Google to find the damned key.  Seems you have to hit alt-3 for that.  This is just unreal.  They gave up the '#' for the '&amp;#177;' and '&amp;#167;'?  I'm dumbfounded.  Apparently it's not like this on the US keyboard.  &lt;/p&gt;</description>
<dc:creator>Ovid</dc:creator>
<dc:date>2008-11-10T09:39:55+00:00</dc:date>
<dc:subject>journal</dc:subject>
</item>

<item rdf:about="http://use.perl.org/~Ovid/journal/37823?from=rss">
<title>TestModuleCoverage Update</title>
<link>http://use.perl.org/~Ovid/journal/37823?from=rss</link>
<description>&lt;p&gt;Recently I listed a vim function which allows you to &lt;a href="http://use.perl.org/~Ovid/journal/37639"&gt;run all tests which cover the module you're editing&lt;/a&gt;.  As it turns out, there's a tiny bug in Devel::CoverX::Covered which causes it to sometimes store historical information and you might get a report back for a test which doesn't exist.  I've emailed the author (no bug report as it might be a mistake on our end), but until it's cleared up, here's a corrected vim function:&lt;/p&gt;&lt;blockquote&gt;&lt;div&gt;&lt;p&gt; &lt;tt&gt;function! TestModuleCoverage()&lt;br&gt;&amp;nbsp; &amp;nbsp; let filename = bufname('%')&lt;br&gt; &lt;br&gt;&amp;nbsp; &amp;nbsp; let tests = system(&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 'for file in $(covered covering --source_file="'. filename&lt;nobr&gt; &lt;wbr&gt;&lt;/nobr&gt;.'"); '&lt;br&gt;&amp;nbsp; &amp;nbsp; \&amp;nbsp; . 'do if [[ -f "$file" ]]; then echo $file; fi; done')&lt;br&gt; &lt;br&gt;&amp;nbsp; &amp;nbsp; let result&amp;nbsp; = split( tests, "\n" )&lt;br&gt; &lt;br&gt;&amp;nbsp; &amp;nbsp; if empty(result)&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; echomsg "No tests found for: ". filename&lt;br&gt;&amp;nbsp; &amp;nbsp; else&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; execute ':!prove&amp;nbsp; ' . join(result)&lt;br&gt;&amp;nbsp; &amp;nbsp; endif&lt;br&gt;endfunction&lt;/tt&gt;&lt;/p&gt;&lt;/div&gt; &lt;/blockquote&gt;&lt;p&gt;I'm not exactly a bash wizard.  If you can suggest a better way of checking that those files exist, I'd welcome it.&lt;/p&gt;</description>
<dc:creator>Ovid</dc:creator>
<dc:date>2008-11-07T13:51:36+00:00</dc:date>
<dc:subject>journal</dc:subject>
</item>

<item rdf:about="http://use.perl.org/~Ovid/journal/37822?from=rss">
<title>Filtering DBIx::Class resultsets with external criteria</title>
<link>http://use.perl.org/~Ovid/journal/37822?from=rss</link>
<description>&lt;p&gt;Using DBIx::Class and I have a resultset which needs to be filtered by data which cannot be generated by SQL. What I need to do is something effectively equivalent to this hypothetical example:&lt;/p&gt;&lt;blockquote&gt;&lt;div&gt;&lt;p&gt; &lt;tt&gt;my $resultset&amp;nbsp; &amp;nbsp; &amp;nbsp;= $schema-&amp;gt;resultset('Service')-&amp;gt;search(\%search);&lt;br&gt;my $new_resultset = $resultset-&amp;gt;filter( sub {&lt;br&gt;&amp;nbsp; &amp;nbsp; my $web_service = shift;&lt;br&gt;&amp;nbsp; &amp;nbsp; return $web_service-&amp;gt;is_available;&lt;br&gt;} );&lt;/tt&gt;&lt;/p&gt;&lt;/div&gt; &lt;/blockquote&gt;&lt;p&gt;Reading through the docs gives me no clue how to accomplish a strategy like this.&lt;/p&gt;</description>
<dc:creator>Ovid</dc:creator>
<dc:date>2008-11-07T09:09:07+00:00</dc:date>
<dc:subject>journal</dc:subject>
</item>

<item rdf:about="http://use.perl.org/~Ovid/journal/37817?from=rss">
<title>Tests I Should Not Have to Write (for MySQL)</title>
<link>http://use.perl.org/~Ovid/journal/37817?from=rss</link>
<description>&lt;p&gt;Much of this is specific to our database and standards, but could be adopted for others.  It's a bit hackish and can stand to be cleaned up, but basically it attempts to verify that database columsn which should be defined the same are, in fact, defined the same.&lt;/p&gt;&lt;p&gt;These tests are necessary because of a horrible problem which we knew was a horrible problem but ignored.  At times when you're doing a heavy amount of work in MySQL, you can temporarily disable foreign key checks and re-enable them when you're done.  It's dangerous, but there are times it's useful.  We did this when we were changing a data type for a column with a foreign key constraint.  It worked like this:&lt;/p&gt;&lt;ol&gt;
  &lt;li&gt;Disable foreign key constraints&lt;/li&gt;&lt;li&gt;Update column type for &lt;tt&gt;master_brand_id&lt;/tt&gt; &lt;/li&gt;&lt;li&gt;Update all references to &lt;tt&gt;master_brand_id&lt;/tt&gt; where it had been truncated by old data type&lt;/li&gt;&lt;li&gt;Enable foreign key contraints&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Basically, we had a &lt;tt&gt;varchar(32)&lt;/tt&gt; column which truncated some data.  We upped it to &lt;tt&gt;varchar(64)&lt;/tt&gt; and updated the key everywhere.  Except that we missed updating the data type for one column and updating the value resulted in it being truncated (thanks MySQL!).  For that brief period of time, our database was not in "traditional" mode, thus silently allowing the truncation.  Plus, when foreign key checks are re-enabled, as an optimization, MySQL doesn't verify that the constraints hold, leaving you in a position where a bug is waiting to blow things up later.&lt;/p&gt;&lt;p&gt;The &lt;em&gt;correct&lt;/em&gt; way to do this is to define your own data types and use that everywhere.  Then, if you need to change it, you only have to do this in one spot and everwhere is &lt;em&gt;guaranteed&lt;/em&gt; to have the correct type definition.  Regrettably, as far as I'm aware, MySQL, unlike PostgreSQL or Oracle, does not provide custom data types.&lt;/p&gt;&lt;p&gt;Here's the embarrassing code which works around this.&lt;/p&gt;&lt;blockquote&gt;&lt;div&gt;&lt;p&gt; &lt;tt&gt;#!/usr/bin/env perl&lt;br&gt; &lt;br&gt;use strict;&lt;br&gt;use warnings;&lt;br&gt; &lt;br&gt;use Test::Most qw(no_plan die);&lt;br&gt;use PIPTest::Schema;&amp;nbsp; &amp;nbsp; # DBIx&lt;br&gt; &lt;br&gt;use List::MoreUtils 'uniq';&lt;br&gt;use Perl6::Junction 'any';&lt;br&gt;use Clone 'clone';&lt;br&gt; &lt;br&gt;# These have the same name, but aren't really identical&lt;br&gt;my @COLUMNS_TO_SKIP = qw/&lt;br&gt;&amp;nbsp; &amp;nbsp; description&lt;br&gt;&amp;nbsp; &amp;nbsp; duration&lt;br&gt;&amp;nbsp; &amp;nbsp; id&lt;br&gt;&amp;nbsp; &amp;nbsp; name&lt;br&gt;&amp;nbsp; &amp;nbsp; position&lt;br&gt;&amp;nbsp; &amp;nbsp; status&lt;br&gt;&amp;nbsp; &amp;nbsp; title&lt;br&gt;&amp;nbsp; &amp;nbsp; type&lt;br&gt;/;&lt;br&gt; &lt;br&gt;my $schema = PIPTest::Schema-&amp;gt;new;&lt;br&gt;my $dbh&amp;nbsp; &amp;nbsp; = $schema-&amp;gt;storage-&amp;gt;dbh;&lt;br&gt;my @tables = uniq sort map { $_-&amp;gt;table } keys %{ $schema-&amp;gt;class_mappings };&lt;br&gt; &lt;br&gt;my %definition_for;&lt;br&gt;for my $table (@tables) {&lt;br&gt;&amp;nbsp; &amp;nbsp; my $sth = $dbh-&amp;gt;prepare("SHOW COLUMNS FROM `$table`");&lt;br&gt;&amp;nbsp; &amp;nbsp; $sth-&amp;gt;execute;&lt;br&gt;&amp;nbsp; &amp;nbsp; while ( my $column = $sth-&amp;gt;fetchrow_hashref ) {&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; my $name = delete $column-&amp;gt;{Field};&lt;br&gt; &lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; # Don't ask me, man, I just work here.&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; # (MySQL reports an autoincrement default as undef, but a NOT NULL&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; # default as '')&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if ( "$table\_id" eq $name &amp;amp;&amp;amp; !defined $column-&amp;gt;{Default} ) {&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $column-&amp;gt;{Default} = '';&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br&gt; &lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; delete $column-&amp;gt;{Key};&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; delete $column-&amp;gt;{Extra};&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; next if $name eq any(@COLUMNS_TO_SKIP);&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $definition_for{$name} ||= {};&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $definition_for{$name}{$table} = $column;&lt;br&gt;&amp;nbsp; &amp;nbsp; }&lt;br&gt;}&lt;br&gt; &lt;br&gt;# delete the columns which are not duplicated&lt;br&gt; &lt;br&gt;foreach my $column (keys %definition_for) {&lt;br&gt;&amp;nbsp; &amp;nbsp; if ( 1 == keys %{ $definition_for{$column} } ) {&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; delete $definition_for{$column};&lt;br&gt;&amp;nbsp; &amp;nbsp; }&lt;br&gt;}&lt;br&gt; &lt;br&gt;# These are usually FK constraints which can be NULL&lt;br&gt;# We still compare the actual data type, though.&lt;br&gt;my %do_not_compare = (&lt;br&gt;&amp;nbsp; &amp;nbsp; change_event =&amp;gt; {&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; pid =&amp;gt; {&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Null&amp;nbsp; &amp;nbsp; =&amp;gt; 'Not sure why this can be null',&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Default =&amp;gt; 'Not sure why this can be null',&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br&gt;&amp;nbsp; &amp;nbsp; },&lt;br&gt;&amp;nbsp; &amp;nbsp; service =&amp;gt; {&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; master_brand_id =&amp;gt; {&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Null&amp;nbsp; &amp;nbsp; =&amp;gt; 'Services do not require a master_brand_id',&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Default =&amp;gt; 'Services do not require a master_brand_id',&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; },&lt;br&gt;&amp;nbsp; &amp;nbsp; },&lt;br&gt;&amp;nbsp; &amp;nbsp; pip =&amp;gt; {&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; master_brand_id =&amp;gt; {&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Null&amp;nbsp; &amp;nbsp; =&amp;gt; 'Pip does not require a master_brand_id',&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Default =&amp;gt; 'Pip does not require a master_brand_id',&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; },&lt;br&gt;&amp;nbsp; &amp;nbsp; },&lt;br&gt;&amp;nbsp; &amp;nbsp; import_error =&amp;gt; {&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; change_event_id =&amp;gt; {&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Null&amp;nbsp; &amp;nbsp; =&amp;gt; 'Import level errors do not get change events',&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Default =&amp;gt; 'Import level errors do not get change events',&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; },&lt;br&gt;&amp;nbsp; &amp;nbsp; },&lt;br&gt;);&lt;br&gt; &lt;br&gt;sub munge {&lt;br&gt;&amp;nbsp; &amp;nbsp; my ( $table, $column, $definition1, $definition2 ) = @_;&lt;br&gt;&amp;nbsp; &amp;nbsp; my ( $d1, $d2 ) = ( clone($definition1), clone($definition2) );&lt;br&gt;&amp;nbsp; &amp;nbsp; if ( my $remove = $do_not_compare{$table}{$column} ) {&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; my @keys = keys %$remove;&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; delete @{$d1}{@keys};&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; delete @{$d2}{@keys};&lt;br&gt;&amp;nbsp; &amp;nbsp; }&lt;br&gt;&amp;nbsp; &amp;nbsp; return ( $d1, $d2 );&lt;br&gt;}&lt;br&gt; &lt;br&gt;my @columns = sort keys %definition_for;&lt;br&gt;foreach my $column (@columns) {&lt;br&gt;&amp;nbsp; &amp;nbsp; my $definitions&amp;nbsp; &amp;nbsp; = $definition_for{$column};&lt;br&gt; &lt;br&gt;&amp;nbsp; &amp;nbsp; my @tables&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;= sort keys %$definitions;&lt;br&gt;&amp;nbsp; &amp;nbsp; my $key_table&amp;nbsp; &amp;nbsp; &amp;nbsp; = $column =~&lt;nobr&gt; &lt;wbr&gt;&lt;/nobr&gt;/_id$/&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ? find_primary_definition( $column, \@tables )&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; : shift @tables;&lt;br&gt;&amp;nbsp; &amp;nbsp; my $key_definition = $definitions-&amp;gt;{$key_table};&lt;br&gt; &lt;br&gt;&amp;nbsp; &amp;nbsp; foreach my $table (@tables) {&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; my $current_definition = $definitions-&amp;gt;{$table};&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; eq_or_diff munge( $table, $column, $key_definition, $current_definition ),&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; "$key_table.$column definition should match $table.$column definition";&lt;br&gt;&amp;nbsp; &amp;nbsp; }&lt;br&gt;}&lt;br&gt; &lt;br&gt;# By convention, the id for a table is usually $table_name . "_id".&lt;br&gt;# We look for that as a primary definition.&amp;nbsp; Otherwise, we'll just&lt;br&gt;# take the first&lt;br&gt;sub find_primary_definition {&lt;br&gt;&amp;nbsp; &amp;nbsp; my ( $column, $tables ) = @_;&lt;br&gt;&amp;nbsp; &amp;nbsp; my $index = 0;&lt;br&gt; &lt;br&gt;&amp;nbsp; &amp;nbsp; foreach my $i ( 0&lt;nobr&gt; &lt;wbr&gt;&lt;/nobr&gt;.. $#tables ) {&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; my $table = $tables-&amp;gt;[$i];&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if ( $table . '_id' eq $column ) {&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $index = $i;&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; last;&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br&gt;&amp;nbsp; &amp;nbsp; }&lt;br&gt;&amp;nbsp; &amp;nbsp; return splice @$tables, $index, 1;&lt;br&gt;}&lt;/tt&gt;&lt;/p&gt;&lt;/div&gt; &lt;/blockquote&gt;&lt;p&gt;As a side note, this uncovered another problem with our code.  We have 'created' and 'modified' columns and a bunch of DBIx code to manage them.  However, if someone updates the database directly, they don't get updated, resulting in information loss.  We could easily fix this by pushing this logic into the database with triggers.  This would simplify the application code, improve performance and ensure that this logic could not be easily subverted.  It was agreed that this was the right thing to do.  It was also agreed that because this is MySQL and their trigger support is so flaky, that we were afraid to do the right thing&lt;nobr&gt; &lt;wbr&gt;&lt;/nobr&gt;:(&lt;/p&gt;&lt;p&gt;It sucks when you're afraid of your database.&lt;/p&gt;</description>
<dc:creator>Ovid</dc:creator>
<dc:date>2008-11-06T11:11:28+00:00</dc:date>
<dc:subject>journal</dc:subject>
</item>

<item rdf:about="http://use.perl.org/~Ovid/journal/37809?from=rss">
<title>McCain</title>
<link>http://use.perl.org/~Ovid/journal/37809?from=rss</link>
<description>&lt;p&gt;If there's any doubt as to why the Republicans have done so poorly in this election, &lt;a href="http://www.telegraph.co.uk/news/newstopics/uselection2008/3383784/John-McCain-praises-Barack-Obama-in-graceful-concession-speech.html"&gt;just look at John McCain's gracious concession speech&lt;/a&gt;.  He was decent.  He was a gentleman.  His "supporters" often booed him and shouted obscenities.  Until people on &lt;em&gt;all&lt;/em&gt; sides start realizing that those they disagree with are worthy of respect and consideration, we're going to continue down this torturous path.  I think most Republicans are decent people I merely disagree with.  It's the extreme ones who accuse Obama of being a socialist or Marxist, of having terrorist sympathies or of threatening to tear our country apart who are the real threat to us right now.  I think they're finally being marginalized, but Fox News, Rush Limbaugh and others are there to keep the flames of hate alive (that being said, I'm very impressed that some news people at Fox News are publicly battling the more offensive elements of the extreme right).&lt;/p&gt;</description>
<dc:creator>Ovid</dc:creator>
<dc:date>2008-11-05T11:00:44+00:00</dc:date>
<dc:subject>journal</dc:subject>
</item>

<item rdf:about="http://use.perl.org/~Ovid/journal/37808?from=rss">
<title>BBC Joins Parrot Foundation Advisory Board</title>
<link>http://use.perl.org/~Ovid/journal/37808?from=rss</link>
<description>&lt;p&gt;Realizing that the past couple of days have probably proved distracting for some, you may not have heard the news that &lt;a href="http://www.parrot.org/news/bbc-joins-parrot-foundation-advisory-board"&gt;the BBC has joined the Parrot Foundation Advisory Board&lt;/a&gt;.  We've been working on this for quite a while, but as one might understand, there were various issues which needed to be settled before we could make this happen.&lt;/p&gt;</description>
<dc:creator>Ovid</dc:creator>
<dc:date>2008-11-05T10:57:37+00:00</dc:date>
<dc:subject>journal</dc:subject>
</item>

<item rdf:about="http://use.perl.org/~Ovid/journal/37797?from=rss">
<title>use_ok is not ok.</title>
<link>http://use.perl.org/~Ovid/journal/37797?from=rss</link>
<description>&lt;p&gt;You probably see a lot of tests with &lt;tt&gt;use_ok&lt;/tt&gt; in them.  In general, this should be avoided.  It gets needlessly duplicated in plenty of test code.  Instead, try something like this in your 00-load.t file:&lt;/p&gt;&lt;blockquote&gt;&lt;div&gt;&lt;p&gt; &lt;tt&gt;#!/usr/bin/env perl&lt;br&gt; &lt;br&gt;use strict;&lt;br&gt;use warnings;&lt;br&gt; &lt;br&gt;use File::Find;&lt;br&gt;use File::Spec;&lt;br&gt; &lt;br&gt;use lib 'lib';&lt;br&gt;use Test::More;&lt;br&gt; &lt;br&gt;BEGIN {&lt;br&gt;&amp;nbsp; &amp;nbsp; my $DIR =&amp;gt; 'lib/';&lt;br&gt; &lt;br&gt;&amp;nbsp; &amp;nbsp; sub to_module($) {&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; my $file = shift;&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $file =~ s{\.pm$}{};&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $file =~ s{\\}{/}g;&amp;nbsp; &amp;nbsp; # to make win32 happy&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $file =~ s/^$DIR//;&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return join '::' =&amp;gt; grep _ =&amp;gt; File::Spec-&amp;gt;splitdir($file);&lt;br&gt;&amp;nbsp; &amp;nbsp; }&lt;br&gt; &lt;br&gt;&amp;nbsp; &amp;nbsp; my @modules;&lt;br&gt; &lt;br&gt;&amp;nbsp; &amp;nbsp; find({&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; no_chdir =&amp;gt; 1,&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; wanted&amp;nbsp; &amp;nbsp;=&amp;gt; sub {&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; push @modules =&amp;gt; map { to_module $_ } $File::Find::name&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if&lt;nobr&gt; &lt;wbr&gt;&lt;/nobr&gt;/\.pm$/;&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; },&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; },&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $DIR&lt;br&gt;&amp;nbsp; &amp;nbsp; );&lt;br&gt; &lt;br&gt;&amp;nbsp; &amp;nbsp; plan tests =&amp;gt; scalar @modules;&lt;br&gt; &lt;br&gt;&amp;nbsp; &amp;nbsp; for my $module (@modules) {&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; use_ok $module or BAIL_OUT("Could not use $module");&lt;br&gt;&amp;nbsp; &amp;nbsp; }&lt;br&gt;}&lt;/tt&gt;&lt;/p&gt;&lt;/div&gt; &lt;/blockquote&gt;&lt;p&gt;That's not perfect and I'm sure there's a module somewhere which does this, but it's a good start.  Basically, it asserts that you can use all of the modules you've defined.  You could easily update it to have exceptions, but if you can't use one, you get a bail-out (this stops tons of annoying test failures from a simple typo).  Then, you can remove all of those annoyingly duplicated &lt;tt&gt;use_ok&lt;/tt&gt; lines in your tests and just use the damned modules you need.&lt;/p&gt;</description>
<dc:creator>Ovid</dc:creator>
<dc:date>2008-11-03T17:28:03+00:00</dc:date>
<dc:subject>journal</dc:subject>
</item>

</rdf:RDF>
